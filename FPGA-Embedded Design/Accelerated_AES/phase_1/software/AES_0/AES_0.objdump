
AES_0.elf:     file format elf32-littlenios2
AES_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000637c memsz 0x0000638c flags rwx
    LOAD off    0x00008000 vaddr 0x00021000 paddr 0x00021000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00021000  00021000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00008000  2**0
                  CONTENTS
  2 .text         00004854  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000238  00004874  00004874  00005874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018f0  00004aac  00004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  0000639c  0000639c  0000739c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000063ac  000063ac  00008000  2**0
                  CONTENTS
  7 .epcs         00000000  00021020  00021020  00008000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000590  00000000  00000000  00008028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000084ec  00000000  00000000  000085b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ebf  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003863  00000000  00000000  00013963  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000aa4  00000000  00000000  000171c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000019a5  00000000  00000000  00017c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00006f46  00000000  00000000  00019611  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00020558  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000b48  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000229b2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000229b5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000229c1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000229c2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000229c3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000229c7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000229cb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000229cf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000229da  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000229e5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000229f0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000021  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY
 30 .jdi          00005634  00000000  00000000  00022a1b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000508d7  00000000  00000000  0002804f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00021000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00004874 l    d  .rodata	00000000 .rodata
00004aac l    d  .rwdata	00000000 .rwdata
0000639c l    d  .bss	00000000 .bss
000063ac l    d  .onchip_memory	00000000 .onchip_memory
00021020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AES_0_bsp//obj/HAL/src/crt0.o
00000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 aes.c
00000000 l    df *ABS*	00000000 aestab.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000039b4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00003f60 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
000062ac l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00004728 g     F .text	0000002c alt_main
0000396c g     F .text	0000002c strcpy
00003770 g     F .text	00000080 _puts_r
00000b48 g     F .text	0000010c InvShiftRows
00004eac g     O .rwdata	00000100 Xtime3Sbox
00003724 g     F .text	0000004c printf
00004860 g     F .text	0000000c alt_get_cpu_freq
00004dac g     O .rwdata	00000100 Xtime9
00000ff0 g     F .text	0000009c Decrypt
000017d4 g     F .text	00000440 .hidden __divsf3
0000466c g     F .text	00000060 memmove
000038b4 g     F .text	000000b8 snprintf
000021b4 g     F .text	00000070 .hidden __fixsfsi
00002314 g     F .text	000000dc .hidden __gtdf2
0000486c g     F .text	00000008 altera_nios2_gen2_irq_init
000045c4 g     F .text	000000a8 __sfvwrite_small_str
00021000 g     F .entry	00000000 __reset
0000639c g     O .bss	00000004 errno
000063a4 g     O .bss	00000004 alt_argv
00000694 g     F .text	0000010c ShiftRows
0000e38c g       *ABS*	00000000 _gp
00001cd0 g     F .text	000004e4 .hidden __subsf3
000036a0 g     F .text	00000028 memcpy
000007a0 g     F .text	00000304 MixSubColumns
000037f0 g     F .text	00000014 puts
0000153c g     F .text	00000010 timer_elapsed
000036e8 g     F .text	0000003c _printf_r
00001718 g     F .text	00000064 .hidden __udivsi3
000015ac g     F .text	00000074 .hidden __fixunsdfsi
00004844 g     F .text	00000014 perf_get_num_starts
00005cac g     O .rwdata	00000400 aestab_SBox0
00001498 g     F .text	00000014 timer_elapsed_global
00004bac g     O .rwdata	00000100 XtimeD
000014e4 g     F .text	00000014 timer_read_to
0000352c g     F .text	00000110 .hidden __extendsfdf2
0000638c g     O .rwdata	00000004 _global_impure_ptr
000063ac g       *ABS*	00000000 __bss_end
00003484 g     F .text	000000a8 .hidden __floatunsidf
00001440 g     F .text	00000048 __timer_start
000060ac g     O .rwdata	00000100 InvSbox
00004724 g     F .text	00000004 alt_dcache_flush_all
00000224 g     F .text	00000178 ExpandKey
00003404 g     F .text	00000080 .hidden __fixdfsi
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00004754 g     F .text	00000060 write
00001c14 g     F .text	000000bc .hidden __gtsf2
00006394 g     O .rwdata	00000004 jtag_uart_0
0000177c g     F .text	00000058 .hidden __umodsi3
000063ac g       *ABS*	00000000 end
000014cc g     F .text	00000018 timer_start
00004aac g     O .rwdata	00000100 XtimeE
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000363c g     F .text	00000064 .hidden __clzsi2
00003804 g     F .text	000000b0 _snprintf_r
000047e8 g     F .text	00000034 altera_avalon_jtag_uart_write
00003fcc g     F .text	00000524 ___vfprintf_internal_r
00000020 g     F .text	00000038 _start
000047d4 g     F .text	00000014 alt_sys_init
000013cc g     F .text	00000010 __timer_reset
000054ac g     O .rwdata	00000400 aestab_SBox2
0000481c g     F .text	00000020 perf_get_section_time
000063ac g       *ABS*	00000000 __alt_stack_base
0000483c g     F .text	00000008 perf_get_total_time
000023f0 g     F .text	00000718 .hidden __muldf3
00003a20 g     F .text	00000524 ___svfprintf_internal_r
00001524 g     F .text	00000018 timer_wait_for_to
0000450c g     F .text	000000b8 __sfvwrite_small_dev
00000aa4 g     F .text	000000a4 aes_blockenc_NOacc
0000639c g       *ABS*	00000000 __bss_start
00001488 g     F .text	00000010 timer_start_global
000036c8 g     F .text	00000020 memset
000058ac g     O .rwdata	00000400 aestab_SBox1
0000108c g     F .text	00000340 main
000063a0 g     O .bss	00000004 alt_envp
00006398 g     O .rwdata	00000004 alt_errno
0000039c g     F .text	000002d4 aes_blockenc_SWacc
00001620 g     F .text	00000084 .hidden __divsi3
000047b4 g     F .text	00000020 alt_irq_init
000049a8 g     O .rodata	00000100 .hidden __clz_tab
00004cac g     O .rwdata	00000100 XtimeB
00001c14 g     F .text	000000bc .hidden __gesf2
000046cc g     F .text	00000058 _write_r
00006390 g     O .rwdata	00000004 _impure_ptr
000063a8 g     O .bss	00000004 alt_argc
00003f44 g     F .text	0000001c __vfprintf_internal_unused
000014ac g     F .text	00000020 timer_reset
000014f8 g     F .text	0000002c timer_wait
00000058 g     F .text	000001cc aes_keyexpand128
0000639c g       *ABS*	00000000 _edata
000063ac g       *ABS*	00000000 _end
00004858 g     F .text	00000008 alt_get_performance_counter_base
00002224 g     F .text	000000f0 .hidden __floatunsisf
000016a4 g     F .text	00000074 .hidden __modsi3
00004fac g     O .rwdata	00000100 Xtime2Sbox
000186a0 g       *ABS*	00000000 __alt_data_end
000013dc g     F .text	00000064 __timer_elapsed
0000154c g     F .text	00000060 .hidden __fixunssfsi
00021000 g       .entry	00000000 _exit
000061ac g     O .rwdata	00000100 Sbox
00003998 g     F .text	0000001c strlen
00002314 g     F .text	000000dc .hidden __gedf2
000050ac g     O .rwdata	00000400 aestab_SBox3
000044f0 g     F .text	0000001c __vfprintf_internal
00021000 g       *ABS*	00000000 __alt_mem_epcs
00002b08 g     F .text	000008fc .hidden __subdf3
00000670 g     F .text	00000024 AddRoundKey
00000c54 g     F .text	0000039c InvMixSubColumns



Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6b8e314 	ori	gp,gp,58252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1098e714 	ori	r2,r2,25500

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18d8eb14 	ori	r3,r3,25516

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <__alt_mem_epcs+0xfffdf044>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      50:	00047280 	call	4728 <alt_main>

00000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      54:	003fff06 	br	54 <__alt_mem_epcs+0xfffdf054>

00000058 <aes_keyexpand128>:
void aes_keyexpand128(uint8* key, uint8* keyexp)
{
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
      58:	20800017 	ldw	r2,0(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      5c:	defff704 	addi	sp,sp,-36
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
      60:	01c00034 	movhi	r7,0
void aes_keyexpand128(uint8* key, uint8* keyexp)
{
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
      64:	28800015 	stw	r2,0(r5)
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
      68:	20800117 	ldw	r2,4(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      6c:	dfc00815 	stw	ra,32(sp)
      70:	dd400515 	stw	r21,20(sp)
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
      74:	28800115 	stw	r2,4(r5)
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
      78:	20800217 	ldw	r2,8(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      7c:	dd000415 	stw	r20,16(sp)
      80:	dcc00315 	stw	r19,12(sp)
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
      84:	28800215 	stw	r2,8(r5)
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);
      88:	20800317 	ldw	r2,12(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      8c:	dc800215 	stw	r18,8(sp)
      90:	dc400115 	stw	r17,4(sp)
      94:	dc000015 	stw	r16,0(sp)
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);
      98:	28800315 	stw	r2,12(r5)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      9c:	ddc00715 	stw	r23,28(sp)
      a0:	dd800615 	stw	r22,24(sp)
      a4:	2d000344 	addi	r20,r5,13
      a8:	29000404 	addi	r4,r5,16
      ac:	2cc00044 	addi	r19,r5,1
      b0:	2c800384 	addi	r18,r5,14
      b4:	2c400444 	addi	r17,r5,17
      b8:	2c000084 	addi	r16,r5,2
      bc:	2fc003c4 	addi	ra,r5,15
      c0:	2bc00484 	addi	r15,r5,18
      c4:	2b8000c4 	addi	r14,r5,3
      c8:	29800304 	addi	r6,r5,12
      cc:	2b4004c4 	addi	r13,r5,19
      d0:	2b000104 	addi	r12,r5,4
      d4:	2ac00504 	addi	r11,r5,20
      d8:	2a800204 	addi	r10,r5,8
      dc:	2a400604 	addi	r9,r5,24
      e0:	2a000704 	addi	r8,r5,28
      e4:	2d402c04 	addi	r21,r5,176
    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;
      e8:	00800044 	movi	r2,1

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
      ec:	39d86b04 	addi	r7,r7,25004
      f0:	a5c00003 	ldbu	r23,0(r20)
      f4:	28c00003 	ldbu	r3,0(r5)
      f8:	21000404 	addi	r4,r4,16
      fc:	3def883a 	add	r23,r7,r23
     100:	18acf03a 	xor	r22,r3,r2
     104:	b8c00003 	ldbu	r3,0(r23)
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
        Rcon=((Rcon<<1)&0xFE)^
     108:	10803fcc 	andi	r2,r2,255
     10c:	29400404 	addi	r5,r5,16
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
     110:	b0c6f03a 	xor	r3,r22,r3
     114:	20fffc05 	stb	r3,-16(r4)
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
     118:	90c00003 	ldbu	r3,0(r18)
     11c:	a5000404 	addi	r20,r20,16
     120:	9cc00404 	addi	r19,r19,16
     124:	38c7883a 	add	r3,r7,r3
     128:	1d800003 	ldbu	r22,0(r3)
     12c:	98fffc03 	ldbu	r3,-16(r19)
     130:	94800404 	addi	r18,r18,16
     134:	8c400404 	addi	r17,r17,16
     138:	b0c6f03a 	xor	r3,r22,r3
     13c:	88fffc05 	stb	r3,-16(r17)
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
     140:	f8c00003 	ldbu	r3,0(ra)
     144:	84000404 	addi	r16,r16,16
     148:	ffc00404 	addi	ra,ra,16
     14c:	38c7883a 	add	r3,r7,r3
     150:	1d800003 	ldbu	r22,0(r3)
     154:	80fffc03 	ldbu	r3,-16(r16)
     158:	7bc00404 	addi	r15,r15,16
     15c:	73800404 	addi	r14,r14,16
     160:	b0c6f03a 	xor	r3,r22,r3
     164:	78fffc05 	stb	r3,-16(r15)
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
     168:	30c00003 	ldbu	r3,0(r6)
     16c:	6b400404 	addi	r13,r13,16
     170:	31800404 	addi	r6,r6,16
     174:	38c7883a 	add	r3,r7,r3
     178:	1d800003 	ldbu	r22,0(r3)
     17c:	70fffc03 	ldbu	r3,-16(r14)
     180:	63000404 	addi	r12,r12,16
     184:	5ac00404 	addi	r11,r11,16
     188:	b0c6f03a 	xor	r3,r22,r3
        Rcon=((Rcon<<1)&0xFE)^
     18c:	102cd0fa 	srli	r22,r2,3
    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
     190:	68fffc05 	stb	r3,-16(r13)
        Rcon=((Rcon<<1)&0xFE)^
     194:	1087883a 	add	r3,r2,r2
     198:	b580040c 	andi	r22,r22,16
     19c:	b0c6f03a 	xor	r3,r22,r3
     1a0:	102cd1fa 	srli	r22,r2,7
     1a4:	52800404 	addi	r10,r10,16
     1a8:	4a400404 	addi	r9,r9,16
     1ac:	1dacf03a 	xor	r22,r3,r22
     1b0:	1006d13a 	srli	r3,r2,4
     1b4:	1004d1ba 	srli	r2,r2,6
     1b8:	42000404 	addi	r8,r8,16
     1bc:	18c0020c 	andi	r3,r3,8
     1c0:	b0c6f03a 	xor	r3,r22,r3
     1c4:	1080008c 	andi	r2,r2,2
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
     1c8:	65bffc17 	ldw	r22,-16(r12)
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
        Rcon=((Rcon<<1)&0xFE)^
     1cc:	1884f03a 	xor	r2,r3,r2
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
     1d0:	20fffc17 	ldw	r3,-16(r4)
     1d4:	b0ecf03a 	xor	r22,r22,r3
        Rcon=((Rcon<<1)&0xFE)^
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
     1d8:	5dbffc15 	stw	r22,-16(r11)
            ^*(uint32 *)(keyexp+i*16   );
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
            ^*(uint32 *)(keyexp+i*16+4 );
     1dc:	50fffc17 	ldw	r3,-16(r10)
     1e0:	b0c6f03a 	xor	r3,r22,r3
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
     1e4:	48fffc15 	stw	r3,-16(r9)
            ^*(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(keyexp+i*16+12)=*(uint32 *)(keyexp+i*16-4 )
     1e8:	35bffc17 	ldw	r22,-16(r6)
     1ec:	b0c6f03a 	xor	r3,r22,r3
     1f0:	40fffc15 	stw	r3,-16(r8)
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
     1f4:	257fbe1e 	bne	r4,r21,f0 <__alt_mem_epcs+0xfffdf0f0>
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
            ^*(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(keyexp+i*16+12)=*(uint32 *)(keyexp+i*16-4 )
            ^*(uint32 *)(keyexp+i*16+8 );
    };
}
     1f8:	dfc00817 	ldw	ra,32(sp)
     1fc:	ddc00717 	ldw	r23,28(sp)
     200:	dd800617 	ldw	r22,24(sp)
     204:	dd400517 	ldw	r21,20(sp)
     208:	dd000417 	ldw	r20,16(sp)
     20c:	dcc00317 	ldw	r19,12(sp)
     210:	dc800217 	ldw	r18,8(sp)
     214:	dc400117 	ldw	r17,4(sp)
     218:	dc000017 	ldw	r16,0(sp)
     21c:	dec00904 	addi	sp,sp,36
     220:	f800283a 	ret

00000224 <ExpandKey>:



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     224:	defff704 	addi	sp,sp,-36
     228:	dc000315 	stw	r16,12(sp)
     22c:	2821883a 	mov	r16,r5
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     230:	01400034 	movhi	r5,0



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     234:	dc400415 	stw	r17,16(sp)
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     238:	018002c4 	movi	r6,11



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     23c:	2023883a 	mov	r17,r4
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     240:	29521d04 	addi	r5,r5,18548
     244:	d809883a 	mov	r4,sp



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     248:	dfc00815 	stw	ra,32(sp)
     24c:	dd000715 	stw	r20,28(sp)
     250:	dcc00615 	stw	r19,24(sp)
     254:	dc800515 	stw	r18,20(sp)
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     258:	00036a00 	call	36a0 <memcpy>
     25c:	8809883a 	mov	r4,r17
     260:	803f883a 	mov	ra,r16
     264:	88c00404 	addi	r3,r17,16
     268:	8005883a 	mov	r2,r16
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];
     26c:	21400003 	ldbu	r5,0(r4)
     270:	21000044 	addi	r4,r4,1
     274:	10800044 	addi	r2,r2,1
     278:	117fffc5 	stb	r5,-1(r2)
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
     27c:	20fffb1e 	bne	r4,r3,26c <__alt_mem_epcs+0xfffdf26c>
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     280:	01c00034 	movhi	r7,0
     284:	84800304 	addi	r18,r16,12
     288:	84400344 	addi	r17,r16,13
     28c:	83c00384 	addi	r15,r16,14
     290:	838003c4 	addi	r14,r16,15
     294:	83400404 	addi	r13,r16,16
     298:	83000044 	addi	r12,r16,1
     29c:	82c00444 	addi	r11,r16,17
     2a0:	82800084 	addi	r10,r16,2
     2a4:	82400484 	addi	r9,r16,18
     2a8:	820000c4 	addi	r8,r16,3
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
     2ac:	01800104 	movi	r6,4
     2b0:	840004c4 	addi	r16,r16,19
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     2b4:	39d86b04 	addi	r7,r7,25004

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     2b8:	04c00b04 	movi	r19,44
        tmp0 = expkey[4*idx - 4];
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
     2bc:	350000cc 	andi	r20,r6,3
    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
        tmp0 = expkey[4*idx - 4];
     2c0:	91400003 	ldbu	r5,0(r18)
        tmp1 = expkey[4*idx - 3];
     2c4:	89000003 	ldbu	r4,0(r17)
        tmp2 = expkey[4*idx - 2];
     2c8:	78c00003 	ldbu	r3,0(r15)
        tmp3 = expkey[4*idx - 1];
     2cc:	70800003 	ldbu	r2,0(r14)
        if( !(idx % Nk) ) {
     2d0:	a000101e 	bne	r20,zero,314 <ExpandKey+0xf0>
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     2d4:	29403fcc 	andi	r5,r5,255
     2d8:	3969883a 	add	r20,r7,r5
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
     2dc:	300ad0ba 	srli	r5,r6,2
     2e0:	21003fcc 	andi	r4,r4,255
     2e4:	3909883a 	add	r4,r7,r4
     2e8:	d94b883a 	add	r5,sp,r5
     2ec:	21000003 	ldbu	r4,0(r4)
     2f0:	29400003 	ldbu	r5,0(r5)
            tmp1 = Sbox[tmp2];
     2f4:	18c03fcc 	andi	r3,r3,255
            tmp2 = Sbox[tmp4];
     2f8:	10803fcc 	andi	r2,r2,255
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
            tmp1 = Sbox[tmp2];
     2fc:	38c7883a 	add	r3,r7,r3
            tmp2 = Sbox[tmp4];
     300:	3885883a 	add	r2,r7,r2
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
     304:	290af03a 	xor	r5,r5,r4
            tmp1 = Sbox[tmp2];
     308:	19000003 	ldbu	r4,0(r3)
            tmp2 = Sbox[tmp4];
     30c:	10c00003 	ldbu	r3,0(r2)
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     310:	a0800003 	ldbu	r2,0(r20)
            tmp1 = Sbox[tmp1];
            tmp2 = Sbox[tmp2];
            tmp3 = Sbox[tmp3];
        }

        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
     314:	fd000003 	ldbu	r20,0(ra)

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     318:	31800044 	addi	r6,r6,1
     31c:	94800104 	addi	r18,r18,4
            tmp1 = Sbox[tmp1];
            tmp2 = Sbox[tmp2];
            tmp3 = Sbox[tmp3];
        }

        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
     320:	a14af03a 	xor	r5,r20,r5
     324:	69400005 	stb	r5,0(r13)
        expkey[4*idx+1] = expkey[4*idx - 4*Nk + 1] ^ tmp1;
     328:	61400003 	ldbu	r5,0(r12)
     32c:	ffc00104 	addi	ra,ra,4
     330:	8c400104 	addi	r17,r17,4
     334:	2908f03a 	xor	r4,r5,r4
     338:	59000005 	stb	r4,0(r11)
        expkey[4*idx+2] = expkey[4*idx - 4*Nk + 2] ^ tmp2;
     33c:	51000003 	ldbu	r4,0(r10)
     340:	7bc00104 	addi	r15,r15,4
     344:	73800104 	addi	r14,r14,4
     348:	20c6f03a 	xor	r3,r4,r3
     34c:	48c00005 	stb	r3,0(r9)
        expkey[4*idx+3] = expkey[4*idx - 4*Nk + 3] ^ tmp3;
     350:	40c00003 	ldbu	r3,0(r8)
     354:	6b400104 	addi	r13,r13,4
     358:	63000104 	addi	r12,r12,4
     35c:	1884f03a 	xor	r2,r3,r2
     360:	80800005 	stb	r2,0(r16)
     364:	5ac00104 	addi	r11,r11,4
     368:	52800104 	addi	r10,r10,4
     36c:	4a400104 	addi	r9,r9,4
     370:	42000104 	addi	r8,r8,4
     374:	84000104 	addi	r16,r16,4

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     378:	34ffd01e 	bne	r6,r19,2bc <__alt_mem_epcs+0xfffdf2bc>
        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
        expkey[4*idx+1] = expkey[4*idx - 4*Nk + 1] ^ tmp1;
        expkey[4*idx+2] = expkey[4*idx - 4*Nk + 2] ^ tmp2;
        expkey[4*idx+3] = expkey[4*idx - 4*Nk + 3] ^ tmp3;
    }
}
     37c:	dfc00817 	ldw	ra,32(sp)
     380:	dd000717 	ldw	r20,28(sp)
     384:	dcc00617 	ldw	r19,24(sp)
     388:	dc800517 	ldw	r18,20(sp)
     38c:	dc400417 	ldw	r17,16(sp)
     390:	dc000317 	ldw	r16,12(sp)
     394:	dec00904 	addi	sp,sp,36
     398:	f800283a 	ret

0000039c <aes_blockenc_SWacc>:
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
     39c:	20c00017 	ldw	r3,0(r4)
     3a0:	30800017 	ldw	r2,0(r6)


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3a4:	deffed04 	addi	sp,sp,-76
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     3a8:	03000034 	movhi	r12,0
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
     3ac:	1884f03a 	xor	r2,r3,r2
     3b0:	28800015 	stw	r2,0(r5)
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
     3b4:	20c00117 	ldw	r3,4(r4)
     3b8:	30800117 	ldw	r2,4(r6)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     3bc:	02c00034 	movhi	r11,0
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     3c0:	02800034 	movhi	r10,0
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
     3c4:	1884f03a 	xor	r2,r3,r2
     3c8:	28800115 	stw	r2,4(r5)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
     3cc:	20c00217 	ldw	r3,8(r4)
     3d0:	30800217 	ldw	r2,8(r6)
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     3d4:	02400034 	movhi	r9,0


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3d8:	dfc01215 	stw	ra,72(sp)
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
     3dc:	1884f03a 	xor	r2,r3,r2
     3e0:	28800215 	stw	r2,8(r5)
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
     3e4:	20c00317 	ldw	r3,12(r4)
     3e8:	30800317 	ldw	r2,12(r6)


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3ec:	dc401115 	stw	r17,68(sp)
     3f0:	dc001015 	stw	r16,64(sp)
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
     3f4:	1884f03a 	xor	r2,r3,r2
     3f8:	28800315 	stw	r2,12(r5)
     3fc:	32000404 	addi	r8,r6,16
     400:	33c00504 	addi	r15,r6,20
     404:	33800604 	addi	r14,r6,24
     408:	33400704 	addi	r13,r6,28
     40c:	37c02804 	addi	ra,r6,160
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     410:	63172b04 	addi	r12,r12,23724
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     414:	5ad62b04 	addi	r11,r11,22700
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     418:	52952b04 	addi	r10,r10,21676
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     41c:	4a542b04 	addi	r9,r9,20652
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     420:	28800003 	ldbu	r2,0(r5)
     424:	42000404 	addi	r8,r8,16
     428:	7bc00404 	addi	r15,r15,16
     42c:	1085883a 	add	r2,r2,r2
     430:	1085883a 	add	r2,r2,r2
     434:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     438:	28800143 	ldbu	r2,5(r5)
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     43c:	19c00017 	ldw	r7,0(r3)
     440:	73800404 	addi	r14,r14,16
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     444:	1085883a 	add	r2,r2,r2
     448:	1085883a 	add	r2,r2,r2
     44c:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     450:	10800017 	ldw	r2,0(r2)
     454:	6b400404 	addi	r13,r13,16
     458:	388ef03a 	xor	r7,r7,r2
     45c:	28800283 	ldbu	r2,10(r5)
     460:	1085883a 	add	r2,r2,r2
     464:	1085883a 	add	r2,r2,r2
     468:	1285883a 	add	r2,r2,r10
     46c:	10800017 	ldw	r2,0(r2)
     470:	3886f03a 	xor	r3,r7,r2
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     474:	288003c3 	ldbu	r2,15(r5)
     478:	1085883a 	add	r2,r2,r2
     47c:	1085883a 	add	r2,r2,r2
     480:	1245883a 	add	r2,r2,r9
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     484:	11c00017 	ldw	r7,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
     488:	28800103 	ldbu	r2,4(r5)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     48c:	19cef03a 	xor	r7,r3,r7
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
     490:	1085883a 	add	r2,r2,r2
     494:	1085883a 	add	r2,r2,r2
     498:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
     49c:	28800243 	ldbu	r2,9(r5)
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4a0:	19000017 	ldw	r4,0(r3)
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
     4a4:	1085883a 	add	r2,r2,r2
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	2088f03a 	xor	r4,r4,r2
     4b8:	28800383 	ldbu	r2,14(r5)
     4bc:	1085883a 	add	r2,r2,r2
     4c0:	1085883a 	add	r2,r2,r2
     4c4:	1285883a 	add	r2,r2,r10
     4c8:	10800017 	ldw	r2,0(r2)
     4cc:	2086f03a 	xor	r3,r4,r2
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
     4d0:	288000c3 	ldbu	r2,3(r5)
     4d4:	1085883a 	add	r2,r2,r2
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4e0:	11000017 	ldw	r4,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
     4e4:	28800203 	ldbu	r2,8(r5)
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4e8:	1908f03a 	xor	r4,r3,r4
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
     4ec:	1085883a 	add	r2,r2,r2
     4f0:	1085883a 	add	r2,r2,r2
     4f4:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
     4f8:	28800343 	ldbu	r2,13(r5)
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     4fc:	18c00017 	ldw	r3,0(r3)
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
     500:	1085883a 	add	r2,r2,r2
     504:	1085883a 	add	r2,r2,r2
     508:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     50c:	10800017 	ldw	r2,0(r2)
     510:	1886f03a 	xor	r3,r3,r2
     514:	28800083 	ldbu	r2,2(r5)
     518:	1085883a 	add	r2,r2,r2
     51c:	1085883a 	add	r2,r2,r2
     520:	1285883a 	add	r2,r2,r10
     524:	10800017 	ldw	r2,0(r2)
     528:	1886f03a 	xor	r3,r3,r2
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
     52c:	288001c3 	ldbu	r2,7(r5)
     530:	1085883a 	add	r2,r2,r2
     534:	1085883a 	add	r2,r2,r2
     538:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     53c:	10800017 	ldw	r2,0(r2)
     540:	1886f03a 	xor	r3,r3,r2
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
     544:	28800303 	ldbu	r2,12(r5)
     548:	1085883a 	add	r2,r2,r2
     54c:	1085883a 	add	r2,r2,r2
     550:	1321883a 	add	r16,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
     554:	28800043 	ldbu	r2,1(r5)
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     558:	84000017 	ldw	r16,0(r16)
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
     55c:	1085883a 	add	r2,r2,r2
     560:	1085883a 	add	r2,r2,r2
     564:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     568:	10800017 	ldw	r2,0(r2)
     56c:	80a2f03a 	xor	r17,r16,r2
     570:	28800183 	ldbu	r2,6(r5)
     574:	1085883a 	add	r2,r2,r2
     578:	1085883a 	add	r2,r2,r2
     57c:	1285883a 	add	r2,r2,r10
     580:	14000017 	ldw	r16,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
     584:	288002c3 	ldbu	r2,11(r5)
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     588:	8c20f03a 	xor	r16,r17,r16
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
     58c:	1085883a 	add	r2,r2,r2
     590:	1085883a 	add	r2,r2,r2
     594:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     598:	10800017 	ldw	r2,0(r2)
     59c:	8084f03a 	xor	r2,r16,r2
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
        *(uint32 *)(dest   )=*(uint32 *)(temp  )^
     5a0:	443ffc17 	ldw	r16,-16(r8)
     5a4:	81e0f03a 	xor	r16,r16,r7
     5a8:	2c000015 	stw	r16,0(r5)
            *(uint32 *)(keyexp+i*16   );
        *(uint32 *)(dest+4 )=*(uint32 *)(temp+1)^
     5ac:	7c3ffc17 	ldw	r16,-16(r15)
     5b0:	8120f03a 	xor	r16,r16,r4
     5b4:	2c000115 	stw	r16,4(r5)
            *(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(dest+8 )=*(uint32 *)(temp+2)^
     5b8:	743ffc17 	ldw	r16,-16(r14)
     5bc:	80e0f03a 	xor	r16,r16,r3
     5c0:	2c000215 	stw	r16,8(r5)
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
     5c4:	6c3ffc17 	ldw	r16,-16(r13)
     5c8:	80a0f03a 	xor	r16,r16,r2
     5cc:	2c000315 	stw	r16,12(r5)
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
     5d0:	fa3f931e 	bne	ra,r8,420 <__alt_mem_epcs+0xfffdf420>
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5d4:	02000034 	movhi	r8,0
     5d8:	d9000115 	stw	r4,4(sp)
     5dc:	d8800315 	stw	r2,12(sp)
     5e0:	d9c00015 	stw	r7,0(sp)
     5e4:	d8c00215 	stw	r3,8(sp)
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
     5e8:	0005883a 	mov	r2,zero
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5ec:	42186b04 	addi	r8,r8,25004
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     5f0:	01000404 	movi	r4,16
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5f4:	10c00164 	muli	r3,r2,5
     5f8:	d88f883a 	add	r7,sp,r2
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     5fc:	10800044 	addi	r2,r2,1
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     600:	18c003cc 	andi	r3,r3,15
     604:	28c7883a 	add	r3,r5,r3
     608:	18c00003 	ldbu	r3,0(r3)
     60c:	40c7883a 	add	r3,r8,r3
     610:	18c00003 	ldbu	r3,0(r3)
     614:	38c00005 	stb	r3,0(r7)
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     618:	113ff61e 	bne	r2,r4,5f4 <__alt_mem_epcs+0xfffdf5f4>
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];

    *(uint32 *)(dest   )=*(uint32 *)(temp  )^
     61c:	30802817 	ldw	r2,160(r6)
     620:	d8c00017 	ldw	r3,0(sp)
     624:	1884f03a 	xor	r2,r3,r2
     628:	28800015 	stw	r2,0(r5)
        *(uint32 *)(keyexp+rounds*16   );
    *(uint32 *)(dest+4 )=*(uint32 *)(temp+1)^
     62c:	30802917 	ldw	r2,164(r6)
     630:	d8c00117 	ldw	r3,4(sp)
     634:	1884f03a 	xor	r2,r3,r2
     638:	28800115 	stw	r2,4(r5)
        *(uint32 *)(keyexp+rounds*16+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(temp+2)^
     63c:	30802a17 	ldw	r2,168(r6)
     640:	d8c00217 	ldw	r3,8(sp)
     644:	1884f03a 	xor	r2,r3,r2
     648:	28800215 	stw	r2,8(r5)
        *(uint32 *)(keyexp+rounds*16+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
     64c:	30802b17 	ldw	r2,172(r6)
     650:	d8c00317 	ldw	r3,12(sp)
     654:	1884f03a 	xor	r2,r3,r2
     658:	28800315 	stw	r2,12(r5)

    *(uint32 *)(temp  )=0;
    *(uint32 *)(temp+1)=0;
    *(uint32 *)(temp+2)=0;
    *(uint32 *)(temp+3)=0;
}
     65c:	dfc01217 	ldw	ra,72(sp)
     660:	dc401117 	ldw	r17,68(sp)
     664:	dc001017 	ldw	r16,64(sp)
     668:	dec01304 	addi	sp,sp,76
     66c:	f800283a 	ret

00000670 <AddRoundKey>:
        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    }
}

void AddRoundKey (unsigned *state, unsigned *key)
{
     670:	20c00404 	addi	r3,r4,16
    int idx;

    for( idx = 0; idx < 4; idx++ )  // This may also be done byte-at-a-time
        state[idx] ^= key[idx];
     674:	21800017 	ldw	r6,0(r4)
     678:	28800017 	ldw	r2,0(r5)
     67c:	21000104 	addi	r4,r4,4
     680:	29400104 	addi	r5,r5,4
     684:	3084f03a 	xor	r2,r6,r2
     688:	20bfff15 	stw	r2,-4(r4)

void AddRoundKey (unsigned *state, unsigned *key)
{
    int idx;

    for( idx = 0; idx < 4; idx++ )  // This may also be done byte-at-a-time
     68c:	20fff91e 	bne	r4,r3,674 <__alt_mem_epcs+0xfffdf674>
        state[idx] ^= key[idx];
}
     690:	f800283a 	ret

00000694 <ShiftRows>:
void ShiftRows (uint8 *state)
{
    uint8 tmp;

    // just substitute row 0
    state[0] = Sbox[state[0]];
     694:	20c00003 	ldbu	r3,0(r4)
     698:	00800034 	movhi	r2,0
     69c:	10986b04 	addi	r2,r2,25004
     6a0:	10c7883a 	add	r3,r2,r3
     6a4:	18c00003 	ldbu	r3,0(r3)
     6a8:	20c00005 	stb	r3,0(r4)
    state[4] = Sbox[state[4]];
     6ac:	20c00103 	ldbu	r3,4(r4)
     6b0:	10c7883a 	add	r3,r2,r3
     6b4:	18c00003 	ldbu	r3,0(r3)
     6b8:	20c00105 	stb	r3,4(r4)
    state[8] = Sbox[state[8]];
     6bc:	20c00203 	ldbu	r3,8(r4)
     6c0:	10c7883a 	add	r3,r2,r3
     6c4:	18c00003 	ldbu	r3,0(r3)
     6c8:	20c00205 	stb	r3,8(r4)
    state[12] = Sbox[state[12]];
     6cc:	20c00303 	ldbu	r3,12(r4)
     6d0:	10c7883a 	add	r3,r2,r3
     6d4:	18c00003 	ldbu	r3,0(r3)
     6d8:	20c00305 	stb	r3,12(r4)

    // rotate row 1
    tmp = Sbox[state[1]];
     6dc:	20c00043 	ldbu	r3,1(r4)
     6e0:	10c7883a 	add	r3,r2,r3
     6e4:	19400003 	ldbu	r5,0(r3)
    state[1] = Sbox[state[5]];
     6e8:	20c00143 	ldbu	r3,5(r4)
     6ec:	10c7883a 	add	r3,r2,r3
     6f0:	18c00003 	ldbu	r3,0(r3)
     6f4:	20c00045 	stb	r3,1(r4)
    state[5] = Sbox[state[9]];
     6f8:	20c00243 	ldbu	r3,9(r4)
     6fc:	10c7883a 	add	r3,r2,r3
     700:	18c00003 	ldbu	r3,0(r3)
     704:	20c00145 	stb	r3,5(r4)
    state[9] = Sbox[state[13]];
     708:	20c00343 	ldbu	r3,13(r4)
     70c:	10c7883a 	add	r3,r2,r3
     710:	18c00003 	ldbu	r3,0(r3)
    state[13] = tmp;
     714:	21400345 	stb	r5,13(r4)

    // rotate row 1
    tmp = Sbox[state[1]];
    state[1] = Sbox[state[5]];
    state[5] = Sbox[state[9]];
    state[9] = Sbox[state[13]];
     718:	20c00245 	stb	r3,9(r4)
    state[13] = tmp;

    // rotate row 2
    tmp = Sbox[state[2]];
     71c:	20c00083 	ldbu	r3,2(r4)
     720:	10c7883a 	add	r3,r2,r3
     724:	19400003 	ldbu	r5,0(r3)
    state[2] = Sbox[state[10]];
     728:	20c00283 	ldbu	r3,10(r4)
     72c:	10c7883a 	add	r3,r2,r3
     730:	18c00003 	ldbu	r3,0(r3)
    state[10] = tmp;
     734:	21400285 	stb	r5,10(r4)
    state[9] = Sbox[state[13]];
    state[13] = tmp;

    // rotate row 2
    tmp = Sbox[state[2]];
    state[2] = Sbox[state[10]];
     738:	20c00085 	stb	r3,2(r4)
    state[10] = tmp;
    tmp = Sbox[state[6]];
     73c:	20c00183 	ldbu	r3,6(r4)
     740:	10c7883a 	add	r3,r2,r3
     744:	19400003 	ldbu	r5,0(r3)
    state[6] = Sbox[state[14]];
     748:	20c00383 	ldbu	r3,14(r4)
     74c:	10c7883a 	add	r3,r2,r3
     750:	18c00003 	ldbu	r3,0(r3)
    state[14] = tmp;
     754:	21400385 	stb	r5,14(r4)
    // rotate row 2
    tmp = Sbox[state[2]];
    state[2] = Sbox[state[10]];
    state[10] = tmp;
    tmp = Sbox[state[6]];
    state[6] = Sbox[state[14]];
     758:	20c00185 	stb	r3,6(r4)
    state[14] = tmp;

    // rotate row 3
    tmp = Sbox[state[15]];
     75c:	20c003c3 	ldbu	r3,15(r4)
     760:	10c7883a 	add	r3,r2,r3
     764:	19400003 	ldbu	r5,0(r3)
    state[15] = Sbox[state[11]];
     768:	20c002c3 	ldbu	r3,11(r4)
     76c:	10c7883a 	add	r3,r2,r3
     770:	18c00003 	ldbu	r3,0(r3)
     774:	20c003c5 	stb	r3,15(r4)
    state[11] = Sbox[state[7]];
     778:	20c001c3 	ldbu	r3,7(r4)
     77c:	10c7883a 	add	r3,r2,r3
     780:	18c00003 	ldbu	r3,0(r3)
     784:	20c002c5 	stb	r3,11(r4)
    state[7] = Sbox[state[3]];
     788:	20c000c3 	ldbu	r3,3(r4)
     78c:	10c5883a 	add	r2,r2,r3
     790:	10800003 	ldbu	r2,0(r2)
    state[3] = tmp;
     794:	214000c5 	stb	r5,3(r4)

    // rotate row 3
    tmp = Sbox[state[15]];
    state[15] = Sbox[state[11]];
    state[11] = Sbox[state[7]];
    state[7] = Sbox[state[3]];
     798:	208001c5 	stb	r2,7(r4)
    state[3] = tmp;
     79c:	f800283a 	ret

000007a0 <MixSubColumns>:
{
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
     7a0:	22400283 	ldbu	r9,10(r4)
     7a4:	21c003c3 	ldbu	r7,15(r4)
     7a8:	01400034 	movhi	r5,0
     7ac:	29586b04 	addi	r5,r5,25004
     7b0:	2a45883a 	add	r2,r5,r9
     7b4:	13400003 	ldbu	r13,0(r2)
     7b8:	22000003 	ldbu	r8,0(r4)
     7bc:	22800143 	ldbu	r10,5(r4)
     7c0:	29c5883a 	add	r2,r5,r7
     7c4:	13000003 	ldbu	r12,0(r2)
     7c8:	00c00034 	movhi	r3,0
     7cc:	00800034 	movhi	r2,0
     7d0:	1093eb04 	addi	r2,r2,20396
     7d4:	18d3ab04 	addi	r3,r3,20140
     7d8:	1217883a 	add	r11,r2,r8
     7dc:	1a8d883a 	add	r6,r3,r10
     7e0:	5ac00003 	ldbu	r11,0(r11)
     7e4:	31800003 	ldbu	r6,0(r6)
    state[3] = tmp;
}

// Tis combines SubBytes, ShiftRows, and MixColumns
void MixSubColumns (uint8 *state)
{
     7e8:	defffc04 	addi	sp,sp,-16
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
     7ec:	598cf03a 	xor	r6,r11,r6
     7f0:	334cf03a 	xor	r6,r6,r13
     7f4:	330cf03a 	xor	r6,r6,r12
     7f8:	d9800005 	stb	r6,0(sp)
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     7fc:	2a0d883a 	add	r6,r5,r8
     800:	32c00003 	ldbu	r11,0(r6)
     804:	128d883a 	add	r6,r2,r10
     808:	31800003 	ldbu	r6,0(r6)
     80c:	62d8f03a 	xor	r12,r12,r11
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     810:	2a95883a 	add	r10,r5,r10
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     814:	6198f03a 	xor	r12,r12,r6
     818:	1a4d883a 	add	r6,r3,r9
     81c:	31800003 	ldbu	r6,0(r6)
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     820:	1253883a 	add	r9,r2,r9
     824:	4a400003 	ldbu	r9,0(r9)
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     828:	6198f03a 	xor	r12,r12,r6
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     82c:	51800003 	ldbu	r6,0(r10)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     830:	1a11883a 	add	r8,r3,r8
     834:	42000003 	ldbu	r8,0(r8)
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     838:	5996f03a 	xor	r11,r11,r6
     83c:	5a56f03a 	xor	r11,r11,r9
     840:	19d3883a 	add	r9,r3,r7
     844:	4a400003 	ldbu	r9,0(r9)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     848:	11cf883a 	add	r7,r2,r7
     84c:	39c00003 	ldbu	r7,0(r7)
     850:	698cf03a 	xor	r6,r13,r6
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     854:	5a56f03a 	xor	r11,r11,r9
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     858:	320cf03a 	xor	r6,r6,r8

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     85c:	22400383 	ldbu	r9,14(r4)

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     860:	31ccf03a 	xor	r6,r6,r7

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     864:	21c000c3 	ldbu	r7,3(r4)
     868:	22000103 	ldbu	r8,4(r4)
     86c:	22800243 	ldbu	r10,9(r4)

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     870:	d98000c5 	stb	r6,3(sp)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     874:	2a4d883a 	add	r6,r5,r9
     878:	33400003 	ldbu	r13,0(r6)
     87c:	29cd883a 	add	r6,r5,r7
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     880:	db000045 	stb	r12,1(sp)
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     884:	dac00085 	stb	r11,2(sp)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     888:	33000003 	ldbu	r12,0(r6)
     88c:	1217883a 	add	r11,r2,r8
     890:	1a8d883a 	add	r6,r3,r10
     894:	5ac00003 	ldbu	r11,0(r11)
     898:	31800003 	ldbu	r6,0(r6)
     89c:	598cf03a 	xor	r6,r11,r6
     8a0:	334cf03a 	xor	r6,r6,r13
     8a4:	330cf03a 	xor	r6,r6,r12
     8a8:	d9800105 	stb	r6,4(sp)
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8ac:	2a0d883a 	add	r6,r5,r8
     8b0:	32c00003 	ldbu	r11,0(r6)
     8b4:	128d883a 	add	r6,r2,r10
     8b8:	31800003 	ldbu	r6,0(r6)
     8bc:	62d8f03a 	xor	r12,r12,r11
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8c0:	2a95883a 	add	r10,r5,r10
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8c4:	6198f03a 	xor	r12,r12,r6
     8c8:	1a4d883a 	add	r6,r3,r9
     8cc:	31800003 	ldbu	r6,0(r6)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8d0:	1253883a 	add	r9,r2,r9
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8d4:	1a11883a 	add	r8,r3,r8
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8d8:	6198f03a 	xor	r12,r12,r6
     8dc:	db000145 	stb	r12,5(sp)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8e0:	51800003 	ldbu	r6,0(r10)
     8e4:	4a400003 	ldbu	r9,0(r9)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8e8:	42000003 	ldbu	r8,0(r8)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8ec:	5996f03a 	xor	r11,r11,r6
     8f0:	5a56f03a 	xor	r11,r11,r9
     8f4:	19d3883a 	add	r9,r3,r7
     8f8:	4a400003 	ldbu	r9,0(r9)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8fc:	11cf883a 	add	r7,r2,r7
     900:	39c00003 	ldbu	r7,0(r7)
     904:	698cf03a 	xor	r6,r13,r6
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     908:	5a56f03a 	xor	r11,r11,r9
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     90c:	320cf03a 	xor	r6,r6,r8

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     910:	22400083 	ldbu	r9,2(r4)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     914:	31ccf03a 	xor	r6,r6,r7

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     918:	21c001c3 	ldbu	r7,7(r4)
     91c:	22000203 	ldbu	r8,8(r4)
     920:	22800343 	ldbu	r10,13(r4)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     924:	d98001c5 	stb	r6,7(sp)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     928:	2a4d883a 	add	r6,r5,r9
     92c:	33400003 	ldbu	r13,0(r6)
     930:	29cd883a 	add	r6,r5,r7
     934:	33000003 	ldbu	r12,0(r6)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     938:	dac00185 	stb	r11,6(sp)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     93c:	1a8d883a 	add	r6,r3,r10
     940:	1217883a 	add	r11,r2,r8
     944:	5ac00003 	ldbu	r11,0(r11)
     948:	31800003 	ldbu	r6,0(r6)
     94c:	598cf03a 	xor	r6,r11,r6
     950:	334cf03a 	xor	r6,r6,r13
     954:	330cf03a 	xor	r6,r6,r12
     958:	d9800205 	stb	r6,8(sp)
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     95c:	2a0d883a 	add	r6,r5,r8
     960:	32c00003 	ldbu	r11,0(r6)
     964:	128d883a 	add	r6,r2,r10
     968:	31800003 	ldbu	r6,0(r6)
     96c:	62d8f03a 	xor	r12,r12,r11
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     970:	2a95883a 	add	r10,r5,r10
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     974:	6198f03a 	xor	r12,r12,r6
     978:	1a4d883a 	add	r6,r3,r9
     97c:	31800003 	ldbu	r6,0(r6)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     980:	1253883a 	add	r9,r2,r9
     984:	4a400003 	ldbu	r9,0(r9)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     988:	6198f03a 	xor	r12,r12,r6
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     98c:	51800003 	ldbu	r6,0(r10)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     990:	1a11883a 	add	r8,r3,r8
     994:	42000003 	ldbu	r8,0(r8)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     998:	5996f03a 	xor	r11,r11,r6
     99c:	5a56f03a 	xor	r11,r11,r9
     9a0:	19d3883a 	add	r9,r3,r7
     9a4:	4a400003 	ldbu	r9,0(r9)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9a8:	11cf883a 	add	r7,r2,r7
     9ac:	39c00003 	ldbu	r7,0(r7)
     9b0:	698cf03a 	xor	r6,r13,r6
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     9b4:	5a56f03a 	xor	r11,r11,r9
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9b8:	320cf03a 	xor	r6,r6,r8

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9bc:	22400183 	ldbu	r9,6(r4)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9c0:	31ccf03a 	xor	r6,r6,r7

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9c4:	21c002c3 	ldbu	r7,11(r4)
     9c8:	22000303 	ldbu	r8,12(r4)
     9cc:	22800043 	ldbu	r10,1(r4)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9d0:	d98002c5 	stb	r6,11(sp)

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9d4:	2a4d883a 	add	r6,r5,r9
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     9d8:	db000245 	stb	r12,9(sp)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9dc:	33000003 	ldbu	r12,0(r6)
     9e0:	29cd883a 	add	r6,r5,r7
     9e4:	121b883a 	add	r13,r2,r8
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     9e8:	dac00285 	stb	r11,10(sp)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9ec:	32c00003 	ldbu	r11,0(r6)
     9f0:	1a8d883a 	add	r6,r3,r10
     9f4:	6b400003 	ldbu	r13,0(r13)
     9f8:	31800003 	ldbu	r6,0(r6)
     9fc:	698cf03a 	xor	r6,r13,r6
     a00:	330cf03a 	xor	r6,r6,r12
     a04:	32ccf03a 	xor	r6,r6,r11
     a08:	d9800305 	stb	r6,12(sp)
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a0c:	2a0d883a 	add	r6,r5,r8
     a10:	31800003 	ldbu	r6,0(r6)
     a14:	129b883a 	add	r13,r2,r10
     a18:	6b400003 	ldbu	r13,0(r13)
     a1c:	5996f03a 	xor	r11,r11,r6
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a20:	2a8b883a 	add	r5,r5,r10
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a24:	5b56f03a 	xor	r11,r11,r13
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a28:	29400003 	ldbu	r5,0(r5)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a2c:	1a5b883a 	add	r13,r3,r9
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a30:	1253883a 	add	r9,r2,r9
     a34:	4a400003 	ldbu	r9,0(r9)
     a38:	314cf03a 	xor	r6,r6,r5
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a3c:	11c5883a 	add	r2,r2,r7
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a40:	324cf03a 	xor	r6,r6,r9
     a44:	19d3883a 	add	r9,r3,r7
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a48:	1a07883a 	add	r3,r3,r8
     a4c:	18c00003 	ldbu	r3,0(r3)
     a50:	10800003 	ldbu	r2,0(r2)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a54:	6b400003 	ldbu	r13,0(r13)
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a58:	4a400003 	ldbu	r9,0(r9)
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a5c:	614af03a 	xor	r5,r12,r5
     a60:	28caf03a 	xor	r5,r5,r3
     a64:	288af03a 	xor	r5,r5,r2
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a68:	5b56f03a 	xor	r11,r11,r13
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a6c:	324cf03a 	xor	r6,r6,r9
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a70:	dac00345 	stb	r11,13(sp)
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a74:	d9800385 	stb	r6,14(sp)
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a78:	d94003c5 	stb	r5,15(sp)
     a7c:	0005883a 	mov	r2,zero

    //memcpy (state, tmp, sizeof(tmp));
    for(i = 0; i < Nb*4; i++)
     a80:	00c00404 	movi	r3,16
        state[i] = tmp[i];
     a84:	d88d883a 	add	r6,sp,r2
     a88:	31800003 	ldbu	r6,0(r6)
     a8c:	208b883a 	add	r5,r4,r2
     a90:	10800044 	addi	r2,r2,1
     a94:	29800005 	stb	r6,0(r5)
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];

    //memcpy (state, tmp, sizeof(tmp));
    for(i = 0; i < Nb*4; i++)
     a98:	10fffa1e 	bne	r2,r3,a84 <__alt_mem_epcs+0xfffdfa84>
        state[i] = tmp[i];
}
     a9c:	dec00404 	addi	sp,sp,16
     aa0:	f800283a 	ret

00000aa4 <aes_blockenc_NOacc>:


//------------------------------------------------------------------------
// Un-accelerated block encryption
void aes_blockenc_NOacc(uint8* in, uint8* out, uint8* expkey)
{
     aa4:	defffa04 	addi	sp,sp,-24
     aa8:	dc800215 	stw	r18,8(sp)
     aac:	dc400115 	stw	r17,4(sp)
     ab0:	dfc00515 	stw	ra,20(sp)
     ab4:	dd000415 	stw	r20,16(sp)
     ab8:	dcc00315 	stw	r19,12(sp)
     abc:	dc000015 	stw	r16,0(sp)
     ac0:	2823883a 	mov	r17,r5
     ac4:	3025883a 	mov	r18,r6
     ac8:	2805883a 	mov	r2,r5
     acc:	20c00404 	addi	r3,r4,16
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];
     ad0:	21400003 	ldbu	r5,0(r4)
     ad4:	21000044 	addi	r4,r4,1
     ad8:	10800044 	addi	r2,r2,1
     adc:	117fffc5 	stb	r5,-1(r2)
void aes_blockenc_NOacc(uint8* in, uint8* out, uint8* expkey)
{
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
     ae0:	20fffb1e 	bne	r4,r3,ad0 <__alt_mem_epcs+0xfffdfad0>
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);
     ae4:	900b883a 	mov	r5,r18
     ae8:	8809883a 	mov	r4,r17
     aec:	00006700 	call	670 <AddRoundKey>

    for( round = 1; round < Nr + 1; round++ ) {
     af0:	04000044 	movi	r16,1
        if( round < Nr )
     af4:	05000284 	movi	r20,10
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     af8:	04c002c4 	movi	r19,11
        if( round < Nr )
            MixSubColumns (out); // Includes SubBytes and ShiftRows
     afc:	8809883a 	mov	r4,r17
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
        if( round < Nr )
     b00:	85000226 	beq	r16,r20,b0c <aes_blockenc_NOacc+0x68>
            MixSubColumns (out); // Includes SubBytes and ShiftRows
     b04:	00007a00 	call	7a0 <MixSubColumns>
     b08:	00000106 	br	b10 <aes_blockenc_NOacc+0x6c>
        else
            ShiftRows (out); // Includes SubBytes
     b0c:	00006940 	call	694 <ShiftRows>

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
     b10:	800a913a 	slli	r5,r16,4
     b14:	8809883a 	mov	r4,r17
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     b18:	84000044 	addi	r16,r16,1
        if( round < Nr )
            MixSubColumns (out); // Includes SubBytes and ShiftRows
        else
            ShiftRows (out); // Includes SubBytes

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
     b1c:	914b883a 	add	r5,r18,r5
     b20:	00006700 	call	670 <AddRoundKey>
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     b24:	84fff51e 	bne	r16,r19,afc <__alt_mem_epcs+0xfffdfafc>
        else
            ShiftRows (out); // Includes SubBytes

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    }
}
     b28:	dfc00517 	ldw	ra,20(sp)
     b2c:	dd000417 	ldw	r20,16(sp)
     b30:	dcc00317 	ldw	r19,12(sp)
     b34:	dc800217 	ldw	r18,8(sp)
     b38:	dc400117 	ldw	r17,4(sp)
     b3c:	dc000017 	ldw	r16,0(sp)
     b40:	dec00604 	addi	sp,sp,24
     b44:	f800283a 	ret

00000b48 <InvShiftRows>:
void InvShiftRows (uint8 *state)
{
    uint8 tmp;

    // restore row 0
    state[0] = InvSbox[state[0]];
     b48:	20c00003 	ldbu	r3,0(r4)
     b4c:	00800034 	movhi	r2,0
     b50:	10982b04 	addi	r2,r2,24748
     b54:	10c7883a 	add	r3,r2,r3
     b58:	18c00003 	ldbu	r3,0(r3)
     b5c:	20c00005 	stb	r3,0(r4)
    state[4] = InvSbox[state[4]];
     b60:	20c00103 	ldbu	r3,4(r4)
     b64:	10c7883a 	add	r3,r2,r3
     b68:	18c00003 	ldbu	r3,0(r3)
     b6c:	20c00105 	stb	r3,4(r4)
    state[8] = InvSbox[state[8]];
     b70:	20c00203 	ldbu	r3,8(r4)
     b74:	10c7883a 	add	r3,r2,r3
     b78:	18c00003 	ldbu	r3,0(r3)
     b7c:	20c00205 	stb	r3,8(r4)
    state[12] = InvSbox[state[12]];
     b80:	20c00303 	ldbu	r3,12(r4)
     b84:	10c7883a 	add	r3,r2,r3
     b88:	18c00003 	ldbu	r3,0(r3)
     b8c:	20c00305 	stb	r3,12(r4)

    // restore row 1
    tmp = InvSbox[state[13]];
     b90:	20c00343 	ldbu	r3,13(r4)
     b94:	10c7883a 	add	r3,r2,r3
     b98:	19400003 	ldbu	r5,0(r3)
    state[13] = InvSbox[state[9]];
     b9c:	20c00243 	ldbu	r3,9(r4)
     ba0:	10c7883a 	add	r3,r2,r3
     ba4:	18c00003 	ldbu	r3,0(r3)
     ba8:	20c00345 	stb	r3,13(r4)
    state[9] = InvSbox[state[5]];
     bac:	20c00143 	ldbu	r3,5(r4)
     bb0:	10c7883a 	add	r3,r2,r3
     bb4:	18c00003 	ldbu	r3,0(r3)
     bb8:	20c00245 	stb	r3,9(r4)
    state[5] = InvSbox[state[1]];
     bbc:	20c00043 	ldbu	r3,1(r4)
     bc0:	10c7883a 	add	r3,r2,r3
     bc4:	18c00003 	ldbu	r3,0(r3)
    state[1] = tmp;
     bc8:	21400045 	stb	r5,1(r4)

    // restore row 1
    tmp = InvSbox[state[13]];
    state[13] = InvSbox[state[9]];
    state[9] = InvSbox[state[5]];
    state[5] = InvSbox[state[1]];
     bcc:	20c00145 	stb	r3,5(r4)
    state[1] = tmp;

    // restore row 2
    tmp = InvSbox[state[2]];
     bd0:	20c00083 	ldbu	r3,2(r4)
     bd4:	10c7883a 	add	r3,r2,r3
     bd8:	19400003 	ldbu	r5,0(r3)
    state[2] = InvSbox[state[10]];
     bdc:	20c00283 	ldbu	r3,10(r4)
     be0:	10c7883a 	add	r3,r2,r3
     be4:	18c00003 	ldbu	r3,0(r3)
    state[10] = tmp;
     be8:	21400285 	stb	r5,10(r4)
    state[5] = InvSbox[state[1]];
    state[1] = tmp;

    // restore row 2
    tmp = InvSbox[state[2]];
    state[2] = InvSbox[state[10]];
     bec:	20c00085 	stb	r3,2(r4)
    state[10] = tmp;
    tmp = InvSbox[state[6]];
     bf0:	20c00183 	ldbu	r3,6(r4)
     bf4:	10c7883a 	add	r3,r2,r3
     bf8:	19400003 	ldbu	r5,0(r3)
    state[6] = InvSbox[state[14]];
     bfc:	20c00383 	ldbu	r3,14(r4)
     c00:	10c7883a 	add	r3,r2,r3
     c04:	18c00003 	ldbu	r3,0(r3)
    state[14] = tmp;
     c08:	21400385 	stb	r5,14(r4)
    // restore row 2
    tmp = InvSbox[state[2]];
    state[2] = InvSbox[state[10]];
    state[10] = tmp;
    tmp = InvSbox[state[6]];
    state[6] = InvSbox[state[14]];
     c0c:	20c00185 	stb	r3,6(r4)
    state[14] = tmp;

    // restore row 3
    tmp = InvSbox[state[3]];
     c10:	20c000c3 	ldbu	r3,3(r4)
     c14:	10c7883a 	add	r3,r2,r3
     c18:	19400003 	ldbu	r5,0(r3)
    state[3] = InvSbox[state[7]];
     c1c:	20c001c3 	ldbu	r3,7(r4)
     c20:	10c7883a 	add	r3,r2,r3
     c24:	18c00003 	ldbu	r3,0(r3)
     c28:	20c000c5 	stb	r3,3(r4)
    state[7] = InvSbox[state[11]];
     c2c:	20c002c3 	ldbu	r3,11(r4)
     c30:	10c7883a 	add	r3,r2,r3
     c34:	18c00003 	ldbu	r3,0(r3)
     c38:	20c001c5 	stb	r3,7(r4)
    state[11] = InvSbox[state[15]];
     c3c:	20c003c3 	ldbu	r3,15(r4)
     c40:	10c5883a 	add	r2,r2,r3
     c44:	10800003 	ldbu	r2,0(r2)
    state[15] = tmp;
     c48:	214003c5 	stb	r5,15(r4)

    // restore row 3
    tmp = InvSbox[state[3]];
    state[3] = InvSbox[state[7]];
    state[7] = InvSbox[state[11]];
    state[11] = InvSbox[state[15]];
     c4c:	208002c5 	stb	r2,11(r4)
    state[15] = tmp;
     c50:	f800283a 	ret

00000c54 <InvMixSubColumns>:
{
    uint8 tmp[4 * Nb];
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
     c54:	22800003 	ldbu	r10,0(r4)
     c58:	22400043 	ldbu	r9,1(r4)
     c5c:	00800034 	movhi	r2,0
     c60:	01800034 	movhi	r6,0
     c64:	1092ab04 	addi	r2,r2,19116
     c68:	31932b04 	addi	r6,r6,19628
     c6c:	128b883a 	add	r5,r2,r10
     c70:	3247883a 	add	r3,r6,r9
     c74:	22000083 	ldbu	r8,2(r4)
     c78:	2ac00003 	ldbu	r11,0(r5)
     c7c:	18c00003 	ldbu	r3,0(r3)
     c80:	01400034 	movhi	r5,0
     c84:	2952eb04 	addi	r5,r5,19372
     c88:	58d6f03a 	xor	r11,r11,r3
     c8c:	2a07883a 	add	r3,r5,r8
     c90:	18c00003 	ldbu	r3,0(r3)
     c94:	21c000c3 	ldbu	r7,3(r4)
    state[15] = tmp;
}

// restore and un-mix each row in a column
void InvMixSubColumns (uint8 *state)
{
     c98:	defffc04 	addi	sp,sp,-16
    uint8 tmp[4 * Nb];
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
     c9c:	58d8f03a 	xor	r12,r11,r3
     ca0:	00c00034 	movhi	r3,0
     ca4:	18d36b04 	addi	r3,r3,19884
     ca8:	19d7883a 	add	r11,r3,r7
     cac:	5ac00003 	ldbu	r11,0(r11)
     cb0:	62d6f03a 	xor	r11,r12,r11
     cb4:	dac00005 	stb	r11,0(sp)
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
     cb8:	1a99883a 	add	r12,r3,r10
     cbc:	1257883a 	add	r11,r2,r9
     cc0:	63000003 	ldbu	r12,0(r12)
     cc4:	5ac00003 	ldbu	r11,0(r11)
     cc8:	62d6f03a 	xor	r11,r12,r11
     ccc:	3219883a 	add	r12,r6,r8
     cd0:	63000003 	ldbu	r12,0(r12)
     cd4:	5b18f03a 	xor	r12,r11,r12
     cd8:	29d7883a 	add	r11,r5,r7
     cdc:	5ac00003 	ldbu	r11,0(r11)
     ce0:	62d6f03a 	xor	r11,r12,r11
     ce4:	dac00145 	stb	r11,5(sp)
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     ce8:	2a99883a 	add	r12,r5,r10
     cec:	1a57883a 	add	r11,r3,r9
     cf0:	63000003 	ldbu	r12,0(r12)
     cf4:	5ac00003 	ldbu	r11,0(r11)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     cf8:	3295883a 	add	r10,r6,r10
     cfc:	2a53883a 	add	r9,r5,r9
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d00:	62d6f03a 	xor	r11,r12,r11
     d04:	1219883a 	add	r12,r2,r8
     d08:	63000003 	ldbu	r12,0(r12)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d0c:	52800003 	ldbu	r10,0(r10)
     d10:	4a400003 	ldbu	r9,0(r9)
     d14:	1a11883a 	add	r8,r3,r8
     d18:	42000003 	ldbu	r8,0(r8)
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d1c:	5b18f03a 	xor	r12,r11,r12
     d20:	31d7883a 	add	r11,r6,r7
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d24:	5252f03a 	xor	r9,r10,r9
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d28:	5ac00003 	ldbu	r11,0(r11)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d2c:	22800103 	ldbu	r10,4(r4)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d30:	4a10f03a 	xor	r8,r9,r8
     d34:	11cf883a 	add	r7,r2,r7

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d38:	22400143 	ldbu	r9,5(r4)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d3c:	39c00003 	ldbu	r7,0(r7)
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d40:	62d6f03a 	xor	r11,r12,r11
     d44:	dac00285 	stb	r11,10(sp)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d48:	1299883a 	add	r12,r2,r10
     d4c:	3257883a 	add	r11,r6,r9

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d50:	41cef03a 	xor	r7,r8,r7

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d54:	63000003 	ldbu	r12,0(r12)
     d58:	22000183 	ldbu	r8,6(r4)
     d5c:	5ac00003 	ldbu	r11,0(r11)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d60:	d9c003c5 	stb	r7,15(sp)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d64:	21c001c3 	ldbu	r7,7(r4)
     d68:	62d6f03a 	xor	r11,r12,r11
     d6c:	2a19883a 	add	r12,r5,r8
     d70:	63000003 	ldbu	r12,0(r12)
     d74:	5b18f03a 	xor	r12,r11,r12
     d78:	19d7883a 	add	r11,r3,r7
     d7c:	5ac00003 	ldbu	r11,0(r11)
     d80:	62d6f03a 	xor	r11,r12,r11
     d84:	dac00105 	stb	r11,4(sp)
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
     d88:	1a99883a 	add	r12,r3,r10
     d8c:	1257883a 	add	r11,r2,r9
     d90:	63000003 	ldbu	r12,0(r12)
     d94:	5ac00003 	ldbu	r11,0(r11)
     d98:	62d6f03a 	xor	r11,r12,r11
     d9c:	3219883a 	add	r12,r6,r8
     da0:	63000003 	ldbu	r12,0(r12)
     da4:	5b18f03a 	xor	r12,r11,r12
     da8:	29d7883a 	add	r11,r5,r7
     dac:	5ac00003 	ldbu	r11,0(r11)
     db0:	62d6f03a 	xor	r11,r12,r11
     db4:	dac00245 	stb	r11,9(sp)
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     db8:	2a99883a 	add	r12,r5,r10
     dbc:	1a57883a 	add	r11,r3,r9
     dc0:	63000003 	ldbu	r12,0(r12)
     dc4:	5ac00003 	ldbu	r11,0(r11)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     dc8:	3295883a 	add	r10,r6,r10
     dcc:	2a53883a 	add	r9,r5,r9
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     dd0:	62d6f03a 	xor	r11,r12,r11
     dd4:	1219883a 	add	r12,r2,r8
     dd8:	63000003 	ldbu	r12,0(r12)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     ddc:	52800003 	ldbu	r10,0(r10)
     de0:	4a400003 	ldbu	r9,0(r9)
     de4:	1a11883a 	add	r8,r3,r8
     de8:	42000003 	ldbu	r8,0(r8)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     dec:	5b18f03a 	xor	r12,r11,r12
     df0:	31d7883a 	add	r11,r6,r7
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     df4:	5252f03a 	xor	r9,r10,r9
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     df8:	5ac00003 	ldbu	r11,0(r11)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     dfc:	22800203 	ldbu	r10,8(r4)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e00:	4a10f03a 	xor	r8,r9,r8
     e04:	11cf883a 	add	r7,r2,r7

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e08:	22400243 	ldbu	r9,9(r4)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e0c:	39c00003 	ldbu	r7,0(r7)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     e10:	62d6f03a 	xor	r11,r12,r11
     e14:	dac00385 	stb	r11,14(sp)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e18:	1299883a 	add	r12,r2,r10
     e1c:	3257883a 	add	r11,r6,r9

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e20:	41cef03a 	xor	r7,r8,r7

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e24:	63000003 	ldbu	r12,0(r12)
     e28:	22000283 	ldbu	r8,10(r4)
     e2c:	5ac00003 	ldbu	r11,0(r11)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e30:	d9c000c5 	stb	r7,3(sp)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e34:	21c002c3 	ldbu	r7,11(r4)
     e38:	62d6f03a 	xor	r11,r12,r11
     e3c:	2a19883a 	add	r12,r5,r8
     e40:	63000003 	ldbu	r12,0(r12)
     e44:	5b18f03a 	xor	r12,r11,r12
     e48:	19d7883a 	add	r11,r3,r7
     e4c:	5ac00003 	ldbu	r11,0(r11)
     e50:	62d6f03a 	xor	r11,r12,r11
     e54:	dac00205 	stb	r11,8(sp)
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
     e58:	1a99883a 	add	r12,r3,r10
     e5c:	1257883a 	add	r11,r2,r9
     e60:	63000003 	ldbu	r12,0(r12)
     e64:	5ac00003 	ldbu	r11,0(r11)
     e68:	62d6f03a 	xor	r11,r12,r11
     e6c:	3219883a 	add	r12,r6,r8
     e70:	63000003 	ldbu	r12,0(r12)
     e74:	5b18f03a 	xor	r12,r11,r12
     e78:	29d7883a 	add	r11,r5,r7
     e7c:	5ac00003 	ldbu	r11,0(r11)
     e80:	62d6f03a 	xor	r11,r12,r11
     e84:	dac00345 	stb	r11,13(sp)
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     e88:	2a99883a 	add	r12,r5,r10
     e8c:	1a57883a 	add	r11,r3,r9
     e90:	63000003 	ldbu	r12,0(r12)
     e94:	5ac00003 	ldbu	r11,0(r11)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     e98:	3295883a 	add	r10,r6,r10
     e9c:	2a53883a 	add	r9,r5,r9
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     ea0:	62d6f03a 	xor	r11,r12,r11
     ea4:	1219883a 	add	r12,r2,r8
     ea8:	63000003 	ldbu	r12,0(r12)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     eac:	1a11883a 	add	r8,r3,r8
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     eb0:	5b18f03a 	xor	r12,r11,r12
     eb4:	31d7883a 	add	r11,r6,r7
     eb8:	5ac00003 	ldbu	r11,0(r11)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     ebc:	52800003 	ldbu	r10,0(r10)
     ec0:	4a400003 	ldbu	r9,0(r9)
     ec4:	42000003 	ldbu	r8,0(r8)
     ec8:	11cf883a 	add	r7,r2,r7
     ecc:	5252f03a 	xor	r9,r10,r9
     ed0:	4a10f03a 	xor	r8,r9,r8

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ed4:	22800303 	ldbu	r10,12(r4)
     ed8:	22400343 	ldbu	r9,13(r4)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     edc:	39c00003 	ldbu	r7,0(r7)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     ee0:	62d6f03a 	xor	r11,r12,r11
     ee4:	dac00085 	stb	r11,2(sp)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ee8:	1299883a 	add	r12,r2,r10
     eec:	3257883a 	add	r11,r6,r9

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     ef0:	41cef03a 	xor	r7,r8,r7

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ef4:	63000003 	ldbu	r12,0(r12)
     ef8:	22000383 	ldbu	r8,14(r4)
     efc:	5ac00003 	ldbu	r11,0(r11)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     f00:	d9c001c5 	stb	r7,7(sp)

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     f04:	21c003c3 	ldbu	r7,15(r4)
     f08:	62d6f03a 	xor	r11,r12,r11
     f0c:	2a19883a 	add	r12,r5,r8
     f10:	63000003 	ldbu	r12,0(r12)
     f14:	5b18f03a 	xor	r12,r11,r12
     f18:	19d7883a 	add	r11,r3,r7
     f1c:	5ac00003 	ldbu	r11,0(r11)
     f20:	62d6f03a 	xor	r11,r12,r11
     f24:	dac00305 	stb	r11,12(sp)
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
     f28:	1a99883a 	add	r12,r3,r10
     f2c:	1257883a 	add	r11,r2,r9
     f30:	63000003 	ldbu	r12,0(r12)
     f34:	5ac00003 	ldbu	r11,0(r11)
     f38:	62d6f03a 	xor	r11,r12,r11
     f3c:	3219883a 	add	r12,r6,r8
     f40:	63000003 	ldbu	r12,0(r12)
     f44:	5b18f03a 	xor	r12,r11,r12
     f48:	29d7883a 	add	r11,r5,r7
     f4c:	5ac00003 	ldbu	r11,0(r11)
     f50:	62d6f03a 	xor	r11,r12,r11
     f54:	dac00045 	stb	r11,1(sp)
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f58:	2a99883a 	add	r12,r5,r10
     f5c:	1a57883a 	add	r11,r3,r9
     f60:	63000003 	ldbu	r12,0(r12)
     f64:	5ac00003 	ldbu	r11,0(r11)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f68:	2a4b883a 	add	r5,r5,r9
     f6c:	29400003 	ldbu	r5,0(r5)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f70:	62d6f03a 	xor	r11,r12,r11
     f74:	1219883a 	add	r12,r2,r8
     f78:	63000003 	ldbu	r12,0(r12)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f7c:	1a07883a 	add	r3,r3,r8
     f80:	11c5883a 	add	r2,r2,r7
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f84:	5b18f03a 	xor	r12,r11,r12
     f88:	31d7883a 	add	r11,r6,r7
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f8c:	328d883a 	add	r6,r6,r10
     f90:	31800003 	ldbu	r6,0(r6)
     f94:	18c00003 	ldbu	r3,0(r3)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f98:	5ac00003 	ldbu	r11,0(r11)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f9c:	10800003 	ldbu	r2,0(r2)
     fa0:	314af03a 	xor	r5,r6,r5
     fa4:	28c6f03a 	xor	r3,r5,r3
     fa8:	1884f03a 	xor	r2,r3,r2
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     fac:	62d6f03a 	xor	r11,r12,r11
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
        state[i] = InvSbox[tmp[i]];
     fb0:	01c00034 	movhi	r7,0

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     fb4:	d88002c5 	stb	r2,11(sp)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     fb8:	dac00185 	stb	r11,6(sp)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fbc:	0005883a 	mov	r2,zero
        state[i] = InvSbox[tmp[i]];
     fc0:	39d82b04 	addi	r7,r7,24748
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fc4:	01400404 	movi	r5,16
        state[i] = InvSbox[tmp[i]];
     fc8:	d887883a 	add	r3,sp,r2
     fcc:	18c00003 	ldbu	r3,0(r3)
     fd0:	38c7883a 	add	r3,r7,r3
     fd4:	19800003 	ldbu	r6,0(r3)
     fd8:	2087883a 	add	r3,r4,r2
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fdc:	10800044 	addi	r2,r2,1
        state[i] = InvSbox[tmp[i]];
     fe0:	19800005 	stb	r6,0(r3)
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fe4:	117ff81e 	bne	r2,r5,fc8 <__alt_mem_epcs+0xfffdffc8>
        state[i] = InvSbox[tmp[i]];
}
     fe8:	dec00404 	addi	sp,sp,16
     fec:	f800283a 	ret

00000ff0 <Decrypt>:


//-------------------------------------------------------------------------------------
// Decryption routines for correctness testing
void Decrypt (uint8 *in, uint8 *expkey, uint8 *out)
{
     ff0:	defffb04 	addi	sp,sp,-20
     ff4:	dc800215 	stw	r18,8(sp)
     ff8:	dc400115 	stw	r17,4(sp)
     ffc:	dfc00415 	stw	ra,16(sp)
    1000:	dcc00315 	stw	r19,12(sp)
    1004:	dc000015 	stw	r16,0(sp)
    1008:	2825883a 	mov	r18,r5
    100c:	3023883a 	mov	r17,r6
    1010:	3005883a 	mov	r2,r6
    1014:	20c00404 	addi	r3,r4,16
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];
    1018:	21400003 	ldbu	r5,0(r4)
    101c:	21000044 	addi	r4,r4,1
    1020:	10800044 	addi	r2,r2,1
    1024:	117fffc5 	stb	r5,-1(r2)
void Decrypt (uint8 *in, uint8 *expkey, uint8 *out)
{
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
    1028:	20fffb1e 	bne	r4,r3,1018 <__alt_mem_epcs+0xfffe0018>
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey + Nr * Nb);
    102c:	91402804 	addi	r5,r18,160
    1030:	8809883a 	mov	r4,r17
    1034:	00006700 	call	670 <AddRoundKey>
    InvShiftRows(out);
    1038:	8809883a 	mov	r4,r17
    103c:	0000b480 	call	b48 <InvShiftRows>

    for( round = Nr; round--; )
    1040:	04000284 	movi	r16,10
    1044:	04ffffc4 	movi	r19,-1
    1048:	843fffc4 	addi	r16,r16,-1
    104c:	84c00826 	beq	r16,r19,1070 <Decrypt+0x80>
    {
        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    1050:	800a913a 	slli	r5,r16,4
    1054:	8809883a 	mov	r4,r17
    1058:	914b883a 	add	r5,r18,r5
    105c:	00006700 	call	670 <AddRoundKey>
        if( round )
    1060:	803ff926 	beq	r16,zero,1048 <__alt_mem_epcs+0xfffe0048>
            InvMixSubColumns (out);
    1064:	8809883a 	mov	r4,r17
    1068:	0000c540 	call	c54 <InvMixSubColumns>
    106c:	003ff606 	br	1048 <__alt_mem_epcs+0xfffe0048>
    }
}
    1070:	dfc00417 	ldw	ra,16(sp)
    1074:	dcc00317 	ldw	r19,12(sp)
    1078:	dc800217 	ldw	r18,8(sp)
    107c:	dc400117 	ldw	r17,4(sp)
    1080:	dc000017 	ldw	r16,0(sp)
    1084:	dec00504 	addi	sp,sp,20
    1088:	f800283a 	ret

0000108c <main>:
#define BLOCK_SZ (128 / 8)
#define BUF_SZ 64
#define TEXT_DELAY_MS 80

int main(int argc, char *argv[])
{
    108c:	deffab04 	addi	sp,sp,-340

	int i, j;
    uint8 outputdata[BLOCK_SZ];
    uint8 decodedata[BLOCK_SZ];
    uint8 keyexp[aes_keyexpsize128];
    char buf[BUF_SZ] = {0};
    1090:	d9002e04 	addi	r4,sp,184
    1094:	01801004 	movi	r6,64
    1098:	000b883a 	mov	r5,zero
#define BLOCK_SZ (128 / 8)
#define BUF_SZ 64
#define TEXT_DELAY_MS 80

int main(int argc, char *argv[])
{
    109c:	dfc05415 	stw	ra,336(sp)
    10a0:	dc404f15 	stw	r17,316(sp)
    10a4:	dc004e15 	stw	r16,312(sp)
    10a8:	dd405315 	stw	r21,332(sp)
    10ac:	dd005215 	stw	r20,328(sp)
    10b0:	dcc05115 	stw	r19,324(sp)
    10b4:	dc805015 	stw	r18,320(sp)

	int i, j;
    uint8 outputdata[BLOCK_SZ];
    uint8 decodedata[BLOCK_SZ];
    uint8 keyexp[aes_keyexpsize128];
    char buf[BUF_SZ] = {0};
    10b8:	00036c80 	call	36c8 <memset>

    // Init the input and key to a known test vector (See FIPS197, Appendix B)
    // Warning: The SWacc version only works if its arguments are aligned
    // to word-boundaries. That should be the case by default, but be wary
    // if you add declarations in main()
    uint8 key[BLOCK_SZ] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};
    10bc:	01400034 	movhi	r5,0
    10c0:	d9004204 	addi	r4,sp,264
    10c4:	01800404 	movi	r6,16
    10c8:	29526204 	addi	r5,r5,18824
    10cc:	00036a00 	call	36a0 <memcpy>
    uint8 inputdata[BLOCK_SZ] = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22};
    10d0:	dc403e04 	addi	r17,sp,248
    10d4:	01400034 	movhi	r5,0
    10d8:	01800404 	movi	r6,16
    10dc:	29526604 	addi	r5,r5,18840
    10e0:	8809883a 	mov	r4,r17
    10e4:	00036a00 	call	36a0 <memcpy>

    // Reset the performance counter
    PERF_RESET (PERF_UNIT_BASE);
    10e8:	040000b4 	movhi	r16,2
    10ec:	84081804 	addi	r16,r16,8288
    10f0:	00800044 	movi	r2,1
    10f4:	80800035 	stwio	r2,0(r16)
	// Get the baseline target:
	{
    	printf("Starting Baseline (SWacc) Measurement\n");
    10f8:	01000034 	movhi	r4,0
    10fc:	21122004 	addi	r4,r4,18560
        // Start the performance counter
        PERF_START_MEASURING (PERF_UNIT_BASE);
    1100:	048000b4 	movhi	r18,2

    // Reset the performance counter
    PERF_RESET (PERF_UNIT_BASE);
	// Get the baseline target:
	{
    	printf("Starting Baseline (SWacc) Measurement\n");
    1104:	00037f00 	call	37f0 <puts>
        // Start the performance counter
        PERF_START_MEASURING (PERF_UNIT_BASE);
    1108:	94881904 	addi	r18,r18,8292
    110c:	90000035 	stwio	zero,0(r18)

        aes_keyexpand128(key, keyexp);
    1110:	d9400204 	addi	r5,sp,8
    1114:	d9004204 	addi	r4,sp,264
    1118:	00000580 	call	58 <aes_keyexpand128>
    111c:	04c04004 	movi	r19,256

        for(i = 0; i < INPUT_LENGTH; i++)
        {
            aes_blockenc_SWacc(inputdata, outputdata, keyexp);
    1120:	dd004a04 	addi	r20,sp,296
    1124:	d9800204 	addi	r6,sp,8
    1128:	a00b883a 	mov	r5,r20
    112c:	8809883a 	mov	r4,r17
    1130:	9cffffc4 	addi	r19,r19,-1
    1134:	000039c0 	call	39c <aes_blockenc_SWacc>
        // Start the performance counter
        PERF_START_MEASURING (PERF_UNIT_BASE);

        aes_keyexpand128(key, keyexp);

        for(i = 0; i < INPUT_LENGTH; i++)
    1138:	983ffa1e 	bne	r19,zero,1124 <__alt_mem_epcs+0xfffe0124>
        {
            aes_blockenc_SWacc(inputdata, outputdata, keyexp);
        }

        // Stop the performance counter
        PERF_STOP_MEASURING (PERF_UNIT_BASE);
    113c:	80000035 	stwio	zero,0(r16)

        // Show the performance data
        tick_count_baseline = perf_get_section_time(PERF_UNIT_BASE, 0);
    1140:	010000b4 	movhi	r4,2
    1144:	000b883a 	mov	r5,zero
    1148:	21081804 	addi	r4,r4,8288
    114c:	000481c0 	call	481c <perf_get_section_time>
        printf("\t-> operation took %llu cycles\n", tick_count_baseline);
    1150:	01000034 	movhi	r4,0
    1154:	100b883a 	mov	r5,r2
    1158:	180d883a 	mov	r6,r3
    115c:	21122a04 	addi	r4,r4,18600

        // Stop the performance counter
        PERF_STOP_MEASURING (PERF_UNIT_BASE);

        // Show the performance data
        tick_count_baseline = perf_get_section_time(PERF_UNIT_BASE, 0);
    1160:	1027883a 	mov	r19,r2
        printf("\t-> operation took %llu cycles\n", tick_count_baseline);
	}

    // Reset the performance counter
    PERF_RESET (PERF_UNIT_BASE);
    1164:	05400044 	movi	r21,1
        // Stop the performance counter
        PERF_STOP_MEASURING (PERF_UNIT_BASE);

        // Show the performance data
        tick_count_baseline = perf_get_section_time(PERF_UNIT_BASE, 0);
        printf("\t-> operation took %llu cycles\n", tick_count_baseline);
    1168:	00037240 	call	3724 <printf>
	}

    // Reset the performance counter
    PERF_RESET (PERF_UNIT_BASE);
    116c:	85400035 	stwio	r21,0(r16)
	// Do the student version:
	{
		printf("Starting HWacc Measurement\n");
    1170:	01000034 	movhi	r4,0
    1174:	21123204 	addi	r4,r4,18632
    1178:	00037f00 	call	37f0 <puts>
		// Start the performance counter
		PERF_START_MEASURING (PERF_UNIT_BASE);
    117c:	90000035 	stwio	zero,0(r18)

		alt_dcache_flush_all();
    1180:	00047240 	call	4724 <alt_dcache_flush_all>
		IOWR(AES_ACCELERATOR_0_BASE,3,0);	//stop accelerator
    1184:	008000b4 	movhi	r2,2
    1188:	10882304 	addi	r2,r2,8332
    118c:	10000035 	stwio	zero,0(r2)
		IOWR(AES_ACCELERATOR_0_BASE,2,INPUT_LENGTH);
    1190:	00c000b4 	movhi	r3,2
    1194:	18c82204 	addi	r3,r3,8328
    1198:	01004004 	movi	r4,256
    119c:	19000035 	stwio	r4,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,0,inputdata);
    11a0:	00c000b4 	movhi	r3,2
    11a4:	18c82004 	addi	r3,r3,8320
    11a8:	1c400035 	stwio	r17,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,1,outputdata);
    11ac:	00c000b4 	movhi	r3,2
    11b0:	18c82104 	addi	r3,r3,8324
    11b4:	1d000035 	stwio	r20,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,4,*(uint32 *)(key));
    11b8:	d9004217 	ldw	r4,264(sp)
    11bc:	00c000b4 	movhi	r3,2
    11c0:	18c82404 	addi	r3,r3,8336
    11c4:	19000035 	stwio	r4,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
    11c8:	d9004317 	ldw	r4,268(sp)
    11cc:	00c000b4 	movhi	r3,2
    11d0:	18c82504 	addi	r3,r3,8340
    11d4:	19000035 	stwio	r4,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
    11d8:	d9004417 	ldw	r4,272(sp)
    11dc:	00c000b4 	movhi	r3,2
    11e0:	18c82604 	addi	r3,r3,8344
    11e4:	19000035 	stwio	r4,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
    11e8:	d9004517 	ldw	r4,276(sp)
    11ec:	00c000b4 	movhi	r3,2
    11f0:	18c82704 	addi	r3,r3,8348
    11f4:	19000035 	stwio	r4,0(r3)
		IOWR(AES_ACCELERATOR_0_BASE,3,1);	//start accelerator
    11f8:	15400035 	stwio	r21,0(r2)

		while (done == 0) {
			done = IORD(AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
    11fc:	10c00037 	ldwio	r3,0(r2)
		IOWR(AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
		IOWR(AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
		IOWR(AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
		IOWR(AES_ACCELERATOR_0_BASE,3,1);	//start accelerator

		while (done == 0) {
    1200:	183ffe26 	beq	r3,zero,11fc <__alt_mem_epcs+0xfffe01fc>
			done = IORD(AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
		}

		// Stop the performance counter
		PERF_STOP_MEASURING (PERF_UNIT_BASE);
    1204:	80000035 	stwio	zero,0(r16)

		printf("Key %x %x %x %x\n", *(uint32 *)(key),*(uint32 *)(key+4),*(uint32 *)(key+8),*(uint32 *)(key+12));
    1208:	d8804517 	ldw	r2,276(sp)
    120c:	d9c04417 	ldw	r7,272(sp)
    1210:	d9804317 	ldw	r6,268(sp)
    1214:	d9404217 	ldw	r5,264(sp)
    1218:	01000034 	movhi	r4,0
    121c:	21123904 	addi	r4,r4,18660
    1220:	d8800015 	stw	r2,0(sp)
    1224:	00037240 	call	3724 <printf>
		printf("Input %x %x %x %x\n", *(uint32 *)(inputdata),*(uint32 *)(inputdata+4),*(uint32 *)(inputdata+8),*(uint32 *)(inputdata+12));
    1228:	d8804117 	ldw	r2,260(sp)
    122c:	d9c04017 	ldw	r7,256(sp)
    1230:	d9803f17 	ldw	r6,252(sp)
    1234:	d9403e17 	ldw	r5,248(sp)
    1238:	01000034 	movhi	r4,0
    123c:	21123e04 	addi	r4,r4,18680
    1240:	d8800015 	stw	r2,0(sp)
    1244:	00037240 	call	3724 <printf>
		printf("Output %x %x %x %x\n", *(uint32 *)(outputdata),*(uint32 *)(outputdata+4),*(uint32 *)(outputdata+8),*(uint32 *)(outputdata+12));
    1248:	d8804d17 	ldw	r2,308(sp)
    124c:	d9c04c17 	ldw	r7,304(sp)
    1250:	d9804b17 	ldw	r6,300(sp)
    1254:	d9404a17 	ldw	r5,296(sp)
    1258:	01000034 	movhi	r4,0
    125c:	21124304 	addi	r4,r4,18700
    1260:	d8800015 	stw	r2,0(sp)
    1264:	00037240 	call	3724 <printf>

		// Show the performance data
		tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    1268:	010000b4 	movhi	r4,2
    126c:	000b883a 	mov	r5,zero
    1270:	21081804 	addi	r4,r4,8288
    1274:	000481c0 	call	481c <perf_get_section_time>
		printf("\t-> operation took %llu cycles\n", tick_count);
    1278:	01000034 	movhi	r4,0
    127c:	180d883a 	mov	r6,r3
    1280:	100b883a 	mov	r5,r2
    1284:	21122a04 	addi	r4,r4,18600
		printf("Key %x %x %x %x\n", *(uint32 *)(key),*(uint32 *)(key+4),*(uint32 *)(key+8),*(uint32 *)(key+12));
		printf("Input %x %x %x %x\n", *(uint32 *)(inputdata),*(uint32 *)(inputdata+4),*(uint32 *)(inputdata+8),*(uint32 *)(inputdata+12));
		printf("Output %x %x %x %x\n", *(uint32 *)(outputdata),*(uint32 *)(outputdata+4),*(uint32 *)(outputdata+8),*(uint32 *)(outputdata+12));

		// Show the performance data
		tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    1288:	1025883a 	mov	r18,r2
		printf("\t-> operation took %llu cycles\n", tick_count);
    128c:	00037240 	call	3724 <printf>
	}


    // Test correctness of a block
    Decrypt(outputdata, keyexp, decodedata);  // decrypt
    1290:	a009883a 	mov	r4,r20
    1294:	d9804604 	addi	r6,sp,280
    1298:	d9400204 	addi	r5,sp,8
    129c:	0000ff00 	call	ff0 <Decrypt>
    j = 0;
    12a0:	0007883a 	mov	r3,zero
    for(i = 0; i < 16; i++)
    12a4:	0021883a 	mov	r16,zero
    12a8:	05000404 	movi	r20,16
    {
        if(inputdata[i] != decodedata[i])
    12ac:	8c05883a 	add	r2,r17,r16
    12b0:	d9004604 	addi	r4,sp,280
    12b4:	11800003 	ldbu	r6,0(r2)
    12b8:	2405883a 	add	r2,r4,r16
    12bc:	11c00003 	ldbu	r7,0(r2)
    12c0:	31c00526 	beq	r6,r7,12d8 <main+0x24c>
        {
            printf("Data error at index %i, in = 0x%X, dec = 0x%X\n", i,
    12c4:	01000034 	movhi	r4,0
    12c8:	800b883a 	mov	r5,r16
    12cc:	21124804 	addi	r4,r4,18720
    12d0:	00037240 	call	3724 <printf>
                    inputdata[i], decodedata[i]);
            j = 1;
    12d4:	00c00044 	movi	r3,1


    // Test correctness of a block
    Decrypt(outputdata, keyexp, decodedata);  // decrypt
    j = 0;
    for(i = 0; i < 16; i++)
    12d8:	84000044 	addi	r16,r16,1
    12dc:	853ff31e 	bne	r16,r20,12ac <__alt_mem_epcs+0xfffe02ac>
        }
    }


    // If there's not enough code space, comment from here ...
    if(j == 0){
    12e0:	18002c1e 	bne	r3,zero,1394 <main+0x308>
        printf("Correct!\n");
    12e4:	01000034 	movhi	r4,0
    12e8:	21125404 	addi	r4,r4,18768
    12ec:	00037f00 	call	37f0 <puts>

    	// init the global timer
    	timer_start_global();
    12f0:	00014880 	call	1488 <timer_start_global>

        unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
        unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
        float speedup = ((float)t1) / ((float)t2);
    12f4:	9809883a 	mov	r4,r19
    12f8:	00022240 	call	2224 <__floatunsisf>
    12fc:	9009883a 	mov	r4,r18
    1300:	1021883a 	mov	r16,r2
    1304:	00022240 	call	2224 <__floatunsisf>
    1308:	100b883a 	mov	r5,r2
    130c:	8009883a 	mov	r4,r16
    1310:	00017d40 	call	17d4 <__divsf3>
        unsigned long whole = (unsigned long)speedup;
    1314:	1009883a 	mov	r4,r2
    	// init the global timer
    	timer_start_global();

        unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
        unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
        float speedup = ((float)t1) / ((float)t2);
    1318:	1023883a 	mov	r17,r2
        unsigned long whole = (unsigned long)speedup;
    131c:	000154c0 	call	154c <__fixunssfsi>
        unsigned long mantissa2 = (speedup * 100.0) - (whole * 100);

        snprintf(buf, BUF_SZ, "%lu cycles -> %lu.%.2lux faster", t2, whole, mantissa2);
    1320:	8809883a 	mov	r4,r17
    	timer_start_global();

        unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
        unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
        float speedup = ((float)t1) / ((float)t2);
        unsigned long whole = (unsigned long)speedup;
    1324:	1021883a 	mov	r16,r2
        unsigned long mantissa2 = (speedup * 100.0) - (whole * 100);

        snprintf(buf, BUF_SZ, "%lu cycles -> %lu.%.2lux faster", t2, whole, mantissa2);
    1328:	000352c0 	call	352c <__extendsfdf2>
    132c:	000d883a 	mov	r6,zero
    1330:	01d01674 	movhi	r7,16473
    1334:	180b883a 	mov	r5,r3
    1338:	1009883a 	mov	r4,r2
    133c:	00023f00 	call	23f0 <__muldf3>
    1340:	81001924 	muli	r4,r16,100
    1344:	1027883a 	mov	r19,r2
    1348:	1823883a 	mov	r17,r3
    134c:	00034840 	call	3484 <__floatunsidf>
    1350:	100d883a 	mov	r6,r2
    1354:	180f883a 	mov	r7,r3
    1358:	9809883a 	mov	r4,r19
    135c:	880b883a 	mov	r5,r17
    1360:	0002b080 	call	2b08 <__subdf3>
    1364:	180b883a 	mov	r5,r3
    1368:	1009883a 	mov	r4,r2
    136c:	00015ac0 	call	15ac <__fixunsdfsi>
    1370:	01800034 	movhi	r6,0
    1374:	d8800115 	stw	r2,4(sp)
    1378:	dc000015 	stw	r16,0(sp)
    137c:	900f883a 	mov	r7,r18
    1380:	31925704 	addi	r6,r6,18780
    1384:	01401004 	movi	r5,64
    1388:	d9002e04 	addi	r4,sp,184
    138c:	00038b40 	call	38b4 <snprintf>
    1390:	00000406 	br	13a4 <main+0x318>
    }

    else{
    	snprintf(buf, BUF_SZ, "%s", "Data error!");
    1394:	01400034 	movhi	r5,0
    1398:	29525f04 	addi	r5,r5,18812
    139c:	d9002e04 	addi	r4,sp,184
    13a0:	000396c0 	call	396c <strcpy>
    }
    return 0;
}
    13a4:	0005883a 	mov	r2,zero
    13a8:	dfc05417 	ldw	ra,336(sp)
    13ac:	dd405317 	ldw	r21,332(sp)
    13b0:	dd005217 	ldw	r20,328(sp)
    13b4:	dcc05117 	ldw	r19,324(sp)
    13b8:	dc805017 	ldw	r18,320(sp)
    13bc:	dc404f17 	ldw	r17,316(sp)
    13c0:	dc004e17 	ldw	r16,312(sp)
    13c4:	dec05504 	addi	sp,sp,340
    13c8:	f800283a 	ret

000013cc <__timer_reset>:
#define TIMER_GLOBAL_BASE TIMER_1_BASE
#define TIMER_GLOBAL_FREQ TIMER_1_FREQ

// internal functions
void __timer_reset(int base) {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    13cc:	00800204 	movi	r2,8
    13d0:	20800135 	stwio	r2,4(r4)
			ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
	IOWR_ALTERA_AVALON_TIMER_STATUS(base, 0);
    13d4:	20000035 	stwio	zero,0(r4)
    13d8:	f800283a 	ret

000013dc <__timer_elapsed>:
}
int __timer_elapsed(int base, int freq) {
    13dc:	defffe04 	addi	sp,sp,-8
    13e0:	2007883a 	mov	r3,r4
    13e4:	2809883a 	mov	r4,r5
    13e8:	dfc00115 	stw	ra,4(sp)
    13ec:	dc000015 	stw	r16,0(sp)
	// read the period
	unsigned int period = IORD_ALTERA_AVALON_TIMER_PERIODH(base)<<16;
    13f0:	18800337 	ldwio	r2,12(r3)
    13f4:	1004943a 	slli	r2,r2,16
	period |= IORD_ALTERA_AVALON_TIMER_PERIODL(base);
    13f8:	19800237 	ldwio	r6,8(r3)
	// take a snapshot
	IOWR_ALTERA_AVALON_TIMER_SNAPL(base, 0);
    13fc:	19400404 	addi	r5,r3,16
    1400:	28000035 	stwio	zero,0(r5)
	// read it
	unsigned int snap = IORD_ALTERA_AVALON_TIMER_SNAPH(base)<<16;
    1404:	18c00537 	ldwio	r3,20(r3)
    1408:	1806943a 	slli	r3,r3,16
	snap |= IORD_ALTERA_AVALON_TIMER_SNAPL(base);
    140c:	2c000037 	ldwio	r16,0(r5)
	return (period-snap)/(freq/1000);
    1410:	0140fa04 	movi	r5,1000
    1414:	3084b03a 	or	r2,r6,r2
    1418:	80e0b03a 	or	r16,r16,r3
    141c:	1421c83a 	sub	r16,r2,r16
    1420:	00016200 	call	1620 <__divsi3>
    1424:	100b883a 	mov	r5,r2
    1428:	8009883a 	mov	r4,r16
    142c:	00017180 	call	1718 <__udivsi3>
}
    1430:	dfc00117 	ldw	ra,4(sp)
    1434:	dc000017 	ldw	r16,0(sp)
    1438:	dec00204 	addi	sp,sp,8
    143c:	f800283a 	ret

00001440 <__timer_start>:
void __timer_start(int base, unsigned int period) {
    1440:	defffd04 	addi	sp,sp,-12
    1444:	dc400115 	stw	r17,4(sp)
    1448:	dc000015 	stw	r16,0(sp)
    144c:	dfc00215 	stw	ra,8(sp)
    1450:	2821883a 	mov	r16,r5
    1454:	2023883a 	mov	r17,r4
	__timer_reset(base);
    1458:	00013cc0 	call	13cc <__timer_reset>
	IOWR_ALTERA_AVALON_TIMER_PERIODL(base, period & 0xFFFF);
    145c:	80bfffcc 	andi	r2,r16,65535
    1460:	88800235 	stwio	r2,8(r17)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(base, period >> 16);
    1464:	8020d43a 	srli	r16,r16,16
    1468:	8c000335 	stwio	r16,12(r17)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    146c:	00800104 	movi	r2,4
    1470:	88800135 	stwio	r2,4(r17)
			ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}
    1474:	dfc00217 	ldw	ra,8(sp)
    1478:	dc400117 	ldw	r17,4(sp)
    147c:	dc000017 	ldw	r16,0(sp)
    1480:	dec00304 	addi	sp,sp,12
    1484:	f800283a 	ret

00001488 <timer_start_global>:

/**
 * Start the global timer (max period).
 */
void timer_start_global() {
	__timer_start(TIMER_GLOBAL_BASE, 0xFFFFFFFF);
    1488:	010000b4 	movhi	r4,2
    148c:	017fffc4 	movi	r5,-1
    1490:	21080804 	addi	r4,r4,8224
    1494:	00014401 	jmpi	1440 <__timer_start>

00001498 <timer_elapsed_global>:

/**
 * Returns the time elapsed since the global timer was initialized in ms.
 */
int timer_elapsed_global() {
	return __timer_elapsed(TIMER_GLOBAL_BASE, TIMER_GLOBAL_FREQ);
    1498:	0140bef4 	movhi	r5,763
    149c:	010000b4 	movhi	r4,2
    14a0:	297c2004 	addi	r5,r5,-3968
    14a4:	21080804 	addi	r4,r4,8224
    14a8:	00013dc1 	jmpi	13dc <__timer_elapsed>

000014ac <timer_reset>:
#define TIMER_GLOBAL_BASE TIMER_1_BASE
#define TIMER_GLOBAL_FREQ TIMER_1_FREQ

// internal functions
void __timer_reset(int base) {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    14ac:	008000b4 	movhi	r2,2
    14b0:	10881104 	addi	r2,r2,8260
    14b4:	00c00204 	movi	r3,8
    14b8:	10c00035 	stwio	r3,0(r2)
			ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
	IOWR_ALTERA_AVALON_TIMER_STATUS(base, 0);
    14bc:	008000b4 	movhi	r2,2
    14c0:	10881004 	addi	r2,r2,8256
    14c4:	10000035 	stwio	zero,0(r2)
    14c8:	f800283a 	ret

000014cc <timer_start>:
/**
 * initializes the user timer to run for "ms" ms.
 */
void timer_start(int ms) {
	unsigned int period = (TIMER_USER_FREQ / 1000) * ms - 1;
	__timer_start(TIMER_USER_BASE, period);
    14cc:	0170d414 	movui	r5,50000
    14d0:	214b383a 	mul	r5,r4,r5
    14d4:	010000b4 	movhi	r4,2
    14d8:	21081004 	addi	r4,r4,8256
    14dc:	297fffc4 	addi	r5,r5,-1
    14e0:	00014401 	jmpi	1440 <__timer_start>

000014e4 <timer_read_to>:
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    14e4:	008000b4 	movhi	r2,2
    14e8:	10881004 	addi	r2,r2,8256
    14ec:	10800037 	ldwio	r2,0(r2)
}
    14f0:	1080004c 	andi	r2,r2,1
    14f4:	f800283a 	ret

000014f8 <timer_wait>:

/**
 * Wait for "ms" ms.
 */
void timer_wait(int ms) {
    14f8:	deffff04 	addi	sp,sp,-4
    14fc:	dfc00015 	stw	ra,0(sp)
	timer_start(ms);
    1500:	00014cc0 	call	14cc <timer_start>
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    1504:	00c000b4 	movhi	r3,2
    1508:	18c81004 	addi	r3,r3,8256
    150c:	18800037 	ldwio	r2,0(r3)
/**
 * Wait for "ms" ms.
 */
void timer_wait(int ms) {
	timer_start(ms);
	while(timer_read_to()==0);
    1510:	1080004c 	andi	r2,r2,1
    1514:	103ffd26 	beq	r2,zero,150c <__alt_mem_epcs+0xfffe050c>
}
    1518:	dfc00017 	ldw	ra,0(sp)
    151c:	dec00104 	addi	sp,sp,4
    1520:	f800283a 	ret

00001524 <timer_wait_for_to>:
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    1524:	00c000b4 	movhi	r3,2
    1528:	18c81004 	addi	r3,r3,8256
    152c:	18800037 	ldwio	r2,0(r3)

/**
 * Wait for the timer to time-out.
 */
void timer_wait_for_to() {
	while(timer_read_to()==0);
    1530:	1080004c 	andi	r2,r2,1
    1534:	103ffd26 	beq	r2,zero,152c <__alt_mem_epcs+0xfffe052c>
}
    1538:	f800283a 	ret

0000153c <timer_elapsed>:

/**
 * Reads the elapsed time in ms since the timer was started.
 */
int timer_elapsed() {
	return __timer_elapsed(TIMER_USER_BASE, TIMER_USER_BASE);
    153c:	014000b4 	movhi	r5,2
    1540:	29481004 	addi	r5,r5,8256
    1544:	2809883a 	mov	r4,r5
    1548:	00013dc1 	jmpi	13dc <__timer_elapsed>

0000154c <__fixunssfsi>:
    154c:	defffd04 	addi	sp,sp,-12
    1550:	dc000015 	stw	r16,0(sp)
    1554:	0413c034 	movhi	r16,20224
    1558:	800b883a 	mov	r5,r16
    155c:	dc400115 	stw	r17,4(sp)
    1560:	dfc00215 	stw	ra,8(sp)
    1564:	2023883a 	mov	r17,r4
    1568:	0001c140 	call	1c14 <__gesf2>
    156c:	1000070e 	bge	r2,zero,158c <__fixunssfsi+0x40>
    1570:	8809883a 	mov	r4,r17
    1574:	00021b40 	call	21b4 <__fixsfsi>
    1578:	dfc00217 	ldw	ra,8(sp)
    157c:	dc400117 	ldw	r17,4(sp)
    1580:	dc000017 	ldw	r16,0(sp)
    1584:	dec00304 	addi	sp,sp,12
    1588:	f800283a 	ret
    158c:	800b883a 	mov	r5,r16
    1590:	8809883a 	mov	r4,r17
    1594:	0001cd00 	call	1cd0 <__subsf3>
    1598:	1009883a 	mov	r4,r2
    159c:	00021b40 	call	21b4 <__fixsfsi>
    15a0:	00e00034 	movhi	r3,32768
    15a4:	10c5883a 	add	r2,r2,r3
    15a8:	003ff306 	br	1578 <__alt_mem_epcs+0xfffe0578>

000015ac <__fixunsdfsi>:
    15ac:	defffd04 	addi	sp,sp,-12
    15b0:	000d883a 	mov	r6,zero
    15b4:	01d07834 	movhi	r7,16864
    15b8:	dc400115 	stw	r17,4(sp)
    15bc:	dc000015 	stw	r16,0(sp)
    15c0:	dfc00215 	stw	ra,8(sp)
    15c4:	2023883a 	mov	r17,r4
    15c8:	2821883a 	mov	r16,r5
    15cc:	00023140 	call	2314 <__gedf2>
    15d0:	1000080e 	bge	r2,zero,15f4 <__fixunsdfsi+0x48>
    15d4:	8809883a 	mov	r4,r17
    15d8:	800b883a 	mov	r5,r16
    15dc:	00034040 	call	3404 <__fixdfsi>
    15e0:	dfc00217 	ldw	ra,8(sp)
    15e4:	dc400117 	ldw	r17,4(sp)
    15e8:	dc000017 	ldw	r16,0(sp)
    15ec:	dec00304 	addi	sp,sp,12
    15f0:	f800283a 	ret
    15f4:	000d883a 	mov	r6,zero
    15f8:	01d07834 	movhi	r7,16864
    15fc:	8809883a 	mov	r4,r17
    1600:	800b883a 	mov	r5,r16
    1604:	0002b080 	call	2b08 <__subdf3>
    1608:	180b883a 	mov	r5,r3
    160c:	1009883a 	mov	r4,r2
    1610:	00034040 	call	3404 <__fixdfsi>
    1614:	00e00034 	movhi	r3,32768
    1618:	10c5883a 	add	r2,r2,r3
    161c:	003ff006 	br	15e0 <__alt_mem_epcs+0xfffe05e0>

00001620 <__divsi3>:
    1620:	20001b16 	blt	r4,zero,1690 <__divsi3+0x70>
    1624:	000f883a 	mov	r7,zero
    1628:	28001616 	blt	r5,zero,1684 <__divsi3+0x64>
    162c:	200d883a 	mov	r6,r4
    1630:	29001a2e 	bgeu	r5,r4,169c <__divsi3+0x7c>
    1634:	00800804 	movi	r2,32
    1638:	00c00044 	movi	r3,1
    163c:	00000106 	br	1644 <__divsi3+0x24>
    1640:	10000d26 	beq	r2,zero,1678 <__divsi3+0x58>
    1644:	294b883a 	add	r5,r5,r5
    1648:	10bfffc4 	addi	r2,r2,-1
    164c:	18c7883a 	add	r3,r3,r3
    1650:	293ffb36 	bltu	r5,r4,1640 <__alt_mem_epcs+0xfffe0640>
    1654:	0005883a 	mov	r2,zero
    1658:	18000726 	beq	r3,zero,1678 <__divsi3+0x58>
    165c:	0005883a 	mov	r2,zero
    1660:	31400236 	bltu	r6,r5,166c <__divsi3+0x4c>
    1664:	314dc83a 	sub	r6,r6,r5
    1668:	10c4b03a 	or	r2,r2,r3
    166c:	1806d07a 	srli	r3,r3,1
    1670:	280ad07a 	srli	r5,r5,1
    1674:	183ffa1e 	bne	r3,zero,1660 <__alt_mem_epcs+0xfffe0660>
    1678:	38000126 	beq	r7,zero,1680 <__divsi3+0x60>
    167c:	0085c83a 	sub	r2,zero,r2
    1680:	f800283a 	ret
    1684:	014bc83a 	sub	r5,zero,r5
    1688:	39c0005c 	xori	r7,r7,1
    168c:	003fe706 	br	162c <__alt_mem_epcs+0xfffe062c>
    1690:	0109c83a 	sub	r4,zero,r4
    1694:	01c00044 	movi	r7,1
    1698:	003fe306 	br	1628 <__alt_mem_epcs+0xfffe0628>
    169c:	00c00044 	movi	r3,1
    16a0:	003fee06 	br	165c <__alt_mem_epcs+0xfffe065c>

000016a4 <__modsi3>:
    16a4:	20001716 	blt	r4,zero,1704 <__modsi3+0x60>
    16a8:	000f883a 	mov	r7,zero
    16ac:	2005883a 	mov	r2,r4
    16b0:	28001216 	blt	r5,zero,16fc <__modsi3+0x58>
    16b4:	2900162e 	bgeu	r5,r4,1710 <__modsi3+0x6c>
    16b8:	01800804 	movi	r6,32
    16bc:	00c00044 	movi	r3,1
    16c0:	00000106 	br	16c8 <__modsi3+0x24>
    16c4:	30000a26 	beq	r6,zero,16f0 <__modsi3+0x4c>
    16c8:	294b883a 	add	r5,r5,r5
    16cc:	31bfffc4 	addi	r6,r6,-1
    16d0:	18c7883a 	add	r3,r3,r3
    16d4:	293ffb36 	bltu	r5,r4,16c4 <__alt_mem_epcs+0xfffe06c4>
    16d8:	18000526 	beq	r3,zero,16f0 <__modsi3+0x4c>
    16dc:	1806d07a 	srli	r3,r3,1
    16e0:	11400136 	bltu	r2,r5,16e8 <__modsi3+0x44>
    16e4:	1145c83a 	sub	r2,r2,r5
    16e8:	280ad07a 	srli	r5,r5,1
    16ec:	183ffb1e 	bne	r3,zero,16dc <__alt_mem_epcs+0xfffe06dc>
    16f0:	38000126 	beq	r7,zero,16f8 <__modsi3+0x54>
    16f4:	0085c83a 	sub	r2,zero,r2
    16f8:	f800283a 	ret
    16fc:	014bc83a 	sub	r5,zero,r5
    1700:	003fec06 	br	16b4 <__alt_mem_epcs+0xfffe06b4>
    1704:	0109c83a 	sub	r4,zero,r4
    1708:	01c00044 	movi	r7,1
    170c:	003fe706 	br	16ac <__alt_mem_epcs+0xfffe06ac>
    1710:	00c00044 	movi	r3,1
    1714:	003ff106 	br	16dc <__alt_mem_epcs+0xfffe06dc>

00001718 <__udivsi3>:
    1718:	200d883a 	mov	r6,r4
    171c:	2900152e 	bgeu	r5,r4,1774 <__udivsi3+0x5c>
    1720:	28001416 	blt	r5,zero,1774 <__udivsi3+0x5c>
    1724:	00800804 	movi	r2,32
    1728:	00c00044 	movi	r3,1
    172c:	00000206 	br	1738 <__udivsi3+0x20>
    1730:	10000e26 	beq	r2,zero,176c <__udivsi3+0x54>
    1734:	28000516 	blt	r5,zero,174c <__udivsi3+0x34>
    1738:	294b883a 	add	r5,r5,r5
    173c:	10bfffc4 	addi	r2,r2,-1
    1740:	18c7883a 	add	r3,r3,r3
    1744:	293ffa36 	bltu	r5,r4,1730 <__alt_mem_epcs+0xfffe0730>
    1748:	18000826 	beq	r3,zero,176c <__udivsi3+0x54>
    174c:	0005883a 	mov	r2,zero
    1750:	31400236 	bltu	r6,r5,175c <__udivsi3+0x44>
    1754:	314dc83a 	sub	r6,r6,r5
    1758:	10c4b03a 	or	r2,r2,r3
    175c:	1806d07a 	srli	r3,r3,1
    1760:	280ad07a 	srli	r5,r5,1
    1764:	183ffa1e 	bne	r3,zero,1750 <__alt_mem_epcs+0xfffe0750>
    1768:	f800283a 	ret
    176c:	0005883a 	mov	r2,zero
    1770:	f800283a 	ret
    1774:	00c00044 	movi	r3,1
    1778:	003ff406 	br	174c <__alt_mem_epcs+0xfffe074c>

0000177c <__umodsi3>:
    177c:	2005883a 	mov	r2,r4
    1780:	2900122e 	bgeu	r5,r4,17cc <__umodsi3+0x50>
    1784:	28001116 	blt	r5,zero,17cc <__umodsi3+0x50>
    1788:	01800804 	movi	r6,32
    178c:	00c00044 	movi	r3,1
    1790:	00000206 	br	179c <__umodsi3+0x20>
    1794:	30000c26 	beq	r6,zero,17c8 <__umodsi3+0x4c>
    1798:	28000516 	blt	r5,zero,17b0 <__umodsi3+0x34>
    179c:	294b883a 	add	r5,r5,r5
    17a0:	31bfffc4 	addi	r6,r6,-1
    17a4:	18c7883a 	add	r3,r3,r3
    17a8:	293ffa36 	bltu	r5,r4,1794 <__alt_mem_epcs+0xfffe0794>
    17ac:	18000626 	beq	r3,zero,17c8 <__umodsi3+0x4c>
    17b0:	1806d07a 	srli	r3,r3,1
    17b4:	11400136 	bltu	r2,r5,17bc <__umodsi3+0x40>
    17b8:	1145c83a 	sub	r2,r2,r5
    17bc:	280ad07a 	srli	r5,r5,1
    17c0:	183ffb1e 	bne	r3,zero,17b0 <__alt_mem_epcs+0xfffe07b0>
    17c4:	f800283a 	ret
    17c8:	f800283a 	ret
    17cc:	00c00044 	movi	r3,1
    17d0:	003ff706 	br	17b0 <__alt_mem_epcs+0xfffe07b0>

000017d4 <__divsf3>:
    17d4:	defff504 	addi	sp,sp,-44
    17d8:	200cd5fa 	srli	r6,r4,23
    17dc:	dcc00415 	stw	r19,16(sp)
    17e0:	2026d7fa 	srli	r19,r4,31
    17e4:	00c02034 	movhi	r3,128
    17e8:	dd800715 	stw	r22,28(sp)
    17ec:	dd000515 	stw	r20,20(sp)
    17f0:	dc800315 	stw	r18,12(sp)
    17f4:	18ffffc4 	addi	r3,r3,-1
    17f8:	dfc00a15 	stw	ra,40(sp)
    17fc:	df000915 	stw	fp,36(sp)
    1800:	ddc00815 	stw	r23,32(sp)
    1804:	dd400615 	stw	r21,24(sp)
    1808:	dc400215 	stw	r17,8(sp)
    180c:	dc000115 	stw	r16,4(sp)
    1810:	35003fcc 	andi	r20,r6,255
    1814:	1924703a 	and	r18,r3,r4
    1818:	9d803fcc 	andi	r22,r19,255
    181c:	a0005226 	beq	r20,zero,1968 <__divsf3+0x194>
    1820:	00803fc4 	movi	r2,255
    1824:	a0802e26 	beq	r20,r2,18e0 <__divsf3+0x10c>
    1828:	91002034 	orhi	r4,r18,128
    182c:	202490fa 	slli	r18,r4,3
    1830:	a53fe044 	addi	r20,r20,-127
    1834:	0021883a 	mov	r16,zero
    1838:	002f883a 	mov	r23,zero
    183c:	280cd5fa 	srli	r6,r5,23
    1840:	282ad7fa 	srli	r21,r5,31
    1844:	00c02034 	movhi	r3,128
    1848:	18ffffc4 	addi	r3,r3,-1
    184c:	31803fcc 	andi	r6,r6,255
    1850:	1962703a 	and	r17,r3,r5
    1854:	af003fcc 	andi	fp,r21,255
    1858:	30004a26 	beq	r6,zero,1984 <__divsf3+0x1b0>
    185c:	00803fc4 	movi	r2,255
    1860:	30804526 	beq	r6,r2,1978 <__divsf3+0x1a4>
    1864:	89402034 	orhi	r5,r17,128
    1868:	282290fa 	slli	r17,r5,3
    186c:	31bfe044 	addi	r6,r6,-127
    1870:	000b883a 	mov	r5,zero
    1874:	2c20b03a 	or	r16,r5,r16
    1878:	802090ba 	slli	r16,r16,2
    187c:	00800034 	movhi	r2,0
    1880:	10862804 	addi	r2,r2,6304
    1884:	80a1883a 	add	r16,r16,r2
    1888:	81000017 	ldw	r4,0(r16)
    188c:	9d46f03a 	xor	r3,r19,r21
    1890:	180f883a 	mov	r7,r3
    1894:	18803fcc 	andi	r2,r3,255
    1898:	a18dc83a 	sub	r6,r20,r6
    189c:	2000683a 	jmp	r4
    18a0:	00001a84 	movi	zero,106
    18a4:	00001908 	cmpgei	zero,zero,100
    18a8:	00001a78 	rdprs	zero,zero,105
    18ac:	000018f4 	movhi	zero,99
    18b0:	00001a78 	rdprs	zero,zero,105
    18b4:	00001a50 	cmplti	zero,zero,105
    18b8:	00001a78 	rdprs	zero,zero,105
    18bc:	000018f4 	movhi	zero,99
    18c0:	00001908 	cmpgei	zero,zero,100
    18c4:	00001908 	cmpgei	zero,zero,100
    18c8:	00001a50 	cmplti	zero,zero,105
    18cc:	000018f4 	movhi	zero,99
    18d0:	00001b64 	muli	zero,zero,109
    18d4:	00001b64 	muli	zero,zero,109
    18d8:	00001b64 	muli	zero,zero,109
    18dc:	00001b18 	cmpnei	zero,zero,108
    18e0:	9000581e 	bne	r18,zero,1a44 <__divsf3+0x270>
    18e4:	04000204 	movi	r16,8
    18e8:	05c00084 	movi	r23,2
    18ec:	003fd306 	br	183c <__alt_mem_epcs+0xfffe083c>
    18f0:	0023883a 	mov	r17,zero
    18f4:	e02d883a 	mov	r22,fp
    18f8:	282f883a 	mov	r23,r5
    18fc:	00800084 	movi	r2,2
    1900:	b8808f1e 	bne	r23,r2,1b40 <__divsf3+0x36c>
    1904:	b005883a 	mov	r2,r22
    1908:	11c0004c 	andi	r7,r2,1
    190c:	013fffc4 	movi	r4,-1
    1910:	000d883a 	mov	r6,zero
    1914:	21003fcc 	andi	r4,r4,255
    1918:	200895fa 	slli	r4,r4,23
    191c:	38803fcc 	andi	r2,r7,255
    1920:	00c02034 	movhi	r3,128
    1924:	100497fa 	slli	r2,r2,31
    1928:	18ffffc4 	addi	r3,r3,-1
    192c:	30c6703a 	and	r3,r6,r3
    1930:	1906b03a 	or	r3,r3,r4
    1934:	1884b03a 	or	r2,r3,r2
    1938:	dfc00a17 	ldw	ra,40(sp)
    193c:	df000917 	ldw	fp,36(sp)
    1940:	ddc00817 	ldw	r23,32(sp)
    1944:	dd800717 	ldw	r22,28(sp)
    1948:	dd400617 	ldw	r21,24(sp)
    194c:	dd000517 	ldw	r20,20(sp)
    1950:	dcc00417 	ldw	r19,16(sp)
    1954:	dc800317 	ldw	r18,12(sp)
    1958:	dc400217 	ldw	r17,8(sp)
    195c:	dc000117 	ldw	r16,4(sp)
    1960:	dec00b04 	addi	sp,sp,44
    1964:	f800283a 	ret
    1968:	90002b1e 	bne	r18,zero,1a18 <__divsf3+0x244>
    196c:	04000104 	movi	r16,4
    1970:	05c00044 	movi	r23,1
    1974:	003fb106 	br	183c <__alt_mem_epcs+0xfffe083c>
    1978:	8800251e 	bne	r17,zero,1a10 <__divsf3+0x23c>
    197c:	01400084 	movi	r5,2
    1980:	00000206 	br	198c <__divsf3+0x1b8>
    1984:	88001a1e 	bne	r17,zero,19f0 <__divsf3+0x21c>
    1988:	01400044 	movi	r5,1
    198c:	8160b03a 	or	r16,r16,r5
    1990:	802090ba 	slli	r16,r16,2
    1994:	00c00034 	movhi	r3,0
    1998:	18c66c04 	addi	r3,r3,6576
    199c:	80e1883a 	add	r16,r16,r3
    19a0:	80c00017 	ldw	r3,0(r16)
    19a4:	9d44f03a 	xor	r2,r19,r21
    19a8:	a18dc83a 	sub	r6,r20,r6
    19ac:	1800683a 	jmp	r3
    19b0:	00001908 	cmpgei	zero,zero,100
    19b4:	00001908 	cmpgei	zero,zero,100
    19b8:	00001b54 	movui	zero,109
    19bc:	000018f0 	cmpltui	zero,zero,99
    19c0:	00001b54 	movui	zero,109
    19c4:	00001a50 	cmplti	zero,zero,105
    19c8:	00001b54 	movui	zero,109
    19cc:	000018f0 	cmpltui	zero,zero,99
    19d0:	00001908 	cmpgei	zero,zero,100
    19d4:	00001908 	cmpgei	zero,zero,100
    19d8:	00001a50 	cmplti	zero,zero,105
    19dc:	000018f0 	cmpltui	zero,zero,99
    19e0:	00001b64 	muli	zero,zero,109
    19e4:	00001b64 	muli	zero,zero,109
    19e8:	00001b64 	muli	zero,zero,109
    19ec:	00001b7c 	xorhi	zero,zero,109
    19f0:	8809883a 	mov	r4,r17
    19f4:	000363c0 	call	363c <__clzsi2>
    19f8:	10fffec4 	addi	r3,r2,-5
    19fc:	10801d84 	addi	r2,r2,118
    1a00:	88e2983a 	sll	r17,r17,r3
    1a04:	008dc83a 	sub	r6,zero,r2
    1a08:	000b883a 	mov	r5,zero
    1a0c:	003f9906 	br	1874 <__alt_mem_epcs+0xfffe0874>
    1a10:	014000c4 	movi	r5,3
    1a14:	003f9706 	br	1874 <__alt_mem_epcs+0xfffe0874>
    1a18:	9009883a 	mov	r4,r18
    1a1c:	d9400015 	stw	r5,0(sp)
    1a20:	000363c0 	call	363c <__clzsi2>
    1a24:	10fffec4 	addi	r3,r2,-5
    1a28:	11801d84 	addi	r6,r2,118
    1a2c:	90e4983a 	sll	r18,r18,r3
    1a30:	01a9c83a 	sub	r20,zero,r6
    1a34:	0021883a 	mov	r16,zero
    1a38:	002f883a 	mov	r23,zero
    1a3c:	d9400017 	ldw	r5,0(sp)
    1a40:	003f7e06 	br	183c <__alt_mem_epcs+0xfffe083c>
    1a44:	04000304 	movi	r16,12
    1a48:	05c000c4 	movi	r23,3
    1a4c:	003f7b06 	br	183c <__alt_mem_epcs+0xfffe083c>
    1a50:	01802034 	movhi	r6,128
    1a54:	000f883a 	mov	r7,zero
    1a58:	31bfffc4 	addi	r6,r6,-1
    1a5c:	013fffc4 	movi	r4,-1
    1a60:	003fac06 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1a64:	01400044 	movi	r5,1
    1a68:	2909c83a 	sub	r4,r5,r4
    1a6c:	00c006c4 	movi	r3,27
    1a70:	19004b0e 	bge	r3,r4,1ba0 <__divsf3+0x3cc>
    1a74:	114e703a 	and	r7,r2,r5
    1a78:	0009883a 	mov	r4,zero
    1a7c:	000d883a 	mov	r6,zero
    1a80:	003fa406 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1a84:	9006917a 	slli	r3,r18,5
    1a88:	8822917a 	slli	r17,r17,5
    1a8c:	1c40372e 	bgeu	r3,r17,1b6c <__divsf3+0x398>
    1a90:	31bfffc4 	addi	r6,r6,-1
    1a94:	010006c4 	movi	r4,27
    1a98:	000b883a 	mov	r5,zero
    1a9c:	180f883a 	mov	r7,r3
    1aa0:	294b883a 	add	r5,r5,r5
    1aa4:	18c7883a 	add	r3,r3,r3
    1aa8:	38000116 	blt	r7,zero,1ab0 <__divsf3+0x2dc>
    1aac:	1c400236 	bltu	r3,r17,1ab8 <__divsf3+0x2e4>
    1ab0:	1c47c83a 	sub	r3,r3,r17
    1ab4:	29400054 	ori	r5,r5,1
    1ab8:	213fffc4 	addi	r4,r4,-1
    1abc:	203ff71e 	bne	r4,zero,1a9c <__alt_mem_epcs+0xfffe0a9c>
    1ac0:	1806c03a 	cmpne	r3,r3,zero
    1ac4:	1962b03a 	or	r17,r3,r5
    1ac8:	31001fc4 	addi	r4,r6,127
    1acc:	013fe50e 	bge	zero,r4,1a64 <__alt_mem_epcs+0xfffe0a64>
    1ad0:	88c001cc 	andi	r3,r17,7
    1ad4:	18000426 	beq	r3,zero,1ae8 <__divsf3+0x314>
    1ad8:	88c003cc 	andi	r3,r17,15
    1adc:	01400104 	movi	r5,4
    1ae0:	19400126 	beq	r3,r5,1ae8 <__divsf3+0x314>
    1ae4:	8963883a 	add	r17,r17,r5
    1ae8:	88c2002c 	andhi	r3,r17,2048
    1aec:	18000426 	beq	r3,zero,1b00 <__divsf3+0x32c>
    1af0:	00fe0034 	movhi	r3,63488
    1af4:	18ffffc4 	addi	r3,r3,-1
    1af8:	31002004 	addi	r4,r6,128
    1afc:	88e2703a 	and	r17,r17,r3
    1b00:	00c03f84 	movi	r3,254
    1b04:	193f8016 	blt	r3,r4,1908 <__alt_mem_epcs+0xfffe0908>
    1b08:	880c91ba 	slli	r6,r17,6
    1b0c:	11c0004c 	andi	r7,r2,1
    1b10:	300cd27a 	srli	r6,r6,9
    1b14:	003f7f06 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1b18:	9080102c 	andhi	r2,r18,64
    1b1c:	10000226 	beq	r2,zero,1b28 <__divsf3+0x354>
    1b20:	8880102c 	andhi	r2,r17,64
    1b24:	10001826 	beq	r2,zero,1b88 <__divsf3+0x3b4>
    1b28:	00802034 	movhi	r2,128
    1b2c:	91801034 	orhi	r6,r18,64
    1b30:	10bfffc4 	addi	r2,r2,-1
    1b34:	980f883a 	mov	r7,r19
    1b38:	308c703a 	and	r6,r6,r2
    1b3c:	003fc706 	br	1a5c <__alt_mem_epcs+0xfffe0a5c>
    1b40:	008000c4 	movi	r2,3
    1b44:	b8802d26 	beq	r23,r2,1bfc <__divsf3+0x428>
    1b48:	00c00044 	movi	r3,1
    1b4c:	b005883a 	mov	r2,r22
    1b50:	b8ffdd1e 	bne	r23,r3,1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1b54:	11c0004c 	andi	r7,r2,1
    1b58:	0009883a 	mov	r4,zero
    1b5c:	000d883a 	mov	r6,zero
    1b60:	003f6c06 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1b64:	9023883a 	mov	r17,r18
    1b68:	003f6406 	br	18fc <__alt_mem_epcs+0xfffe08fc>
    1b6c:	1c47c83a 	sub	r3,r3,r17
    1b70:	01000684 	movi	r4,26
    1b74:	01400044 	movi	r5,1
    1b78:	003fc806 	br	1a9c <__alt_mem_epcs+0xfffe0a9c>
    1b7c:	9080102c 	andhi	r2,r18,64
    1b80:	103fe926 	beq	r2,zero,1b28 <__alt_mem_epcs+0xfffe0b28>
    1b84:	0023883a 	mov	r17,zero
    1b88:	00802034 	movhi	r2,128
    1b8c:	89801034 	orhi	r6,r17,64
    1b90:	10bfffc4 	addi	r2,r2,-1
    1b94:	a80f883a 	mov	r7,r21
    1b98:	308c703a 	and	r6,r6,r2
    1b9c:	003faf06 	br	1a5c <__alt_mem_epcs+0xfffe0a5c>
    1ba0:	01c00804 	movi	r7,32
    1ba4:	390fc83a 	sub	r7,r7,r4
    1ba8:	89ce983a 	sll	r7,r17,r7
    1bac:	890ad83a 	srl	r5,r17,r4
    1bb0:	380ec03a 	cmpne	r7,r7,zero
    1bb4:	29cab03a 	or	r5,r5,r7
    1bb8:	28c001cc 	andi	r3,r5,7
    1bbc:	18000426 	beq	r3,zero,1bd0 <__divsf3+0x3fc>
    1bc0:	28c003cc 	andi	r3,r5,15
    1bc4:	01000104 	movi	r4,4
    1bc8:	19000126 	beq	r3,r4,1bd0 <__divsf3+0x3fc>
    1bcc:	290b883a 	add	r5,r5,r4
    1bd0:	28c1002c 	andhi	r3,r5,1024
    1bd4:	18000426 	beq	r3,zero,1be8 <__divsf3+0x414>
    1bd8:	11c0004c 	andi	r7,r2,1
    1bdc:	01000044 	movi	r4,1
    1be0:	000d883a 	mov	r6,zero
    1be4:	003f4b06 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1be8:	280a91ba 	slli	r5,r5,6
    1bec:	11c0004c 	andi	r7,r2,1
    1bf0:	0009883a 	mov	r4,zero
    1bf4:	280cd27a 	srli	r6,r5,9
    1bf8:	003f4606 	br	1914 <__alt_mem_epcs+0xfffe0914>
    1bfc:	00802034 	movhi	r2,128
    1c00:	89801034 	orhi	r6,r17,64
    1c04:	10bfffc4 	addi	r2,r2,-1
    1c08:	b00f883a 	mov	r7,r22
    1c0c:	308c703a 	and	r6,r6,r2
    1c10:	003f9206 	br	1a5c <__alt_mem_epcs+0xfffe0a5c>

00001c14 <__gesf2>:
    1c14:	2004d5fa 	srli	r2,r4,23
    1c18:	2806d5fa 	srli	r3,r5,23
    1c1c:	01802034 	movhi	r6,128
    1c20:	31bfffc4 	addi	r6,r6,-1
    1c24:	10803fcc 	andi	r2,r2,255
    1c28:	01c03fc4 	movi	r7,255
    1c2c:	3110703a 	and	r8,r6,r4
    1c30:	18c03fcc 	andi	r3,r3,255
    1c34:	314c703a 	and	r6,r6,r5
    1c38:	2008d7fa 	srli	r4,r4,31
    1c3c:	280ad7fa 	srli	r5,r5,31
    1c40:	11c01926 	beq	r2,r7,1ca8 <__gesf2+0x94>
    1c44:	01c03fc4 	movi	r7,255
    1c48:	19c00f26 	beq	r3,r7,1c88 <__gesf2+0x74>
    1c4c:	1000061e 	bne	r2,zero,1c68 <__gesf2+0x54>
    1c50:	400f003a 	cmpeq	r7,r8,zero
    1c54:	1800071e 	bne	r3,zero,1c74 <__gesf2+0x60>
    1c58:	3000061e 	bne	r6,zero,1c74 <__gesf2+0x60>
    1c5c:	0005883a 	mov	r2,zero
    1c60:	40000e1e 	bne	r8,zero,1c9c <__gesf2+0x88>
    1c64:	f800283a 	ret
    1c68:	18000a1e 	bne	r3,zero,1c94 <__gesf2+0x80>
    1c6c:	30000b26 	beq	r6,zero,1c9c <__gesf2+0x88>
    1c70:	000f883a 	mov	r7,zero
    1c74:	29403fcc 	andi	r5,r5,255
    1c78:	38000726 	beq	r7,zero,1c98 <__gesf2+0x84>
    1c7c:	28000826 	beq	r5,zero,1ca0 <__gesf2+0x8c>
    1c80:	00800044 	movi	r2,1
    1c84:	f800283a 	ret
    1c88:	303ff026 	beq	r6,zero,1c4c <__alt_mem_epcs+0xfffe0c4c>
    1c8c:	00bfff84 	movi	r2,-2
    1c90:	f800283a 	ret
    1c94:	29403fcc 	andi	r5,r5,255
    1c98:	21400526 	beq	r4,r5,1cb0 <__gesf2+0x9c>
    1c9c:	203ff826 	beq	r4,zero,1c80 <__alt_mem_epcs+0xfffe0c80>
    1ca0:	00bfffc4 	movi	r2,-1
    1ca4:	f800283a 	ret
    1ca8:	403fe626 	beq	r8,zero,1c44 <__alt_mem_epcs+0xfffe0c44>
    1cac:	003ff706 	br	1c8c <__alt_mem_epcs+0xfffe0c8c>
    1cb0:	18bffa16 	blt	r3,r2,1c9c <__alt_mem_epcs+0xfffe0c9c>
    1cb4:	10c00216 	blt	r2,r3,1cc0 <__gesf2+0xac>
    1cb8:	323ff836 	bltu	r6,r8,1c9c <__alt_mem_epcs+0xfffe0c9c>
    1cbc:	4180022e 	bgeu	r8,r6,1cc8 <__gesf2+0xb4>
    1cc0:	203fef1e 	bne	r4,zero,1c80 <__alt_mem_epcs+0xfffe0c80>
    1cc4:	003ff606 	br	1ca0 <__alt_mem_epcs+0xfffe0ca0>
    1cc8:	0005883a 	mov	r2,zero
    1ccc:	f800283a 	ret

00001cd0 <__subsf3>:
    1cd0:	defffc04 	addi	sp,sp,-16
    1cd4:	280cd5fa 	srli	r6,r5,23
    1cd8:	dc000015 	stw	r16,0(sp)
    1cdc:	01c02034 	movhi	r7,128
    1ce0:	2020d5fa 	srli	r16,r4,23
    1ce4:	39ffffc4 	addi	r7,r7,-1
    1ce8:	3906703a 	and	r3,r7,r4
    1cec:	dc400115 	stw	r17,4(sp)
    1cf0:	394e703a 	and	r7,r7,r5
    1cf4:	2022d7fa 	srli	r17,r4,31
    1cf8:	dfc00315 	stw	ra,12(sp)
    1cfc:	dc800215 	stw	r18,8(sp)
    1d00:	31803fcc 	andi	r6,r6,255
    1d04:	01003fc4 	movi	r4,255
    1d08:	84003fcc 	andi	r16,r16,255
    1d0c:	180690fa 	slli	r3,r3,3
    1d10:	2804d7fa 	srli	r2,r5,31
    1d14:	380e90fa 	slli	r7,r7,3
    1d18:	31006d26 	beq	r6,r4,1ed0 <__subsf3+0x200>
    1d1c:	1080005c 	xori	r2,r2,1
    1d20:	8189c83a 	sub	r4,r16,r6
    1d24:	14404f26 	beq	r2,r17,1e64 <__subsf3+0x194>
    1d28:	0100770e 	bge	zero,r4,1f08 <__subsf3+0x238>
    1d2c:	30001e1e 	bne	r6,zero,1da8 <__subsf3+0xd8>
    1d30:	38006a1e 	bne	r7,zero,1edc <__subsf3+0x20c>
    1d34:	188001cc 	andi	r2,r3,7
    1d38:	10000426 	beq	r2,zero,1d4c <__subsf3+0x7c>
    1d3c:	188003cc 	andi	r2,r3,15
    1d40:	01000104 	movi	r4,4
    1d44:	11000126 	beq	r2,r4,1d4c <__subsf3+0x7c>
    1d48:	1907883a 	add	r3,r3,r4
    1d4c:	1881002c 	andhi	r2,r3,1024
    1d50:	10003926 	beq	r2,zero,1e38 <__subsf3+0x168>
    1d54:	84000044 	addi	r16,r16,1
    1d58:	00803fc4 	movi	r2,255
    1d5c:	80807526 	beq	r16,r2,1f34 <__subsf3+0x264>
    1d60:	180691ba 	slli	r3,r3,6
    1d64:	8880004c 	andi	r2,r17,1
    1d68:	180ad27a 	srli	r5,r3,9
    1d6c:	84003fcc 	andi	r16,r16,255
    1d70:	800695fa 	slli	r3,r16,23
    1d74:	10803fcc 	andi	r2,r2,255
    1d78:	01002034 	movhi	r4,128
    1d7c:	213fffc4 	addi	r4,r4,-1
    1d80:	100497fa 	slli	r2,r2,31
    1d84:	2920703a 	and	r16,r5,r4
    1d88:	80e0b03a 	or	r16,r16,r3
    1d8c:	8084b03a 	or	r2,r16,r2
    1d90:	dfc00317 	ldw	ra,12(sp)
    1d94:	dc800217 	ldw	r18,8(sp)
    1d98:	dc400117 	ldw	r17,4(sp)
    1d9c:	dc000017 	ldw	r16,0(sp)
    1da0:	dec00404 	addi	sp,sp,16
    1da4:	f800283a 	ret
    1da8:	00803fc4 	movi	r2,255
    1dac:	80bfe126 	beq	r16,r2,1d34 <__alt_mem_epcs+0xfffe0d34>
    1db0:	39c10034 	orhi	r7,r7,1024
    1db4:	008006c4 	movi	r2,27
    1db8:	11007416 	blt	r2,r4,1f8c <__subsf3+0x2bc>
    1dbc:	00800804 	movi	r2,32
    1dc0:	1105c83a 	sub	r2,r2,r4
    1dc4:	3884983a 	sll	r2,r7,r2
    1dc8:	390ed83a 	srl	r7,r7,r4
    1dcc:	1008c03a 	cmpne	r4,r2,zero
    1dd0:	390eb03a 	or	r7,r7,r4
    1dd4:	19c7c83a 	sub	r3,r3,r7
    1dd8:	1881002c 	andhi	r2,r3,1024
    1ddc:	10001426 	beq	r2,zero,1e30 <__subsf3+0x160>
    1de0:	04810034 	movhi	r18,1024
    1de4:	94bfffc4 	addi	r18,r18,-1
    1de8:	1ca4703a 	and	r18,r3,r18
    1dec:	9009883a 	mov	r4,r18
    1df0:	000363c0 	call	363c <__clzsi2>
    1df4:	10bffec4 	addi	r2,r2,-5
    1df8:	90a4983a 	sll	r18,r18,r2
    1dfc:	14005116 	blt	r2,r16,1f44 <__subsf3+0x274>
    1e00:	1405c83a 	sub	r2,r2,r16
    1e04:	10c00044 	addi	r3,r2,1
    1e08:	00800804 	movi	r2,32
    1e0c:	10c5c83a 	sub	r2,r2,r3
    1e10:	9084983a 	sll	r2,r18,r2
    1e14:	90e4d83a 	srl	r18,r18,r3
    1e18:	0021883a 	mov	r16,zero
    1e1c:	1006c03a 	cmpne	r3,r2,zero
    1e20:	90c6b03a 	or	r3,r18,r3
    1e24:	003fc306 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1e28:	2000e026 	beq	r4,zero,21ac <__subsf3+0x4dc>
    1e2c:	2007883a 	mov	r3,r4
    1e30:	188001cc 	andi	r2,r3,7
    1e34:	103fc11e 	bne	r2,zero,1d3c <__alt_mem_epcs+0xfffe0d3c>
    1e38:	180ad0fa 	srli	r5,r3,3
    1e3c:	00c03fc4 	movi	r3,255
    1e40:	8880004c 	andi	r2,r17,1
    1e44:	80c0031e 	bne	r16,r3,1e54 <__subsf3+0x184>
    1e48:	28006d26 	beq	r5,zero,2000 <__subsf3+0x330>
    1e4c:	29401034 	orhi	r5,r5,64
    1e50:	043fffc4 	movi	r16,-1
    1e54:	00c02034 	movhi	r3,128
    1e58:	18ffffc4 	addi	r3,r3,-1
    1e5c:	28ca703a 	and	r5,r5,r3
    1e60:	003fc206 	br	1d6c <__alt_mem_epcs+0xfffe0d6c>
    1e64:	01003c0e 	bge	zero,r4,1f58 <__subsf3+0x288>
    1e68:	30002126 	beq	r6,zero,1ef0 <__subsf3+0x220>
    1e6c:	01403fc4 	movi	r5,255
    1e70:	817fb026 	beq	r16,r5,1d34 <__alt_mem_epcs+0xfffe0d34>
    1e74:	39c10034 	orhi	r7,r7,1024
    1e78:	014006c4 	movi	r5,27
    1e7c:	29007416 	blt	r5,r4,2050 <__subsf3+0x380>
    1e80:	01400804 	movi	r5,32
    1e84:	290bc83a 	sub	r5,r5,r4
    1e88:	394a983a 	sll	r5,r7,r5
    1e8c:	390ed83a 	srl	r7,r7,r4
    1e90:	2808c03a 	cmpne	r4,r5,zero
    1e94:	390eb03a 	or	r7,r7,r4
    1e98:	19c7883a 	add	r3,r3,r7
    1e9c:	1901002c 	andhi	r4,r3,1024
    1ea0:	20003826 	beq	r4,zero,1f84 <__subsf3+0x2b4>
    1ea4:	84000044 	addi	r16,r16,1
    1ea8:	01003fc4 	movi	r4,255
    1eac:	81005426 	beq	r16,r4,2000 <__subsf3+0x330>
    1eb0:	1023883a 	mov	r17,r2
    1eb4:	00bf0034 	movhi	r2,64512
    1eb8:	10bfffc4 	addi	r2,r2,-1
    1ebc:	1900004c 	andi	r4,r3,1
    1ec0:	1886703a 	and	r3,r3,r2
    1ec4:	1806d07a 	srli	r3,r3,1
    1ec8:	1906b03a 	or	r3,r3,r4
    1ecc:	003f9906 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1ed0:	383f9226 	beq	r7,zero,1d1c <__alt_mem_epcs+0xfffe0d1c>
    1ed4:	10803fcc 	andi	r2,r2,255
    1ed8:	003f9106 	br	1d20 <__alt_mem_epcs+0xfffe0d20>
    1edc:	213fffc4 	addi	r4,r4,-1
    1ee0:	203fbc26 	beq	r4,zero,1dd4 <__alt_mem_epcs+0xfffe0dd4>
    1ee4:	00803fc4 	movi	r2,255
    1ee8:	80bfb21e 	bne	r16,r2,1db4 <__alt_mem_epcs+0xfffe0db4>
    1eec:	003f9106 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1ef0:	383f9026 	beq	r7,zero,1d34 <__alt_mem_epcs+0xfffe0d34>
    1ef4:	213fffc4 	addi	r4,r4,-1
    1ef8:	203fe726 	beq	r4,zero,1e98 <__alt_mem_epcs+0xfffe0e98>
    1efc:	01403fc4 	movi	r5,255
    1f00:	817fdd1e 	bne	r16,r5,1e78 <__alt_mem_epcs+0xfffe0e78>
    1f04:	003f8b06 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1f08:	2000221e 	bne	r4,zero,1f94 <__subsf3+0x2c4>
    1f0c:	81000044 	addi	r4,r16,1
    1f10:	21003fcc 	andi	r4,r4,255
    1f14:	01400044 	movi	r5,1
    1f18:	2900470e 	bge	r5,r4,2038 <__subsf3+0x368>
    1f1c:	19e5c83a 	sub	r18,r3,r7
    1f20:	9141002c 	andhi	r5,r18,1024
    1f24:	28002d26 	beq	r5,zero,1fdc <__subsf3+0x30c>
    1f28:	38e5c83a 	sub	r18,r7,r3
    1f2c:	1023883a 	mov	r17,r2
    1f30:	003fae06 	br	1dec <__alt_mem_epcs+0xfffe0dec>
    1f34:	8880004c 	andi	r2,r17,1
    1f38:	043fffc4 	movi	r16,-1
    1f3c:	000b883a 	mov	r5,zero
    1f40:	003f8a06 	br	1d6c <__alt_mem_epcs+0xfffe0d6c>
    1f44:	00ff0034 	movhi	r3,64512
    1f48:	18ffffc4 	addi	r3,r3,-1
    1f4c:	80a1c83a 	sub	r16,r16,r2
    1f50:	90c6703a 	and	r3,r18,r3
    1f54:	003f7706 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1f58:	2000431e 	bne	r4,zero,2068 <__subsf3+0x398>
    1f5c:	81000044 	addi	r4,r16,1
    1f60:	21803fcc 	andi	r6,r4,255
    1f64:	01400044 	movi	r5,1
    1f68:	2980280e 	bge	r5,r6,200c <__subsf3+0x33c>
    1f6c:	01403fc4 	movi	r5,255
    1f70:	21402326 	beq	r4,r5,2000 <__subsf3+0x330>
    1f74:	19c7883a 	add	r3,r3,r7
    1f78:	1806d07a 	srli	r3,r3,1
    1f7c:	2021883a 	mov	r16,r4
    1f80:	003f6c06 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    1f84:	1023883a 	mov	r17,r2
    1f88:	003fa906 	br	1e30 <__alt_mem_epcs+0xfffe0e30>
    1f8c:	01c00044 	movi	r7,1
    1f90:	003f9006 	br	1dd4 <__alt_mem_epcs+0xfffe0dd4>
    1f94:	8000151e 	bne	r16,zero,1fec <__subsf3+0x31c>
    1f98:	18002f26 	beq	r3,zero,2058 <__subsf3+0x388>
    1f9c:	0108303a 	nor	r4,zero,r4
    1fa0:	20000a26 	beq	r4,zero,1fcc <__subsf3+0x2fc>
    1fa4:	01403fc4 	movi	r5,255
    1fa8:	31402b26 	beq	r6,r5,2058 <__subsf3+0x388>
    1fac:	014006c4 	movi	r5,27
    1fb0:	29006e16 	blt	r5,r4,216c <__subsf3+0x49c>
    1fb4:	01400804 	movi	r5,32
    1fb8:	290bc83a 	sub	r5,r5,r4
    1fbc:	194a983a 	sll	r5,r3,r5
    1fc0:	1908d83a 	srl	r4,r3,r4
    1fc4:	2806c03a 	cmpne	r3,r5,zero
    1fc8:	20c6b03a 	or	r3,r4,r3
    1fcc:	38c7c83a 	sub	r3,r7,r3
    1fd0:	3021883a 	mov	r16,r6
    1fd4:	1023883a 	mov	r17,r2
    1fd8:	003f7f06 	br	1dd8 <__alt_mem_epcs+0xfffe0dd8>
    1fdc:	903f831e 	bne	r18,zero,1dec <__alt_mem_epcs+0xfffe0dec>
    1fe0:	0005883a 	mov	r2,zero
    1fe4:	0021883a 	mov	r16,zero
    1fe8:	003f9a06 	br	1e54 <__alt_mem_epcs+0xfffe0e54>
    1fec:	01403fc4 	movi	r5,255
    1ff0:	31401926 	beq	r6,r5,2058 <__subsf3+0x388>
    1ff4:	0109c83a 	sub	r4,zero,r4
    1ff8:	18c10034 	orhi	r3,r3,1024
    1ffc:	003feb06 	br	1fac <__alt_mem_epcs+0xfffe0fac>
    2000:	043fffc4 	movi	r16,-1
    2004:	000b883a 	mov	r5,zero
    2008:	003f5806 	br	1d6c <__alt_mem_epcs+0xfffe0d6c>
    200c:	8000481e 	bne	r16,zero,2130 <__subsf3+0x460>
    2010:	18006226 	beq	r3,zero,219c <__subsf3+0x4cc>
    2014:	383f4726 	beq	r7,zero,1d34 <__alt_mem_epcs+0xfffe0d34>
    2018:	19c7883a 	add	r3,r3,r7
    201c:	1881002c 	andhi	r2,r3,1024
    2020:	103f8326 	beq	r2,zero,1e30 <__alt_mem_epcs+0xfffe0e30>
    2024:	00bf0034 	movhi	r2,64512
    2028:	10bfffc4 	addi	r2,r2,-1
    202c:	2821883a 	mov	r16,r5
    2030:	1886703a 	and	r3,r3,r2
    2034:	003f3f06 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2038:	80001c1e 	bne	r16,zero,20ac <__subsf3+0x3dc>
    203c:	1800261e 	bne	r3,zero,20d8 <__subsf3+0x408>
    2040:	38004c26 	beq	r7,zero,2174 <__subsf3+0x4a4>
    2044:	3807883a 	mov	r3,r7
    2048:	1023883a 	mov	r17,r2
    204c:	003f3906 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2050:	01c00044 	movi	r7,1
    2054:	003f9006 	br	1e98 <__alt_mem_epcs+0xfffe0e98>
    2058:	3807883a 	mov	r3,r7
    205c:	3021883a 	mov	r16,r6
    2060:	1023883a 	mov	r17,r2
    2064:	003f3306 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2068:	8000161e 	bne	r16,zero,20c4 <__subsf3+0x3f4>
    206c:	18002d26 	beq	r3,zero,2124 <__subsf3+0x454>
    2070:	0108303a 	nor	r4,zero,r4
    2074:	20000a26 	beq	r4,zero,20a0 <__subsf3+0x3d0>
    2078:	01403fc4 	movi	r5,255
    207c:	31402926 	beq	r6,r5,2124 <__subsf3+0x454>
    2080:	014006c4 	movi	r5,27
    2084:	29004716 	blt	r5,r4,21a4 <__subsf3+0x4d4>
    2088:	01400804 	movi	r5,32
    208c:	290bc83a 	sub	r5,r5,r4
    2090:	194a983a 	sll	r5,r3,r5
    2094:	1908d83a 	srl	r4,r3,r4
    2098:	2806c03a 	cmpne	r3,r5,zero
    209c:	20c6b03a 	or	r3,r4,r3
    20a0:	19c7883a 	add	r3,r3,r7
    20a4:	3021883a 	mov	r16,r6
    20a8:	003f7c06 	br	1e9c <__alt_mem_epcs+0xfffe0e9c>
    20ac:	1800111e 	bne	r3,zero,20f4 <__subsf3+0x424>
    20b0:	38003326 	beq	r7,zero,2180 <__subsf3+0x4b0>
    20b4:	3807883a 	mov	r3,r7
    20b8:	1023883a 	mov	r17,r2
    20bc:	04003fc4 	movi	r16,255
    20c0:	003f1c06 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    20c4:	01403fc4 	movi	r5,255
    20c8:	31401626 	beq	r6,r5,2124 <__subsf3+0x454>
    20cc:	0109c83a 	sub	r4,zero,r4
    20d0:	18c10034 	orhi	r3,r3,1024
    20d4:	003fea06 	br	2080 <__alt_mem_epcs+0xfffe1080>
    20d8:	383f1626 	beq	r7,zero,1d34 <__alt_mem_epcs+0xfffe0d34>
    20dc:	19c9c83a 	sub	r4,r3,r7
    20e0:	2141002c 	andhi	r5,r4,1024
    20e4:	283f5026 	beq	r5,zero,1e28 <__alt_mem_epcs+0xfffe0e28>
    20e8:	38c7c83a 	sub	r3,r7,r3
    20ec:	1023883a 	mov	r17,r2
    20f0:	003f1006 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    20f4:	38001b26 	beq	r7,zero,2164 <__subsf3+0x494>
    20f8:	1806d0fa 	srli	r3,r3,3
    20fc:	1900102c 	andhi	r4,r3,64
    2100:	20000526 	beq	r4,zero,2118 <__subsf3+0x448>
    2104:	380ed0fa 	srli	r7,r7,3
    2108:	3900102c 	andhi	r4,r7,64
    210c:	2000021e 	bne	r4,zero,2118 <__subsf3+0x448>
    2110:	3807883a 	mov	r3,r7
    2114:	1023883a 	mov	r17,r2
    2118:	180690fa 	slli	r3,r3,3
    211c:	04003fc4 	movi	r16,255
    2120:	003f0406 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2124:	3807883a 	mov	r3,r7
    2128:	3021883a 	mov	r16,r6
    212c:	003f0106 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2130:	18001726 	beq	r3,zero,2190 <__subsf3+0x4c0>
    2134:	38000b26 	beq	r7,zero,2164 <__subsf3+0x494>
    2138:	1806d0fa 	srli	r3,r3,3
    213c:	1900102c 	andhi	r4,r3,64
    2140:	20000426 	beq	r4,zero,2154 <__subsf3+0x484>
    2144:	380ed0fa 	srli	r7,r7,3
    2148:	3900102c 	andhi	r4,r7,64
    214c:	2000011e 	bne	r4,zero,2154 <__subsf3+0x484>
    2150:	3807883a 	mov	r3,r7
    2154:	180690fa 	slli	r3,r3,3
    2158:	1023883a 	mov	r17,r2
    215c:	04003fc4 	movi	r16,255
    2160:	003ef406 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    2164:	04003fc4 	movi	r16,255
    2168:	003ef206 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    216c:	00c00044 	movi	r3,1
    2170:	003f9606 	br	1fcc <__alt_mem_epcs+0xfffe0fcc>
    2174:	000b883a 	mov	r5,zero
    2178:	0005883a 	mov	r2,zero
    217c:	003f3506 	br	1e54 <__alt_mem_epcs+0xfffe0e54>
    2180:	01402034 	movhi	r5,128
    2184:	297fffc4 	addi	r5,r5,-1
    2188:	0005883a 	mov	r2,zero
    218c:	003f2f06 	br	1e4c <__alt_mem_epcs+0xfffe0e4c>
    2190:	3807883a 	mov	r3,r7
    2194:	04003fc4 	movi	r16,255
    2198:	003ee606 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    219c:	3807883a 	mov	r3,r7
    21a0:	003ee406 	br	1d34 <__alt_mem_epcs+0xfffe0d34>
    21a4:	00c00044 	movi	r3,1
    21a8:	003fbd06 	br	20a0 <__alt_mem_epcs+0xfffe10a0>
    21ac:	0005883a 	mov	r2,zero
    21b0:	003f2806 	br	1e54 <__alt_mem_epcs+0xfffe0e54>

000021b4 <__fixsfsi>:
    21b4:	200ad5fa 	srli	r5,r4,23
    21b8:	00c02034 	movhi	r3,128
    21bc:	18ffffc4 	addi	r3,r3,-1
    21c0:	29403fcc 	andi	r5,r5,255
    21c4:	00801f84 	movi	r2,126
    21c8:	1906703a 	and	r3,r3,r4
    21cc:	2008d7fa 	srli	r4,r4,31
    21d0:	11400e0e 	bge	r2,r5,220c <__fixsfsi+0x58>
    21d4:	00802744 	movi	r2,157
    21d8:	11400816 	blt	r2,r5,21fc <__fixsfsi+0x48>
    21dc:	00802544 	movi	r2,149
    21e0:	18c02034 	orhi	r3,r3,128
    21e4:	11400b0e 	bge	r2,r5,2214 <__fixsfsi+0x60>
    21e8:	28bfda84 	addi	r2,r5,-150
    21ec:	1884983a 	sll	r2,r3,r2
    21f0:	20000726 	beq	r4,zero,2210 <__fixsfsi+0x5c>
    21f4:	0085c83a 	sub	r2,zero,r2
    21f8:	f800283a 	ret
    21fc:	00a00034 	movhi	r2,32768
    2200:	10bfffc4 	addi	r2,r2,-1
    2204:	2085883a 	add	r2,r4,r2
    2208:	f800283a 	ret
    220c:	0005883a 	mov	r2,zero
    2210:	f800283a 	ret
    2214:	00802584 	movi	r2,150
    2218:	1145c83a 	sub	r2,r2,r5
    221c:	1884d83a 	srl	r2,r3,r2
    2220:	003ff306 	br	21f0 <__alt_mem_epcs+0xfffe11f0>

00002224 <__floatunsisf>:
    2224:	defffe04 	addi	sp,sp,-8
    2228:	dfc00115 	stw	ra,4(sp)
    222c:	dc000015 	stw	r16,0(sp)
    2230:	20002c26 	beq	r4,zero,22e4 <__floatunsisf+0xc0>
    2234:	2021883a 	mov	r16,r4
    2238:	000363c0 	call	363c <__clzsi2>
    223c:	00c02784 	movi	r3,158
    2240:	1887c83a 	sub	r3,r3,r2
    2244:	01002584 	movi	r4,150
    2248:	20c00f16 	blt	r4,r3,2288 <__floatunsisf+0x64>
    224c:	20c9c83a 	sub	r4,r4,r3
    2250:	8108983a 	sll	r4,r16,r4
    2254:	00802034 	movhi	r2,128
    2258:	10bfffc4 	addi	r2,r2,-1
    225c:	2088703a 	and	r4,r4,r2
    2260:	18803fcc 	andi	r2,r3,255
    2264:	100695fa 	slli	r3,r2,23
    2268:	00802034 	movhi	r2,128
    226c:	10bfffc4 	addi	r2,r2,-1
    2270:	2084703a 	and	r2,r4,r2
    2274:	10c4b03a 	or	r2,r2,r3
    2278:	dfc00117 	ldw	ra,4(sp)
    227c:	dc000017 	ldw	r16,0(sp)
    2280:	dec00204 	addi	sp,sp,8
    2284:	f800283a 	ret
    2288:	01002644 	movi	r4,153
    228c:	20c01816 	blt	r4,r3,22f0 <__floatunsisf+0xcc>
    2290:	20c9c83a 	sub	r4,r4,r3
    2294:	8108983a 	sll	r4,r16,r4
    2298:	017f0034 	movhi	r5,64512
    229c:	297fffc4 	addi	r5,r5,-1
    22a0:	218001cc 	andi	r6,r4,7
    22a4:	214a703a 	and	r5,r4,r5
    22a8:	30000426 	beq	r6,zero,22bc <__floatunsisf+0x98>
    22ac:	210003cc 	andi	r4,r4,15
    22b0:	01800104 	movi	r6,4
    22b4:	21800126 	beq	r4,r6,22bc <__floatunsisf+0x98>
    22b8:	298b883a 	add	r5,r5,r6
    22bc:	2901002c 	andhi	r4,r5,1024
    22c0:	20000526 	beq	r4,zero,22d8 <__floatunsisf+0xb4>
    22c4:	00c027c4 	movi	r3,159
    22c8:	1887c83a 	sub	r3,r3,r2
    22cc:	00bf0034 	movhi	r2,64512
    22d0:	10bfffc4 	addi	r2,r2,-1
    22d4:	288a703a 	and	r5,r5,r2
    22d8:	280891ba 	slli	r4,r5,6
    22dc:	2008d27a 	srli	r4,r4,9
    22e0:	003fdf06 	br	2260 <__alt_mem_epcs+0xfffe1260>
    22e4:	0007883a 	mov	r3,zero
    22e8:	0009883a 	mov	r4,zero
    22ec:	003fdc06 	br	2260 <__alt_mem_epcs+0xfffe1260>
    22f0:	01402e44 	movi	r5,185
    22f4:	28cbc83a 	sub	r5,r5,r3
    22f8:	01000144 	movi	r4,5
    22fc:	2089c83a 	sub	r4,r4,r2
    2300:	814a983a 	sll	r5,r16,r5
    2304:	8108d83a 	srl	r4,r16,r4
    2308:	2820c03a 	cmpne	r16,r5,zero
    230c:	2408b03a 	or	r4,r4,r16
    2310:	003fe106 	br	2298 <__alt_mem_epcs+0xfffe1298>

00002314 <__gedf2>:
    2314:	2804d53a 	srli	r2,r5,20
    2318:	3806d53a 	srli	r3,r7,20
    231c:	02000434 	movhi	r8,16
    2320:	423fffc4 	addi	r8,r8,-1
    2324:	1081ffcc 	andi	r2,r2,2047
    2328:	0241ffc4 	movi	r9,2047
    232c:	2a14703a 	and	r10,r5,r8
    2330:	18c1ffcc 	andi	r3,r3,2047
    2334:	3a10703a 	and	r8,r7,r8
    2338:	280ad7fa 	srli	r5,r5,31
    233c:	380ed7fa 	srli	r7,r7,31
    2340:	12401d26 	beq	r2,r9,23b8 <__gedf2+0xa4>
    2344:	0241ffc4 	movi	r9,2047
    2348:	1a401226 	beq	r3,r9,2394 <__gedf2+0x80>
    234c:	1000081e 	bne	r2,zero,2370 <__gedf2+0x5c>
    2350:	2296b03a 	or	r11,r4,r10
    2354:	5813003a 	cmpeq	r9,r11,zero
    2358:	1800091e 	bne	r3,zero,2380 <__gedf2+0x6c>
    235c:	3218b03a 	or	r12,r6,r8
    2360:	6000071e 	bne	r12,zero,2380 <__gedf2+0x6c>
    2364:	0005883a 	mov	r2,zero
    2368:	5800101e 	bne	r11,zero,23ac <__gedf2+0x98>
    236c:	f800283a 	ret
    2370:	18000c1e 	bne	r3,zero,23a4 <__gedf2+0x90>
    2374:	3212b03a 	or	r9,r6,r8
    2378:	48000c26 	beq	r9,zero,23ac <__gedf2+0x98>
    237c:	0013883a 	mov	r9,zero
    2380:	39c03fcc 	andi	r7,r7,255
    2384:	48000826 	beq	r9,zero,23a8 <__gedf2+0x94>
    2388:	38000926 	beq	r7,zero,23b0 <__gedf2+0x9c>
    238c:	00800044 	movi	r2,1
    2390:	f800283a 	ret
    2394:	3212b03a 	or	r9,r6,r8
    2398:	483fec26 	beq	r9,zero,234c <__alt_mem_epcs+0xfffe134c>
    239c:	00bfff84 	movi	r2,-2
    23a0:	f800283a 	ret
    23a4:	39c03fcc 	andi	r7,r7,255
    23a8:	29c00626 	beq	r5,r7,23c4 <__gedf2+0xb0>
    23ac:	283ff726 	beq	r5,zero,238c <__alt_mem_epcs+0xfffe138c>
    23b0:	00bfffc4 	movi	r2,-1
    23b4:	f800283a 	ret
    23b8:	2292b03a 	or	r9,r4,r10
    23bc:	483fe126 	beq	r9,zero,2344 <__alt_mem_epcs+0xfffe1344>
    23c0:	003ff606 	br	239c <__alt_mem_epcs+0xfffe139c>
    23c4:	18bff916 	blt	r3,r2,23ac <__alt_mem_epcs+0xfffe13ac>
    23c8:	10c00316 	blt	r2,r3,23d8 <__gedf2+0xc4>
    23cc:	42bff736 	bltu	r8,r10,23ac <__alt_mem_epcs+0xfffe13ac>
    23d0:	52000326 	beq	r10,r8,23e0 <__gedf2+0xcc>
    23d4:	5200042e 	bgeu	r10,r8,23e8 <__gedf2+0xd4>
    23d8:	283fec1e 	bne	r5,zero,238c <__alt_mem_epcs+0xfffe138c>
    23dc:	003ff406 	br	23b0 <__alt_mem_epcs+0xfffe13b0>
    23e0:	313ff236 	bltu	r6,r4,23ac <__alt_mem_epcs+0xfffe13ac>
    23e4:	21bffc36 	bltu	r4,r6,23d8 <__alt_mem_epcs+0xfffe13d8>
    23e8:	0005883a 	mov	r2,zero
    23ec:	f800283a 	ret

000023f0 <__muldf3>:
    23f0:	defff304 	addi	sp,sp,-52
    23f4:	2804d53a 	srli	r2,r5,20
    23f8:	dd800915 	stw	r22,36(sp)
    23fc:	282cd7fa 	srli	r22,r5,31
    2400:	dc000315 	stw	r16,12(sp)
    2404:	04000434 	movhi	r16,16
    2408:	dd400815 	stw	r21,32(sp)
    240c:	dc800515 	stw	r18,20(sp)
    2410:	843fffc4 	addi	r16,r16,-1
    2414:	dfc00c15 	stw	ra,48(sp)
    2418:	df000b15 	stw	fp,44(sp)
    241c:	ddc00a15 	stw	r23,40(sp)
    2420:	dd000715 	stw	r20,28(sp)
    2424:	dcc00615 	stw	r19,24(sp)
    2428:	dc400415 	stw	r17,16(sp)
    242c:	1481ffcc 	andi	r18,r2,2047
    2430:	2c20703a 	and	r16,r5,r16
    2434:	b02b883a 	mov	r21,r22
    2438:	b2403fcc 	andi	r9,r22,255
    243c:	90006026 	beq	r18,zero,25c0 <__muldf3+0x1d0>
    2440:	0081ffc4 	movi	r2,2047
    2444:	2029883a 	mov	r20,r4
    2448:	90803626 	beq	r18,r2,2524 <__muldf3+0x134>
    244c:	80800434 	orhi	r2,r16,16
    2450:	100490fa 	slli	r2,r2,3
    2454:	2020d77a 	srli	r16,r4,29
    2458:	202890fa 	slli	r20,r4,3
    245c:	94bf0044 	addi	r18,r18,-1023
    2460:	80a0b03a 	or	r16,r16,r2
    2464:	0027883a 	mov	r19,zero
    2468:	0039883a 	mov	fp,zero
    246c:	3804d53a 	srli	r2,r7,20
    2470:	382ed7fa 	srli	r23,r7,31
    2474:	04400434 	movhi	r17,16
    2478:	8c7fffc4 	addi	r17,r17,-1
    247c:	1081ffcc 	andi	r2,r2,2047
    2480:	3011883a 	mov	r8,r6
    2484:	3c62703a 	and	r17,r7,r17
    2488:	ba803fcc 	andi	r10,r23,255
    248c:	10006d26 	beq	r2,zero,2644 <__muldf3+0x254>
    2490:	00c1ffc4 	movi	r3,2047
    2494:	10c06526 	beq	r2,r3,262c <__muldf3+0x23c>
    2498:	88c00434 	orhi	r3,r17,16
    249c:	180690fa 	slli	r3,r3,3
    24a0:	3022d77a 	srli	r17,r6,29
    24a4:	301090fa 	slli	r8,r6,3
    24a8:	10bf0044 	addi	r2,r2,-1023
    24ac:	88e2b03a 	or	r17,r17,r3
    24b0:	000b883a 	mov	r5,zero
    24b4:	9085883a 	add	r2,r18,r2
    24b8:	2cc8b03a 	or	r4,r5,r19
    24bc:	00c003c4 	movi	r3,15
    24c0:	bdacf03a 	xor	r22,r23,r22
    24c4:	12c00044 	addi	r11,r2,1
    24c8:	19009936 	bltu	r3,r4,2730 <__muldf3+0x340>
    24cc:	200890ba 	slli	r4,r4,2
    24d0:	00c00034 	movhi	r3,0
    24d4:	18c93904 	addi	r3,r3,9444
    24d8:	20c9883a 	add	r4,r4,r3
    24dc:	20c00017 	ldw	r3,0(r4)
    24e0:	1800683a 	jmp	r3
    24e4:	00002730 	cmpltui	zero,zero,156
    24e8:	00002544 	movi	zero,149
    24ec:	00002544 	movi	zero,149
    24f0:	00002540 	call	254 <ExpandKey+0x30>
    24f4:	0000270c 	andi	zero,zero,156
    24f8:	0000270c 	andi	zero,zero,156
    24fc:	000026f4 	movhi	zero,155
    2500:	00002540 	call	254 <ExpandKey+0x30>
    2504:	0000270c 	andi	zero,zero,156
    2508:	000026f4 	movhi	zero,155
    250c:	0000270c 	andi	zero,zero,156
    2510:	00002540 	call	254 <ExpandKey+0x30>
    2514:	0000271c 	xori	zero,zero,156
    2518:	0000271c 	xori	zero,zero,156
    251c:	0000271c 	xori	zero,zero,156
    2520:	00002938 	rdprs	zero,zero,164
    2524:	2404b03a 	or	r2,r4,r16
    2528:	10006f1e 	bne	r2,zero,26e8 <__muldf3+0x2f8>
    252c:	04c00204 	movi	r19,8
    2530:	0021883a 	mov	r16,zero
    2534:	0029883a 	mov	r20,zero
    2538:	07000084 	movi	fp,2
    253c:	003fcb06 	br	246c <__alt_mem_epcs+0xfffe146c>
    2540:	502d883a 	mov	r22,r10
    2544:	00800084 	movi	r2,2
    2548:	28805726 	beq	r5,r2,26a8 <__muldf3+0x2b8>
    254c:	008000c4 	movi	r2,3
    2550:	28816626 	beq	r5,r2,2aec <__muldf3+0x6fc>
    2554:	00800044 	movi	r2,1
    2558:	2881411e 	bne	r5,r2,2a60 <__muldf3+0x670>
    255c:	b02b883a 	mov	r21,r22
    2560:	0005883a 	mov	r2,zero
    2564:	000b883a 	mov	r5,zero
    2568:	0029883a 	mov	r20,zero
    256c:	1004953a 	slli	r2,r2,20
    2570:	a8c03fcc 	andi	r3,r21,255
    2574:	04400434 	movhi	r17,16
    2578:	8c7fffc4 	addi	r17,r17,-1
    257c:	180697fa 	slli	r3,r3,31
    2580:	2c4a703a 	and	r5,r5,r17
    2584:	288ab03a 	or	r5,r5,r2
    2588:	28c6b03a 	or	r3,r5,r3
    258c:	a005883a 	mov	r2,r20
    2590:	dfc00c17 	ldw	ra,48(sp)
    2594:	df000b17 	ldw	fp,44(sp)
    2598:	ddc00a17 	ldw	r23,40(sp)
    259c:	dd800917 	ldw	r22,36(sp)
    25a0:	dd400817 	ldw	r21,32(sp)
    25a4:	dd000717 	ldw	r20,28(sp)
    25a8:	dcc00617 	ldw	r19,24(sp)
    25ac:	dc800517 	ldw	r18,20(sp)
    25b0:	dc400417 	ldw	r17,16(sp)
    25b4:	dc000317 	ldw	r16,12(sp)
    25b8:	dec00d04 	addi	sp,sp,52
    25bc:	f800283a 	ret
    25c0:	2404b03a 	or	r2,r4,r16
    25c4:	2027883a 	mov	r19,r4
    25c8:	10004226 	beq	r2,zero,26d4 <__muldf3+0x2e4>
    25cc:	8000fc26 	beq	r16,zero,29c0 <__muldf3+0x5d0>
    25d0:	8009883a 	mov	r4,r16
    25d4:	d9800215 	stw	r6,8(sp)
    25d8:	d9c00015 	stw	r7,0(sp)
    25dc:	da400115 	stw	r9,4(sp)
    25e0:	000363c0 	call	363c <__clzsi2>
    25e4:	d9800217 	ldw	r6,8(sp)
    25e8:	d9c00017 	ldw	r7,0(sp)
    25ec:	da400117 	ldw	r9,4(sp)
    25f0:	113ffd44 	addi	r4,r2,-11
    25f4:	00c00704 	movi	r3,28
    25f8:	1900ed16 	blt	r3,r4,29b0 <__muldf3+0x5c0>
    25fc:	00c00744 	movi	r3,29
    2600:	147ffe04 	addi	r17,r2,-8
    2604:	1907c83a 	sub	r3,r3,r4
    2608:	8460983a 	sll	r16,r16,r17
    260c:	98c6d83a 	srl	r3,r19,r3
    2610:	9c68983a 	sll	r20,r19,r17
    2614:	1c20b03a 	or	r16,r3,r16
    2618:	1080fcc4 	addi	r2,r2,1011
    261c:	00a5c83a 	sub	r18,zero,r2
    2620:	0027883a 	mov	r19,zero
    2624:	0039883a 	mov	fp,zero
    2628:	003f9006 	br	246c <__alt_mem_epcs+0xfffe146c>
    262c:	3446b03a 	or	r3,r6,r17
    2630:	1800261e 	bne	r3,zero,26cc <__muldf3+0x2dc>
    2634:	0023883a 	mov	r17,zero
    2638:	0011883a 	mov	r8,zero
    263c:	01400084 	movi	r5,2
    2640:	003f9c06 	br	24b4 <__alt_mem_epcs+0xfffe14b4>
    2644:	3446b03a 	or	r3,r6,r17
    2648:	18001c26 	beq	r3,zero,26bc <__muldf3+0x2cc>
    264c:	8800ce26 	beq	r17,zero,2988 <__muldf3+0x598>
    2650:	8809883a 	mov	r4,r17
    2654:	d9800215 	stw	r6,8(sp)
    2658:	da400115 	stw	r9,4(sp)
    265c:	da800015 	stw	r10,0(sp)
    2660:	000363c0 	call	363c <__clzsi2>
    2664:	d9800217 	ldw	r6,8(sp)
    2668:	da400117 	ldw	r9,4(sp)
    266c:	da800017 	ldw	r10,0(sp)
    2670:	113ffd44 	addi	r4,r2,-11
    2674:	00c00704 	movi	r3,28
    2678:	1900bf16 	blt	r3,r4,2978 <__muldf3+0x588>
    267c:	00c00744 	movi	r3,29
    2680:	123ffe04 	addi	r8,r2,-8
    2684:	1907c83a 	sub	r3,r3,r4
    2688:	8a22983a 	sll	r17,r17,r8
    268c:	30c6d83a 	srl	r3,r6,r3
    2690:	3210983a 	sll	r8,r6,r8
    2694:	1c62b03a 	or	r17,r3,r17
    2698:	1080fcc4 	addi	r2,r2,1011
    269c:	0085c83a 	sub	r2,zero,r2
    26a0:	000b883a 	mov	r5,zero
    26a4:	003f8306 	br	24b4 <__alt_mem_epcs+0xfffe14b4>
    26a8:	b02b883a 	mov	r21,r22
    26ac:	0081ffc4 	movi	r2,2047
    26b0:	000b883a 	mov	r5,zero
    26b4:	0029883a 	mov	r20,zero
    26b8:	003fac06 	br	256c <__alt_mem_epcs+0xfffe156c>
    26bc:	0023883a 	mov	r17,zero
    26c0:	0011883a 	mov	r8,zero
    26c4:	01400044 	movi	r5,1
    26c8:	003f7a06 	br	24b4 <__alt_mem_epcs+0xfffe14b4>
    26cc:	014000c4 	movi	r5,3
    26d0:	003f7806 	br	24b4 <__alt_mem_epcs+0xfffe14b4>
    26d4:	04c00104 	movi	r19,4
    26d8:	0021883a 	mov	r16,zero
    26dc:	0029883a 	mov	r20,zero
    26e0:	07000044 	movi	fp,1
    26e4:	003f6106 	br	246c <__alt_mem_epcs+0xfffe146c>
    26e8:	04c00304 	movi	r19,12
    26ec:	070000c4 	movi	fp,3
    26f0:	003f5e06 	br	246c <__alt_mem_epcs+0xfffe146c>
    26f4:	01400434 	movhi	r5,16
    26f8:	002b883a 	mov	r21,zero
    26fc:	297fffc4 	addi	r5,r5,-1
    2700:	053fffc4 	movi	r20,-1
    2704:	0081ffc4 	movi	r2,2047
    2708:	003f9806 	br	256c <__alt_mem_epcs+0xfffe156c>
    270c:	8023883a 	mov	r17,r16
    2710:	a011883a 	mov	r8,r20
    2714:	e00b883a 	mov	r5,fp
    2718:	003f8a06 	br	2544 <__alt_mem_epcs+0xfffe1544>
    271c:	8023883a 	mov	r17,r16
    2720:	a011883a 	mov	r8,r20
    2724:	482d883a 	mov	r22,r9
    2728:	e00b883a 	mov	r5,fp
    272c:	003f8506 	br	2544 <__alt_mem_epcs+0xfffe1544>
    2730:	a00ad43a 	srli	r5,r20,16
    2734:	401ad43a 	srli	r13,r8,16
    2738:	a53fffcc 	andi	r20,r20,65535
    273c:	423fffcc 	andi	r8,r8,65535
    2740:	4519383a 	mul	r12,r8,r20
    2744:	4147383a 	mul	r3,r8,r5
    2748:	6d09383a 	mul	r4,r13,r20
    274c:	600cd43a 	srli	r6,r12,16
    2750:	2b5d383a 	mul	r14,r5,r13
    2754:	20c9883a 	add	r4,r4,r3
    2758:	310d883a 	add	r6,r6,r4
    275c:	30c0022e 	bgeu	r6,r3,2768 <__muldf3+0x378>
    2760:	00c00074 	movhi	r3,1
    2764:	70dd883a 	add	r14,r14,r3
    2768:	8826d43a 	srli	r19,r17,16
    276c:	8bffffcc 	andi	r15,r17,65535
    2770:	7d23383a 	mul	r17,r15,r20
    2774:	7949383a 	mul	r4,r15,r5
    2778:	9d29383a 	mul	r20,r19,r20
    277c:	8814d43a 	srli	r10,r17,16
    2780:	3012943a 	slli	r9,r6,16
    2784:	a129883a 	add	r20,r20,r4
    2788:	633fffcc 	andi	r12,r12,65535
    278c:	5515883a 	add	r10,r10,r20
    2790:	3006d43a 	srli	r3,r6,16
    2794:	4b13883a 	add	r9,r9,r12
    2798:	2ccb383a 	mul	r5,r5,r19
    279c:	5100022e 	bgeu	r10,r4,27a8 <__muldf3+0x3b8>
    27a0:	01000074 	movhi	r4,1
    27a4:	290b883a 	add	r5,r5,r4
    27a8:	802ad43a 	srli	r21,r16,16
    27ac:	843fffcc 	andi	r16,r16,65535
    27b0:	440d383a 	mul	r6,r8,r16
    27b4:	4565383a 	mul	r18,r8,r21
    27b8:	8349383a 	mul	r4,r16,r13
    27bc:	500e943a 	slli	r7,r10,16
    27c0:	3010d43a 	srli	r8,r6,16
    27c4:	5028d43a 	srli	r20,r10,16
    27c8:	2489883a 	add	r4,r4,r18
    27cc:	8abfffcc 	andi	r10,r17,65535
    27d0:	3a95883a 	add	r10,r7,r10
    27d4:	4119883a 	add	r12,r8,r4
    27d8:	a169883a 	add	r20,r20,r5
    27dc:	1a87883a 	add	r3,r3,r10
    27e0:	6d5b383a 	mul	r13,r13,r21
    27e4:	6480022e 	bgeu	r12,r18,27f0 <__muldf3+0x400>
    27e8:	01000074 	movhi	r4,1
    27ec:	691b883a 	add	r13,r13,r4
    27f0:	7c25383a 	mul	r18,r15,r16
    27f4:	7d4b383a 	mul	r5,r15,r21
    27f8:	84cf383a 	mul	r7,r16,r19
    27fc:	901ed43a 	srli	r15,r18,16
    2800:	6008d43a 	srli	r4,r12,16
    2804:	6010943a 	slli	r8,r12,16
    2808:	394f883a 	add	r7,r7,r5
    280c:	333fffcc 	andi	r12,r6,65535
    2810:	79df883a 	add	r15,r15,r7
    2814:	235b883a 	add	r13,r4,r13
    2818:	9d63383a 	mul	r17,r19,r21
    281c:	4309883a 	add	r4,r8,r12
    2820:	7940022e 	bgeu	r15,r5,282c <__muldf3+0x43c>
    2824:	01400074 	movhi	r5,1
    2828:	8963883a 	add	r17,r17,r5
    282c:	780a943a 	slli	r5,r15,16
    2830:	91bfffcc 	andi	r6,r18,65535
    2834:	70c7883a 	add	r3,r14,r3
    2838:	298d883a 	add	r6,r5,r6
    283c:	1a8f803a 	cmpltu	r7,r3,r10
    2840:	350b883a 	add	r5,r6,r20
    2844:	20c7883a 	add	r3,r4,r3
    2848:	3955883a 	add	r10,r7,r5
    284c:	1909803a 	cmpltu	r4,r3,r4
    2850:	6a91883a 	add	r8,r13,r10
    2854:	780cd43a 	srli	r6,r15,16
    2858:	2219883a 	add	r12,r4,r8
    285c:	2d0b803a 	cmpltu	r5,r5,r20
    2860:	51cf803a 	cmpltu	r7,r10,r7
    2864:	29ceb03a 	or	r7,r5,r7
    2868:	4351803a 	cmpltu	r8,r8,r13
    286c:	610b803a 	cmpltu	r5,r12,r4
    2870:	4148b03a 	or	r4,r8,r5
    2874:	398f883a 	add	r7,r7,r6
    2878:	3909883a 	add	r4,r7,r4
    287c:	1810927a 	slli	r8,r3,9
    2880:	2449883a 	add	r4,r4,r17
    2884:	2008927a 	slli	r4,r4,9
    2888:	6022d5fa 	srli	r17,r12,23
    288c:	1806d5fa 	srli	r3,r3,23
    2890:	4252b03a 	or	r9,r8,r9
    2894:	600a927a 	slli	r5,r12,9
    2898:	4810c03a 	cmpne	r8,r9,zero
    289c:	2462b03a 	or	r17,r4,r17
    28a0:	40c6b03a 	or	r3,r8,r3
    28a4:	8900402c 	andhi	r4,r17,256
    28a8:	1950b03a 	or	r8,r3,r5
    28ac:	20000726 	beq	r4,zero,28cc <__muldf3+0x4dc>
    28b0:	4006d07a 	srli	r3,r8,1
    28b4:	880497fa 	slli	r2,r17,31
    28b8:	4200004c 	andi	r8,r8,1
    28bc:	8822d07a 	srli	r17,r17,1
    28c0:	1a10b03a 	or	r8,r3,r8
    28c4:	1210b03a 	or	r8,r2,r8
    28c8:	5805883a 	mov	r2,r11
    28cc:	1140ffc4 	addi	r5,r2,1023
    28d0:	0140440e 	bge	zero,r5,29e4 <__muldf3+0x5f4>
    28d4:	40c001cc 	andi	r3,r8,7
    28d8:	18000726 	beq	r3,zero,28f8 <__muldf3+0x508>
    28dc:	40c003cc 	andi	r3,r8,15
    28e0:	01000104 	movi	r4,4
    28e4:	19000426 	beq	r3,r4,28f8 <__muldf3+0x508>
    28e8:	4107883a 	add	r3,r8,r4
    28ec:	1a11803a 	cmpltu	r8,r3,r8
    28f0:	8a23883a 	add	r17,r17,r8
    28f4:	1811883a 	mov	r8,r3
    28f8:	88c0402c 	andhi	r3,r17,256
    28fc:	18000426 	beq	r3,zero,2910 <__muldf3+0x520>
    2900:	11410004 	addi	r5,r2,1024
    2904:	00bfc034 	movhi	r2,65280
    2908:	10bfffc4 	addi	r2,r2,-1
    290c:	88a2703a 	and	r17,r17,r2
    2910:	0081ff84 	movi	r2,2046
    2914:	117f6416 	blt	r2,r5,26a8 <__alt_mem_epcs+0xfffe16a8>
    2918:	8828977a 	slli	r20,r17,29
    291c:	4010d0fa 	srli	r8,r8,3
    2920:	8822927a 	slli	r17,r17,9
    2924:	2881ffcc 	andi	r2,r5,2047
    2928:	a228b03a 	or	r20,r20,r8
    292c:	880ad33a 	srli	r5,r17,12
    2930:	b02b883a 	mov	r21,r22
    2934:	003f0d06 	br	256c <__alt_mem_epcs+0xfffe156c>
    2938:	8080022c 	andhi	r2,r16,8
    293c:	10000926 	beq	r2,zero,2964 <__muldf3+0x574>
    2940:	8880022c 	andhi	r2,r17,8
    2944:	1000071e 	bne	r2,zero,2964 <__muldf3+0x574>
    2948:	00800434 	movhi	r2,16
    294c:	89400234 	orhi	r5,r17,8
    2950:	10bfffc4 	addi	r2,r2,-1
    2954:	b82b883a 	mov	r21,r23
    2958:	288a703a 	and	r5,r5,r2
    295c:	4029883a 	mov	r20,r8
    2960:	003f6806 	br	2704 <__alt_mem_epcs+0xfffe1704>
    2964:	00800434 	movhi	r2,16
    2968:	81400234 	orhi	r5,r16,8
    296c:	10bfffc4 	addi	r2,r2,-1
    2970:	288a703a 	and	r5,r5,r2
    2974:	003f6306 	br	2704 <__alt_mem_epcs+0xfffe1704>
    2978:	147ff604 	addi	r17,r2,-40
    297c:	3462983a 	sll	r17,r6,r17
    2980:	0011883a 	mov	r8,zero
    2984:	003f4406 	br	2698 <__alt_mem_epcs+0xfffe1698>
    2988:	3009883a 	mov	r4,r6
    298c:	d9800215 	stw	r6,8(sp)
    2990:	da400115 	stw	r9,4(sp)
    2994:	da800015 	stw	r10,0(sp)
    2998:	000363c0 	call	363c <__clzsi2>
    299c:	10800804 	addi	r2,r2,32
    29a0:	da800017 	ldw	r10,0(sp)
    29a4:	da400117 	ldw	r9,4(sp)
    29a8:	d9800217 	ldw	r6,8(sp)
    29ac:	003f3006 	br	2670 <__alt_mem_epcs+0xfffe1670>
    29b0:	143ff604 	addi	r16,r2,-40
    29b4:	9c20983a 	sll	r16,r19,r16
    29b8:	0029883a 	mov	r20,zero
    29bc:	003f1606 	br	2618 <__alt_mem_epcs+0xfffe1618>
    29c0:	d9800215 	stw	r6,8(sp)
    29c4:	d9c00015 	stw	r7,0(sp)
    29c8:	da400115 	stw	r9,4(sp)
    29cc:	000363c0 	call	363c <__clzsi2>
    29d0:	10800804 	addi	r2,r2,32
    29d4:	da400117 	ldw	r9,4(sp)
    29d8:	d9c00017 	ldw	r7,0(sp)
    29dc:	d9800217 	ldw	r6,8(sp)
    29e0:	003f0306 	br	25f0 <__alt_mem_epcs+0xfffe15f0>
    29e4:	00c00044 	movi	r3,1
    29e8:	1947c83a 	sub	r3,r3,r5
    29ec:	00800e04 	movi	r2,56
    29f0:	10feda16 	blt	r2,r3,255c <__alt_mem_epcs+0xfffe155c>
    29f4:	008007c4 	movi	r2,31
    29f8:	10c01b16 	blt	r2,r3,2a68 <__muldf3+0x678>
    29fc:	00800804 	movi	r2,32
    2a00:	10c5c83a 	sub	r2,r2,r3
    2a04:	888a983a 	sll	r5,r17,r2
    2a08:	40c8d83a 	srl	r4,r8,r3
    2a0c:	4084983a 	sll	r2,r8,r2
    2a10:	88e2d83a 	srl	r17,r17,r3
    2a14:	2906b03a 	or	r3,r5,r4
    2a18:	1004c03a 	cmpne	r2,r2,zero
    2a1c:	1886b03a 	or	r3,r3,r2
    2a20:	188001cc 	andi	r2,r3,7
    2a24:	10000726 	beq	r2,zero,2a44 <__muldf3+0x654>
    2a28:	188003cc 	andi	r2,r3,15
    2a2c:	01000104 	movi	r4,4
    2a30:	11000426 	beq	r2,r4,2a44 <__muldf3+0x654>
    2a34:	1805883a 	mov	r2,r3
    2a38:	10c00104 	addi	r3,r2,4
    2a3c:	1885803a 	cmpltu	r2,r3,r2
    2a40:	88a3883a 	add	r17,r17,r2
    2a44:	8880202c 	andhi	r2,r17,128
    2a48:	10001c26 	beq	r2,zero,2abc <__muldf3+0x6cc>
    2a4c:	b02b883a 	mov	r21,r22
    2a50:	00800044 	movi	r2,1
    2a54:	000b883a 	mov	r5,zero
    2a58:	0029883a 	mov	r20,zero
    2a5c:	003ec306 	br	256c <__alt_mem_epcs+0xfffe156c>
    2a60:	5805883a 	mov	r2,r11
    2a64:	003f9906 	br	28cc <__alt_mem_epcs+0xfffe18cc>
    2a68:	00bff844 	movi	r2,-31
    2a6c:	1145c83a 	sub	r2,r2,r5
    2a70:	8888d83a 	srl	r4,r17,r2
    2a74:	00800804 	movi	r2,32
    2a78:	18801a26 	beq	r3,r2,2ae4 <__muldf3+0x6f4>
    2a7c:	00801004 	movi	r2,64
    2a80:	10c5c83a 	sub	r2,r2,r3
    2a84:	8884983a 	sll	r2,r17,r2
    2a88:	1204b03a 	or	r2,r2,r8
    2a8c:	1004c03a 	cmpne	r2,r2,zero
    2a90:	2084b03a 	or	r2,r4,r2
    2a94:	144001cc 	andi	r17,r2,7
    2a98:	88000d1e 	bne	r17,zero,2ad0 <__muldf3+0x6e0>
    2a9c:	000b883a 	mov	r5,zero
    2aa0:	1028d0fa 	srli	r20,r2,3
    2aa4:	b02b883a 	mov	r21,r22
    2aa8:	0005883a 	mov	r2,zero
    2aac:	a468b03a 	or	r20,r20,r17
    2ab0:	003eae06 	br	256c <__alt_mem_epcs+0xfffe156c>
    2ab4:	1007883a 	mov	r3,r2
    2ab8:	0023883a 	mov	r17,zero
    2abc:	880a927a 	slli	r5,r17,9
    2ac0:	1805883a 	mov	r2,r3
    2ac4:	8822977a 	slli	r17,r17,29
    2ac8:	280ad33a 	srli	r5,r5,12
    2acc:	003ff406 	br	2aa0 <__alt_mem_epcs+0xfffe1aa0>
    2ad0:	10c003cc 	andi	r3,r2,15
    2ad4:	01000104 	movi	r4,4
    2ad8:	193ff626 	beq	r3,r4,2ab4 <__alt_mem_epcs+0xfffe1ab4>
    2adc:	0023883a 	mov	r17,zero
    2ae0:	003fd506 	br	2a38 <__alt_mem_epcs+0xfffe1a38>
    2ae4:	0005883a 	mov	r2,zero
    2ae8:	003fe706 	br	2a88 <__alt_mem_epcs+0xfffe1a88>
    2aec:	00800434 	movhi	r2,16
    2af0:	89400234 	orhi	r5,r17,8
    2af4:	10bfffc4 	addi	r2,r2,-1
    2af8:	b02b883a 	mov	r21,r22
    2afc:	288a703a 	and	r5,r5,r2
    2b00:	4029883a 	mov	r20,r8
    2b04:	003eff06 	br	2704 <__alt_mem_epcs+0xfffe1704>

00002b08 <__subdf3>:
    2b08:	02000434 	movhi	r8,16
    2b0c:	423fffc4 	addi	r8,r8,-1
    2b10:	defffb04 	addi	sp,sp,-20
    2b14:	2a14703a 	and	r10,r5,r8
    2b18:	3812d53a 	srli	r9,r7,20
    2b1c:	3a10703a 	and	r8,r7,r8
    2b20:	2006d77a 	srli	r3,r4,29
    2b24:	3004d77a 	srli	r2,r6,29
    2b28:	dc000015 	stw	r16,0(sp)
    2b2c:	501490fa 	slli	r10,r10,3
    2b30:	2820d53a 	srli	r16,r5,20
    2b34:	401090fa 	slli	r8,r8,3
    2b38:	dc800215 	stw	r18,8(sp)
    2b3c:	dc400115 	stw	r17,4(sp)
    2b40:	dfc00415 	stw	ra,16(sp)
    2b44:	202290fa 	slli	r17,r4,3
    2b48:	dcc00315 	stw	r19,12(sp)
    2b4c:	4a41ffcc 	andi	r9,r9,2047
    2b50:	0101ffc4 	movi	r4,2047
    2b54:	2824d7fa 	srli	r18,r5,31
    2b58:	8401ffcc 	andi	r16,r16,2047
    2b5c:	50c6b03a 	or	r3,r10,r3
    2b60:	380ed7fa 	srli	r7,r7,31
    2b64:	408ab03a 	or	r5,r8,r2
    2b68:	300c90fa 	slli	r6,r6,3
    2b6c:	49009626 	beq	r9,r4,2dc8 <__subdf3+0x2c0>
    2b70:	39c0005c 	xori	r7,r7,1
    2b74:	8245c83a 	sub	r2,r16,r9
    2b78:	3c807426 	beq	r7,r18,2d4c <__subdf3+0x244>
    2b7c:	0080af0e 	bge	zero,r2,2e3c <__subdf3+0x334>
    2b80:	48002a1e 	bne	r9,zero,2c2c <__subdf3+0x124>
    2b84:	2988b03a 	or	r4,r5,r6
    2b88:	20009a1e 	bne	r4,zero,2df4 <__subdf3+0x2ec>
    2b8c:	888001cc 	andi	r2,r17,7
    2b90:	10000726 	beq	r2,zero,2bb0 <__subdf3+0xa8>
    2b94:	888003cc 	andi	r2,r17,15
    2b98:	01000104 	movi	r4,4
    2b9c:	11000426 	beq	r2,r4,2bb0 <__subdf3+0xa8>
    2ba0:	890b883a 	add	r5,r17,r4
    2ba4:	2c63803a 	cmpltu	r17,r5,r17
    2ba8:	1c47883a 	add	r3,r3,r17
    2bac:	2823883a 	mov	r17,r5
    2bb0:	1880202c 	andhi	r2,r3,128
    2bb4:	10005926 	beq	r2,zero,2d1c <__subdf3+0x214>
    2bb8:	84000044 	addi	r16,r16,1
    2bbc:	0081ffc4 	movi	r2,2047
    2bc0:	8080be26 	beq	r16,r2,2ebc <__subdf3+0x3b4>
    2bc4:	017fe034 	movhi	r5,65408
    2bc8:	297fffc4 	addi	r5,r5,-1
    2bcc:	1946703a 	and	r3,r3,r5
    2bd0:	1804977a 	slli	r2,r3,29
    2bd4:	1806927a 	slli	r3,r3,9
    2bd8:	8822d0fa 	srli	r17,r17,3
    2bdc:	8401ffcc 	andi	r16,r16,2047
    2be0:	180ad33a 	srli	r5,r3,12
    2be4:	9100004c 	andi	r4,r18,1
    2be8:	1444b03a 	or	r2,r2,r17
    2bec:	80c1ffcc 	andi	r3,r16,2047
    2bf0:	1820953a 	slli	r16,r3,20
    2bf4:	20c03fcc 	andi	r3,r4,255
    2bf8:	180897fa 	slli	r4,r3,31
    2bfc:	00c00434 	movhi	r3,16
    2c00:	18ffffc4 	addi	r3,r3,-1
    2c04:	28c6703a 	and	r3,r5,r3
    2c08:	1c06b03a 	or	r3,r3,r16
    2c0c:	1906b03a 	or	r3,r3,r4
    2c10:	dfc00417 	ldw	ra,16(sp)
    2c14:	dcc00317 	ldw	r19,12(sp)
    2c18:	dc800217 	ldw	r18,8(sp)
    2c1c:	dc400117 	ldw	r17,4(sp)
    2c20:	dc000017 	ldw	r16,0(sp)
    2c24:	dec00504 	addi	sp,sp,20
    2c28:	f800283a 	ret
    2c2c:	0101ffc4 	movi	r4,2047
    2c30:	813fd626 	beq	r16,r4,2b8c <__alt_mem_epcs+0xfffe1b8c>
    2c34:	29402034 	orhi	r5,r5,128
    2c38:	01000e04 	movi	r4,56
    2c3c:	2080a316 	blt	r4,r2,2ecc <__subdf3+0x3c4>
    2c40:	010007c4 	movi	r4,31
    2c44:	2080c616 	blt	r4,r2,2f60 <__subdf3+0x458>
    2c48:	01000804 	movi	r4,32
    2c4c:	2089c83a 	sub	r4,r4,r2
    2c50:	2910983a 	sll	r8,r5,r4
    2c54:	308ed83a 	srl	r7,r6,r2
    2c58:	3108983a 	sll	r4,r6,r4
    2c5c:	2884d83a 	srl	r2,r5,r2
    2c60:	41ccb03a 	or	r6,r8,r7
    2c64:	2008c03a 	cmpne	r4,r4,zero
    2c68:	310cb03a 	or	r6,r6,r4
    2c6c:	898dc83a 	sub	r6,r17,r6
    2c70:	89a3803a 	cmpltu	r17,r17,r6
    2c74:	1887c83a 	sub	r3,r3,r2
    2c78:	1c47c83a 	sub	r3,r3,r17
    2c7c:	3023883a 	mov	r17,r6
    2c80:	1880202c 	andhi	r2,r3,128
    2c84:	10002326 	beq	r2,zero,2d14 <__subdf3+0x20c>
    2c88:	04c02034 	movhi	r19,128
    2c8c:	9cffffc4 	addi	r19,r19,-1
    2c90:	1ce6703a 	and	r19,r3,r19
    2c94:	98007a26 	beq	r19,zero,2e80 <__subdf3+0x378>
    2c98:	9809883a 	mov	r4,r19
    2c9c:	000363c0 	call	363c <__clzsi2>
    2ca0:	113ffe04 	addi	r4,r2,-8
    2ca4:	00c007c4 	movi	r3,31
    2ca8:	19007b16 	blt	r3,r4,2e98 <__subdf3+0x390>
    2cac:	00800804 	movi	r2,32
    2cb0:	1105c83a 	sub	r2,r2,r4
    2cb4:	8884d83a 	srl	r2,r17,r2
    2cb8:	9906983a 	sll	r3,r19,r4
    2cbc:	8922983a 	sll	r17,r17,r4
    2cc0:	10c4b03a 	or	r2,r2,r3
    2cc4:	24007816 	blt	r4,r16,2ea8 <__subdf3+0x3a0>
    2cc8:	2421c83a 	sub	r16,r4,r16
    2ccc:	80c00044 	addi	r3,r16,1
    2cd0:	010007c4 	movi	r4,31
    2cd4:	20c09516 	blt	r4,r3,2f2c <__subdf3+0x424>
    2cd8:	01400804 	movi	r5,32
    2cdc:	28cbc83a 	sub	r5,r5,r3
    2ce0:	88c8d83a 	srl	r4,r17,r3
    2ce4:	8962983a 	sll	r17,r17,r5
    2ce8:	114a983a 	sll	r5,r2,r5
    2cec:	10c6d83a 	srl	r3,r2,r3
    2cf0:	8804c03a 	cmpne	r2,r17,zero
    2cf4:	290ab03a 	or	r5,r5,r4
    2cf8:	28a2b03a 	or	r17,r5,r2
    2cfc:	0021883a 	mov	r16,zero
    2d00:	003fa206 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    2d04:	2090b03a 	or	r8,r4,r2
    2d08:	40018e26 	beq	r8,zero,3344 <__subdf3+0x83c>
    2d0c:	1007883a 	mov	r3,r2
    2d10:	2023883a 	mov	r17,r4
    2d14:	888001cc 	andi	r2,r17,7
    2d18:	103f9e1e 	bne	r2,zero,2b94 <__alt_mem_epcs+0xfffe1b94>
    2d1c:	1804977a 	slli	r2,r3,29
    2d20:	8822d0fa 	srli	r17,r17,3
    2d24:	1810d0fa 	srli	r8,r3,3
    2d28:	9100004c 	andi	r4,r18,1
    2d2c:	1444b03a 	or	r2,r2,r17
    2d30:	00c1ffc4 	movi	r3,2047
    2d34:	80c02826 	beq	r16,r3,2dd8 <__subdf3+0x2d0>
    2d38:	01400434 	movhi	r5,16
    2d3c:	297fffc4 	addi	r5,r5,-1
    2d40:	80e0703a 	and	r16,r16,r3
    2d44:	414a703a 	and	r5,r8,r5
    2d48:	003fa806 	br	2bec <__alt_mem_epcs+0xfffe1bec>
    2d4c:	0080630e 	bge	zero,r2,2edc <__subdf3+0x3d4>
    2d50:	48003026 	beq	r9,zero,2e14 <__subdf3+0x30c>
    2d54:	0101ffc4 	movi	r4,2047
    2d58:	813f8c26 	beq	r16,r4,2b8c <__alt_mem_epcs+0xfffe1b8c>
    2d5c:	29402034 	orhi	r5,r5,128
    2d60:	01000e04 	movi	r4,56
    2d64:	2080a90e 	bge	r4,r2,300c <__subdf3+0x504>
    2d68:	298cb03a 	or	r6,r5,r6
    2d6c:	3012c03a 	cmpne	r9,r6,zero
    2d70:	0005883a 	mov	r2,zero
    2d74:	4c53883a 	add	r9,r9,r17
    2d78:	4c63803a 	cmpltu	r17,r9,r17
    2d7c:	10c7883a 	add	r3,r2,r3
    2d80:	88c7883a 	add	r3,r17,r3
    2d84:	4823883a 	mov	r17,r9
    2d88:	1880202c 	andhi	r2,r3,128
    2d8c:	1000d026 	beq	r2,zero,30d0 <__subdf3+0x5c8>
    2d90:	84000044 	addi	r16,r16,1
    2d94:	0081ffc4 	movi	r2,2047
    2d98:	8080fe26 	beq	r16,r2,3194 <__subdf3+0x68c>
    2d9c:	00bfe034 	movhi	r2,65408
    2da0:	10bfffc4 	addi	r2,r2,-1
    2da4:	1886703a 	and	r3,r3,r2
    2da8:	880ad07a 	srli	r5,r17,1
    2dac:	180497fa 	slli	r2,r3,31
    2db0:	8900004c 	andi	r4,r17,1
    2db4:	2922b03a 	or	r17,r5,r4
    2db8:	1806d07a 	srli	r3,r3,1
    2dbc:	1462b03a 	or	r17,r2,r17
    2dc0:	3825883a 	mov	r18,r7
    2dc4:	003f7106 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    2dc8:	2984b03a 	or	r2,r5,r6
    2dcc:	103f6826 	beq	r2,zero,2b70 <__alt_mem_epcs+0xfffe1b70>
    2dd0:	39c03fcc 	andi	r7,r7,255
    2dd4:	003f6706 	br	2b74 <__alt_mem_epcs+0xfffe1b74>
    2dd8:	4086b03a 	or	r3,r8,r2
    2ddc:	18015226 	beq	r3,zero,3328 <__subdf3+0x820>
    2de0:	00c00434 	movhi	r3,16
    2de4:	41400234 	orhi	r5,r8,8
    2de8:	18ffffc4 	addi	r3,r3,-1
    2dec:	28ca703a 	and	r5,r5,r3
    2df0:	003f7e06 	br	2bec <__alt_mem_epcs+0xfffe1bec>
    2df4:	10bfffc4 	addi	r2,r2,-1
    2df8:	1000491e 	bne	r2,zero,2f20 <__subdf3+0x418>
    2dfc:	898fc83a 	sub	r7,r17,r6
    2e00:	89e3803a 	cmpltu	r17,r17,r7
    2e04:	1947c83a 	sub	r3,r3,r5
    2e08:	1c47c83a 	sub	r3,r3,r17
    2e0c:	3823883a 	mov	r17,r7
    2e10:	003f9b06 	br	2c80 <__alt_mem_epcs+0xfffe1c80>
    2e14:	2988b03a 	or	r4,r5,r6
    2e18:	203f5c26 	beq	r4,zero,2b8c <__alt_mem_epcs+0xfffe1b8c>
    2e1c:	10bfffc4 	addi	r2,r2,-1
    2e20:	1000931e 	bne	r2,zero,3070 <__subdf3+0x568>
    2e24:	898d883a 	add	r6,r17,r6
    2e28:	3463803a 	cmpltu	r17,r6,r17
    2e2c:	1947883a 	add	r3,r3,r5
    2e30:	88c7883a 	add	r3,r17,r3
    2e34:	3023883a 	mov	r17,r6
    2e38:	003fd306 	br	2d88 <__alt_mem_epcs+0xfffe1d88>
    2e3c:	1000541e 	bne	r2,zero,2f90 <__subdf3+0x488>
    2e40:	80800044 	addi	r2,r16,1
    2e44:	1081ffcc 	andi	r2,r2,2047
    2e48:	01000044 	movi	r4,1
    2e4c:	2080a20e 	bge	r4,r2,30d8 <__subdf3+0x5d0>
    2e50:	8989c83a 	sub	r4,r17,r6
    2e54:	8905803a 	cmpltu	r2,r17,r4
    2e58:	1967c83a 	sub	r19,r3,r5
    2e5c:	98a7c83a 	sub	r19,r19,r2
    2e60:	9880202c 	andhi	r2,r19,128
    2e64:	10006326 	beq	r2,zero,2ff4 <__subdf3+0x4ec>
    2e68:	3463c83a 	sub	r17,r6,r17
    2e6c:	28c7c83a 	sub	r3,r5,r3
    2e70:	344d803a 	cmpltu	r6,r6,r17
    2e74:	19a7c83a 	sub	r19,r3,r6
    2e78:	3825883a 	mov	r18,r7
    2e7c:	983f861e 	bne	r19,zero,2c98 <__alt_mem_epcs+0xfffe1c98>
    2e80:	8809883a 	mov	r4,r17
    2e84:	000363c0 	call	363c <__clzsi2>
    2e88:	10800804 	addi	r2,r2,32
    2e8c:	113ffe04 	addi	r4,r2,-8
    2e90:	00c007c4 	movi	r3,31
    2e94:	193f850e 	bge	r3,r4,2cac <__alt_mem_epcs+0xfffe1cac>
    2e98:	10bff604 	addi	r2,r2,-40
    2e9c:	8884983a 	sll	r2,r17,r2
    2ea0:	0023883a 	mov	r17,zero
    2ea4:	243f880e 	bge	r4,r16,2cc8 <__alt_mem_epcs+0xfffe1cc8>
    2ea8:	00ffe034 	movhi	r3,65408
    2eac:	18ffffc4 	addi	r3,r3,-1
    2eb0:	8121c83a 	sub	r16,r16,r4
    2eb4:	10c6703a 	and	r3,r2,r3
    2eb8:	003f3406 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    2ebc:	9100004c 	andi	r4,r18,1
    2ec0:	000b883a 	mov	r5,zero
    2ec4:	0005883a 	mov	r2,zero
    2ec8:	003f4806 	br	2bec <__alt_mem_epcs+0xfffe1bec>
    2ecc:	298cb03a 	or	r6,r5,r6
    2ed0:	300cc03a 	cmpne	r6,r6,zero
    2ed4:	0005883a 	mov	r2,zero
    2ed8:	003f6406 	br	2c6c <__alt_mem_epcs+0xfffe1c6c>
    2edc:	10009a1e 	bne	r2,zero,3148 <__subdf3+0x640>
    2ee0:	82400044 	addi	r9,r16,1
    2ee4:	4881ffcc 	andi	r2,r9,2047
    2ee8:	02800044 	movi	r10,1
    2eec:	5080670e 	bge	r10,r2,308c <__subdf3+0x584>
    2ef0:	0081ffc4 	movi	r2,2047
    2ef4:	4880af26 	beq	r9,r2,31b4 <__subdf3+0x6ac>
    2ef8:	898d883a 	add	r6,r17,r6
    2efc:	1945883a 	add	r2,r3,r5
    2f00:	3447803a 	cmpltu	r3,r6,r17
    2f04:	1887883a 	add	r3,r3,r2
    2f08:	182297fa 	slli	r17,r3,31
    2f0c:	300cd07a 	srli	r6,r6,1
    2f10:	1806d07a 	srli	r3,r3,1
    2f14:	4821883a 	mov	r16,r9
    2f18:	89a2b03a 	or	r17,r17,r6
    2f1c:	003f1b06 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    2f20:	0101ffc4 	movi	r4,2047
    2f24:	813f441e 	bne	r16,r4,2c38 <__alt_mem_epcs+0xfffe1c38>
    2f28:	003f1806 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    2f2c:	843ff844 	addi	r16,r16,-31
    2f30:	01400804 	movi	r5,32
    2f34:	1408d83a 	srl	r4,r2,r16
    2f38:	19405026 	beq	r3,r5,307c <__subdf3+0x574>
    2f3c:	01401004 	movi	r5,64
    2f40:	28c7c83a 	sub	r3,r5,r3
    2f44:	10c4983a 	sll	r2,r2,r3
    2f48:	88a2b03a 	or	r17,r17,r2
    2f4c:	8822c03a 	cmpne	r17,r17,zero
    2f50:	2462b03a 	or	r17,r4,r17
    2f54:	0007883a 	mov	r3,zero
    2f58:	0021883a 	mov	r16,zero
    2f5c:	003f6d06 	br	2d14 <__alt_mem_epcs+0xfffe1d14>
    2f60:	11fff804 	addi	r7,r2,-32
    2f64:	01000804 	movi	r4,32
    2f68:	29ced83a 	srl	r7,r5,r7
    2f6c:	11004526 	beq	r2,r4,3084 <__subdf3+0x57c>
    2f70:	01001004 	movi	r4,64
    2f74:	2089c83a 	sub	r4,r4,r2
    2f78:	2904983a 	sll	r2,r5,r4
    2f7c:	118cb03a 	or	r6,r2,r6
    2f80:	300cc03a 	cmpne	r6,r6,zero
    2f84:	398cb03a 	or	r6,r7,r6
    2f88:	0005883a 	mov	r2,zero
    2f8c:	003f3706 	br	2c6c <__alt_mem_epcs+0xfffe1c6c>
    2f90:	80002a26 	beq	r16,zero,303c <__subdf3+0x534>
    2f94:	0101ffc4 	movi	r4,2047
    2f98:	49006626 	beq	r9,r4,3134 <__subdf3+0x62c>
    2f9c:	0085c83a 	sub	r2,zero,r2
    2fa0:	18c02034 	orhi	r3,r3,128
    2fa4:	01000e04 	movi	r4,56
    2fa8:	20807e16 	blt	r4,r2,31a4 <__subdf3+0x69c>
    2fac:	010007c4 	movi	r4,31
    2fb0:	2080e716 	blt	r4,r2,3350 <__subdf3+0x848>
    2fb4:	01000804 	movi	r4,32
    2fb8:	2089c83a 	sub	r4,r4,r2
    2fbc:	1914983a 	sll	r10,r3,r4
    2fc0:	8890d83a 	srl	r8,r17,r2
    2fc4:	8908983a 	sll	r4,r17,r4
    2fc8:	1884d83a 	srl	r2,r3,r2
    2fcc:	5222b03a 	or	r17,r10,r8
    2fd0:	2006c03a 	cmpne	r3,r4,zero
    2fd4:	88e2b03a 	or	r17,r17,r3
    2fd8:	3463c83a 	sub	r17,r6,r17
    2fdc:	2885c83a 	sub	r2,r5,r2
    2fe0:	344d803a 	cmpltu	r6,r6,r17
    2fe4:	1187c83a 	sub	r3,r2,r6
    2fe8:	4821883a 	mov	r16,r9
    2fec:	3825883a 	mov	r18,r7
    2ff0:	003f2306 	br	2c80 <__alt_mem_epcs+0xfffe1c80>
    2ff4:	24d0b03a 	or	r8,r4,r19
    2ff8:	40001b1e 	bne	r8,zero,3068 <__subdf3+0x560>
    2ffc:	0005883a 	mov	r2,zero
    3000:	0009883a 	mov	r4,zero
    3004:	0021883a 	mov	r16,zero
    3008:	003f4906 	br	2d30 <__alt_mem_epcs+0xfffe1d30>
    300c:	010007c4 	movi	r4,31
    3010:	20803a16 	blt	r4,r2,30fc <__subdf3+0x5f4>
    3014:	01000804 	movi	r4,32
    3018:	2089c83a 	sub	r4,r4,r2
    301c:	2912983a 	sll	r9,r5,r4
    3020:	3090d83a 	srl	r8,r6,r2
    3024:	3108983a 	sll	r4,r6,r4
    3028:	2884d83a 	srl	r2,r5,r2
    302c:	4a12b03a 	or	r9,r9,r8
    3030:	2008c03a 	cmpne	r4,r4,zero
    3034:	4912b03a 	or	r9,r9,r4
    3038:	003f4e06 	br	2d74 <__alt_mem_epcs+0xfffe1d74>
    303c:	1c48b03a 	or	r4,r3,r17
    3040:	20003c26 	beq	r4,zero,3134 <__subdf3+0x62c>
    3044:	0084303a 	nor	r2,zero,r2
    3048:	1000381e 	bne	r2,zero,312c <__subdf3+0x624>
    304c:	3463c83a 	sub	r17,r6,r17
    3050:	28c5c83a 	sub	r2,r5,r3
    3054:	344d803a 	cmpltu	r6,r6,r17
    3058:	1187c83a 	sub	r3,r2,r6
    305c:	4821883a 	mov	r16,r9
    3060:	3825883a 	mov	r18,r7
    3064:	003f0606 	br	2c80 <__alt_mem_epcs+0xfffe1c80>
    3068:	2023883a 	mov	r17,r4
    306c:	003f0906 	br	2c94 <__alt_mem_epcs+0xfffe1c94>
    3070:	0101ffc4 	movi	r4,2047
    3074:	813f3a1e 	bne	r16,r4,2d60 <__alt_mem_epcs+0xfffe1d60>
    3078:	003ec406 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    307c:	0005883a 	mov	r2,zero
    3080:	003fb106 	br	2f48 <__alt_mem_epcs+0xfffe1f48>
    3084:	0005883a 	mov	r2,zero
    3088:	003fbc06 	br	2f7c <__alt_mem_epcs+0xfffe1f7c>
    308c:	1c44b03a 	or	r2,r3,r17
    3090:	80008e1e 	bne	r16,zero,32cc <__subdf3+0x7c4>
    3094:	1000c826 	beq	r2,zero,33b8 <__subdf3+0x8b0>
    3098:	2984b03a 	or	r2,r5,r6
    309c:	103ebb26 	beq	r2,zero,2b8c <__alt_mem_epcs+0xfffe1b8c>
    30a0:	8989883a 	add	r4,r17,r6
    30a4:	1945883a 	add	r2,r3,r5
    30a8:	2447803a 	cmpltu	r3,r4,r17
    30ac:	1887883a 	add	r3,r3,r2
    30b0:	1880202c 	andhi	r2,r3,128
    30b4:	2023883a 	mov	r17,r4
    30b8:	103f1626 	beq	r2,zero,2d14 <__alt_mem_epcs+0xfffe1d14>
    30bc:	00bfe034 	movhi	r2,65408
    30c0:	10bfffc4 	addi	r2,r2,-1
    30c4:	5021883a 	mov	r16,r10
    30c8:	1886703a 	and	r3,r3,r2
    30cc:	003eaf06 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    30d0:	3825883a 	mov	r18,r7
    30d4:	003f0f06 	br	2d14 <__alt_mem_epcs+0xfffe1d14>
    30d8:	1c44b03a 	or	r2,r3,r17
    30dc:	8000251e 	bne	r16,zero,3174 <__subdf3+0x66c>
    30e0:	1000661e 	bne	r2,zero,327c <__subdf3+0x774>
    30e4:	2990b03a 	or	r8,r5,r6
    30e8:	40009626 	beq	r8,zero,3344 <__subdf3+0x83c>
    30ec:	2807883a 	mov	r3,r5
    30f0:	3023883a 	mov	r17,r6
    30f4:	3825883a 	mov	r18,r7
    30f8:	003ea406 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    30fc:	127ff804 	addi	r9,r2,-32
    3100:	01000804 	movi	r4,32
    3104:	2a52d83a 	srl	r9,r5,r9
    3108:	11008c26 	beq	r2,r4,333c <__subdf3+0x834>
    310c:	01001004 	movi	r4,64
    3110:	2085c83a 	sub	r2,r4,r2
    3114:	2884983a 	sll	r2,r5,r2
    3118:	118cb03a 	or	r6,r2,r6
    311c:	300cc03a 	cmpne	r6,r6,zero
    3120:	4992b03a 	or	r9,r9,r6
    3124:	0005883a 	mov	r2,zero
    3128:	003f1206 	br	2d74 <__alt_mem_epcs+0xfffe1d74>
    312c:	0101ffc4 	movi	r4,2047
    3130:	493f9c1e 	bne	r9,r4,2fa4 <__alt_mem_epcs+0xfffe1fa4>
    3134:	2807883a 	mov	r3,r5
    3138:	3023883a 	mov	r17,r6
    313c:	4821883a 	mov	r16,r9
    3140:	3825883a 	mov	r18,r7
    3144:	003e9106 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    3148:	80001f1e 	bne	r16,zero,31c8 <__subdf3+0x6c0>
    314c:	1c48b03a 	or	r4,r3,r17
    3150:	20005a26 	beq	r4,zero,32bc <__subdf3+0x7b4>
    3154:	0084303a 	nor	r2,zero,r2
    3158:	1000561e 	bne	r2,zero,32b4 <__subdf3+0x7ac>
    315c:	89a3883a 	add	r17,r17,r6
    3160:	1945883a 	add	r2,r3,r5
    3164:	898d803a 	cmpltu	r6,r17,r6
    3168:	3087883a 	add	r3,r6,r2
    316c:	4821883a 	mov	r16,r9
    3170:	003f0506 	br	2d88 <__alt_mem_epcs+0xfffe1d88>
    3174:	10002b1e 	bne	r2,zero,3224 <__subdf3+0x71c>
    3178:	2984b03a 	or	r2,r5,r6
    317c:	10008026 	beq	r2,zero,3380 <__subdf3+0x878>
    3180:	2807883a 	mov	r3,r5
    3184:	3023883a 	mov	r17,r6
    3188:	3825883a 	mov	r18,r7
    318c:	0401ffc4 	movi	r16,2047
    3190:	003e7e06 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    3194:	3809883a 	mov	r4,r7
    3198:	0011883a 	mov	r8,zero
    319c:	0005883a 	mov	r2,zero
    31a0:	003ee306 	br	2d30 <__alt_mem_epcs+0xfffe1d30>
    31a4:	1c62b03a 	or	r17,r3,r17
    31a8:	8822c03a 	cmpne	r17,r17,zero
    31ac:	0005883a 	mov	r2,zero
    31b0:	003f8906 	br	2fd8 <__alt_mem_epcs+0xfffe1fd8>
    31b4:	3809883a 	mov	r4,r7
    31b8:	4821883a 	mov	r16,r9
    31bc:	0011883a 	mov	r8,zero
    31c0:	0005883a 	mov	r2,zero
    31c4:	003eda06 	br	2d30 <__alt_mem_epcs+0xfffe1d30>
    31c8:	0101ffc4 	movi	r4,2047
    31cc:	49003b26 	beq	r9,r4,32bc <__subdf3+0x7b4>
    31d0:	0085c83a 	sub	r2,zero,r2
    31d4:	18c02034 	orhi	r3,r3,128
    31d8:	01000e04 	movi	r4,56
    31dc:	20806e16 	blt	r4,r2,3398 <__subdf3+0x890>
    31e0:	010007c4 	movi	r4,31
    31e4:	20807716 	blt	r4,r2,33c4 <__subdf3+0x8bc>
    31e8:	01000804 	movi	r4,32
    31ec:	2089c83a 	sub	r4,r4,r2
    31f0:	1914983a 	sll	r10,r3,r4
    31f4:	8890d83a 	srl	r8,r17,r2
    31f8:	8908983a 	sll	r4,r17,r4
    31fc:	1884d83a 	srl	r2,r3,r2
    3200:	5222b03a 	or	r17,r10,r8
    3204:	2006c03a 	cmpne	r3,r4,zero
    3208:	88e2b03a 	or	r17,r17,r3
    320c:	89a3883a 	add	r17,r17,r6
    3210:	1145883a 	add	r2,r2,r5
    3214:	898d803a 	cmpltu	r6,r17,r6
    3218:	3087883a 	add	r3,r6,r2
    321c:	4821883a 	mov	r16,r9
    3220:	003ed906 	br	2d88 <__alt_mem_epcs+0xfffe1d88>
    3224:	2984b03a 	or	r2,r5,r6
    3228:	10004226 	beq	r2,zero,3334 <__subdf3+0x82c>
    322c:	1808d0fa 	srli	r4,r3,3
    3230:	8822d0fa 	srli	r17,r17,3
    3234:	1806977a 	slli	r3,r3,29
    3238:	2080022c 	andhi	r2,r4,8
    323c:	1c62b03a 	or	r17,r3,r17
    3240:	10000826 	beq	r2,zero,3264 <__subdf3+0x75c>
    3244:	2812d0fa 	srli	r9,r5,3
    3248:	4880022c 	andhi	r2,r9,8
    324c:	1000051e 	bne	r2,zero,3264 <__subdf3+0x75c>
    3250:	300cd0fa 	srli	r6,r6,3
    3254:	2804977a 	slli	r2,r5,29
    3258:	4809883a 	mov	r4,r9
    325c:	3825883a 	mov	r18,r7
    3260:	11a2b03a 	or	r17,r2,r6
    3264:	8806d77a 	srli	r3,r17,29
    3268:	200890fa 	slli	r4,r4,3
    326c:	882290fa 	slli	r17,r17,3
    3270:	0401ffc4 	movi	r16,2047
    3274:	1906b03a 	or	r3,r3,r4
    3278:	003e4406 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    327c:	2984b03a 	or	r2,r5,r6
    3280:	103e4226 	beq	r2,zero,2b8c <__alt_mem_epcs+0xfffe1b8c>
    3284:	8989c83a 	sub	r4,r17,r6
    3288:	8911803a 	cmpltu	r8,r17,r4
    328c:	1945c83a 	sub	r2,r3,r5
    3290:	1205c83a 	sub	r2,r2,r8
    3294:	1200202c 	andhi	r8,r2,128
    3298:	403e9a26 	beq	r8,zero,2d04 <__alt_mem_epcs+0xfffe1d04>
    329c:	3463c83a 	sub	r17,r6,r17
    32a0:	28c5c83a 	sub	r2,r5,r3
    32a4:	344d803a 	cmpltu	r6,r6,r17
    32a8:	1187c83a 	sub	r3,r2,r6
    32ac:	3825883a 	mov	r18,r7
    32b0:	003e3606 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    32b4:	0101ffc4 	movi	r4,2047
    32b8:	493fc71e 	bne	r9,r4,31d8 <__alt_mem_epcs+0xfffe21d8>
    32bc:	2807883a 	mov	r3,r5
    32c0:	3023883a 	mov	r17,r6
    32c4:	4821883a 	mov	r16,r9
    32c8:	003e3006 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    32cc:	10003626 	beq	r2,zero,33a8 <__subdf3+0x8a0>
    32d0:	2984b03a 	or	r2,r5,r6
    32d4:	10001726 	beq	r2,zero,3334 <__subdf3+0x82c>
    32d8:	1808d0fa 	srli	r4,r3,3
    32dc:	8822d0fa 	srli	r17,r17,3
    32e0:	1806977a 	slli	r3,r3,29
    32e4:	2080022c 	andhi	r2,r4,8
    32e8:	1c62b03a 	or	r17,r3,r17
    32ec:	10000726 	beq	r2,zero,330c <__subdf3+0x804>
    32f0:	2812d0fa 	srli	r9,r5,3
    32f4:	4880022c 	andhi	r2,r9,8
    32f8:	1000041e 	bne	r2,zero,330c <__subdf3+0x804>
    32fc:	300cd0fa 	srli	r6,r6,3
    3300:	2804977a 	slli	r2,r5,29
    3304:	4809883a 	mov	r4,r9
    3308:	11a2b03a 	or	r17,r2,r6
    330c:	8806d77a 	srli	r3,r17,29
    3310:	200890fa 	slli	r4,r4,3
    3314:	882290fa 	slli	r17,r17,3
    3318:	3825883a 	mov	r18,r7
    331c:	1906b03a 	or	r3,r3,r4
    3320:	0401ffc4 	movi	r16,2047
    3324:	003e1906 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    3328:	000b883a 	mov	r5,zero
    332c:	0005883a 	mov	r2,zero
    3330:	003e2e06 	br	2bec <__alt_mem_epcs+0xfffe1bec>
    3334:	0401ffc4 	movi	r16,2047
    3338:	003e1406 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    333c:	0005883a 	mov	r2,zero
    3340:	003f7506 	br	3118 <__alt_mem_epcs+0xfffe2118>
    3344:	0005883a 	mov	r2,zero
    3348:	0009883a 	mov	r4,zero
    334c:	003e7806 	br	2d30 <__alt_mem_epcs+0xfffe1d30>
    3350:	123ff804 	addi	r8,r2,-32
    3354:	01000804 	movi	r4,32
    3358:	1a10d83a 	srl	r8,r3,r8
    335c:	11002526 	beq	r2,r4,33f4 <__subdf3+0x8ec>
    3360:	01001004 	movi	r4,64
    3364:	2085c83a 	sub	r2,r4,r2
    3368:	1884983a 	sll	r2,r3,r2
    336c:	1444b03a 	or	r2,r2,r17
    3370:	1004c03a 	cmpne	r2,r2,zero
    3374:	40a2b03a 	or	r17,r8,r2
    3378:	0005883a 	mov	r2,zero
    337c:	003f1606 	br	2fd8 <__alt_mem_epcs+0xfffe1fd8>
    3380:	02000434 	movhi	r8,16
    3384:	0009883a 	mov	r4,zero
    3388:	423fffc4 	addi	r8,r8,-1
    338c:	00bfffc4 	movi	r2,-1
    3390:	0401ffc4 	movi	r16,2047
    3394:	003e6606 	br	2d30 <__alt_mem_epcs+0xfffe1d30>
    3398:	1c62b03a 	or	r17,r3,r17
    339c:	8822c03a 	cmpne	r17,r17,zero
    33a0:	0005883a 	mov	r2,zero
    33a4:	003f9906 	br	320c <__alt_mem_epcs+0xfffe220c>
    33a8:	2807883a 	mov	r3,r5
    33ac:	3023883a 	mov	r17,r6
    33b0:	0401ffc4 	movi	r16,2047
    33b4:	003df506 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    33b8:	2807883a 	mov	r3,r5
    33bc:	3023883a 	mov	r17,r6
    33c0:	003df206 	br	2b8c <__alt_mem_epcs+0xfffe1b8c>
    33c4:	123ff804 	addi	r8,r2,-32
    33c8:	01000804 	movi	r4,32
    33cc:	1a10d83a 	srl	r8,r3,r8
    33d0:	11000a26 	beq	r2,r4,33fc <__subdf3+0x8f4>
    33d4:	01001004 	movi	r4,64
    33d8:	2085c83a 	sub	r2,r4,r2
    33dc:	1884983a 	sll	r2,r3,r2
    33e0:	1444b03a 	or	r2,r2,r17
    33e4:	1004c03a 	cmpne	r2,r2,zero
    33e8:	40a2b03a 	or	r17,r8,r2
    33ec:	0005883a 	mov	r2,zero
    33f0:	003f8606 	br	320c <__alt_mem_epcs+0xfffe220c>
    33f4:	0005883a 	mov	r2,zero
    33f8:	003fdc06 	br	336c <__alt_mem_epcs+0xfffe236c>
    33fc:	0005883a 	mov	r2,zero
    3400:	003ff706 	br	33e0 <__alt_mem_epcs+0xfffe23e0>

00003404 <__fixdfsi>:
    3404:	280cd53a 	srli	r6,r5,20
    3408:	00c00434 	movhi	r3,16
    340c:	18ffffc4 	addi	r3,r3,-1
    3410:	3181ffcc 	andi	r6,r6,2047
    3414:	01c0ff84 	movi	r7,1022
    3418:	28c6703a 	and	r3,r5,r3
    341c:	280ad7fa 	srli	r5,r5,31
    3420:	3980120e 	bge	r7,r6,346c <__fixdfsi+0x68>
    3424:	00810744 	movi	r2,1053
    3428:	11800c16 	blt	r2,r6,345c <__fixdfsi+0x58>
    342c:	00810cc4 	movi	r2,1075
    3430:	1185c83a 	sub	r2,r2,r6
    3434:	01c007c4 	movi	r7,31
    3438:	18c00434 	orhi	r3,r3,16
    343c:	38800d16 	blt	r7,r2,3474 <__fixdfsi+0x70>
    3440:	31befb44 	addi	r6,r6,-1043
    3444:	2084d83a 	srl	r2,r4,r2
    3448:	1986983a 	sll	r3,r3,r6
    344c:	1884b03a 	or	r2,r3,r2
    3450:	28000726 	beq	r5,zero,3470 <__fixdfsi+0x6c>
    3454:	0085c83a 	sub	r2,zero,r2
    3458:	f800283a 	ret
    345c:	00a00034 	movhi	r2,32768
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	2885883a 	add	r2,r5,r2
    3468:	f800283a 	ret
    346c:	0005883a 	mov	r2,zero
    3470:	f800283a 	ret
    3474:	008104c4 	movi	r2,1043
    3478:	1185c83a 	sub	r2,r2,r6
    347c:	1884d83a 	srl	r2,r3,r2
    3480:	003ff306 	br	3450 <__alt_mem_epcs+0xfffe2450>

00003484 <__floatunsidf>:
    3484:	defffe04 	addi	sp,sp,-8
    3488:	dc000015 	stw	r16,0(sp)
    348c:	dfc00115 	stw	ra,4(sp)
    3490:	2021883a 	mov	r16,r4
    3494:	20002226 	beq	r4,zero,3520 <__floatunsidf+0x9c>
    3498:	000363c0 	call	363c <__clzsi2>
    349c:	01010784 	movi	r4,1054
    34a0:	2089c83a 	sub	r4,r4,r2
    34a4:	01810cc4 	movi	r6,1075
    34a8:	310dc83a 	sub	r6,r6,r4
    34ac:	00c007c4 	movi	r3,31
    34b0:	1980120e 	bge	r3,r6,34fc <__floatunsidf+0x78>
    34b4:	00c104c4 	movi	r3,1043
    34b8:	1907c83a 	sub	r3,r3,r4
    34bc:	80ca983a 	sll	r5,r16,r3
    34c0:	00800434 	movhi	r2,16
    34c4:	10bfffc4 	addi	r2,r2,-1
    34c8:	2101ffcc 	andi	r4,r4,2047
    34cc:	0021883a 	mov	r16,zero
    34d0:	288a703a 	and	r5,r5,r2
    34d4:	2008953a 	slli	r4,r4,20
    34d8:	00c00434 	movhi	r3,16
    34dc:	18ffffc4 	addi	r3,r3,-1
    34e0:	28c6703a 	and	r3,r5,r3
    34e4:	8005883a 	mov	r2,r16
    34e8:	1906b03a 	or	r3,r3,r4
    34ec:	dfc00117 	ldw	ra,4(sp)
    34f0:	dc000017 	ldw	r16,0(sp)
    34f4:	dec00204 	addi	sp,sp,8
    34f8:	f800283a 	ret
    34fc:	00c002c4 	movi	r3,11
    3500:	188bc83a 	sub	r5,r3,r2
    3504:	814ad83a 	srl	r5,r16,r5
    3508:	00c00434 	movhi	r3,16
    350c:	18ffffc4 	addi	r3,r3,-1
    3510:	81a0983a 	sll	r16,r16,r6
    3514:	2101ffcc 	andi	r4,r4,2047
    3518:	28ca703a 	and	r5,r5,r3
    351c:	003fed06 	br	34d4 <__alt_mem_epcs+0xfffe24d4>
    3520:	0009883a 	mov	r4,zero
    3524:	000b883a 	mov	r5,zero
    3528:	003fea06 	br	34d4 <__alt_mem_epcs+0xfffe24d4>

0000352c <__extendsfdf2>:
    352c:	200ad5fa 	srli	r5,r4,23
    3530:	defffd04 	addi	sp,sp,-12
    3534:	dc400115 	stw	r17,4(sp)
    3538:	29403fcc 	andi	r5,r5,255
    353c:	29800044 	addi	r6,r5,1
    3540:	04402034 	movhi	r17,128
    3544:	dc000015 	stw	r16,0(sp)
    3548:	8c7fffc4 	addi	r17,r17,-1
    354c:	dfc00215 	stw	ra,8(sp)
    3550:	31803fcc 	andi	r6,r6,255
    3554:	00800044 	movi	r2,1
    3558:	8922703a 	and	r17,r17,r4
    355c:	2020d7fa 	srli	r16,r4,31
    3560:	1180110e 	bge	r2,r6,35a8 <__extendsfdf2+0x7c>
    3564:	880cd0fa 	srli	r6,r17,3
    3568:	8822977a 	slli	r17,r17,29
    356c:	2940e004 	addi	r5,r5,896
    3570:	2941ffcc 	andi	r5,r5,2047
    3574:	2804953a 	slli	r2,r5,20
    3578:	01400434 	movhi	r5,16
    357c:	800697fa 	slli	r3,r16,31
    3580:	297fffc4 	addi	r5,r5,-1
    3584:	314a703a 	and	r5,r6,r5
    3588:	288ab03a 	or	r5,r5,r2
    358c:	28c6b03a 	or	r3,r5,r3
    3590:	8805883a 	mov	r2,r17
    3594:	dfc00217 	ldw	ra,8(sp)
    3598:	dc400117 	ldw	r17,4(sp)
    359c:	dc000017 	ldw	r16,0(sp)
    35a0:	dec00304 	addi	sp,sp,12
    35a4:	f800283a 	ret
    35a8:	2800111e 	bne	r5,zero,35f0 <__extendsfdf2+0xc4>
    35ac:	88001c26 	beq	r17,zero,3620 <__extendsfdf2+0xf4>
    35b0:	8809883a 	mov	r4,r17
    35b4:	000363c0 	call	363c <__clzsi2>
    35b8:	00c00284 	movi	r3,10
    35bc:	18801b16 	blt	r3,r2,362c <__extendsfdf2+0x100>
    35c0:	018002c4 	movi	r6,11
    35c4:	308dc83a 	sub	r6,r6,r2
    35c8:	11000544 	addi	r4,r2,21
    35cc:	8986d83a 	srl	r3,r17,r6
    35d0:	8922983a 	sll	r17,r17,r4
    35d4:	0180e244 	movi	r6,905
    35d8:	01400434 	movhi	r5,16
    35dc:	3085c83a 	sub	r2,r6,r2
    35e0:	297fffc4 	addi	r5,r5,-1
    35e4:	194c703a 	and	r6,r3,r5
    35e8:	1141ffcc 	andi	r5,r2,2047
    35ec:	003fe006 	br	3570 <__alt_mem_epcs+0xfffe2570>
    35f0:	88000826 	beq	r17,zero,3614 <__extendsfdf2+0xe8>
    35f4:	880cd0fa 	srli	r6,r17,3
    35f8:	00800434 	movhi	r2,16
    35fc:	10bfffc4 	addi	r2,r2,-1
    3600:	31800234 	orhi	r6,r6,8
    3604:	8822977a 	slli	r17,r17,29
    3608:	308c703a 	and	r6,r6,r2
    360c:	0141ffc4 	movi	r5,2047
    3610:	003fd706 	br	3570 <__alt_mem_epcs+0xfffe2570>
    3614:	0141ffc4 	movi	r5,2047
    3618:	000d883a 	mov	r6,zero
    361c:	003fd406 	br	3570 <__alt_mem_epcs+0xfffe2570>
    3620:	000b883a 	mov	r5,zero
    3624:	000d883a 	mov	r6,zero
    3628:	003fd106 	br	3570 <__alt_mem_epcs+0xfffe2570>
    362c:	11bffd44 	addi	r6,r2,-11
    3630:	8986983a 	sll	r3,r17,r6
    3634:	0023883a 	mov	r17,zero
    3638:	003fe606 	br	35d4 <__alt_mem_epcs+0xfffe25d4>

0000363c <__clzsi2>:
    363c:	00bfffd4 	movui	r2,65535
    3640:	11000536 	bltu	r2,r4,3658 <__clzsi2+0x1c>
    3644:	00803fc4 	movi	r2,255
    3648:	11000f36 	bltu	r2,r4,3688 <__clzsi2+0x4c>
    364c:	00800804 	movi	r2,32
    3650:	0007883a 	mov	r3,zero
    3654:	00000506 	br	366c <__clzsi2+0x30>
    3658:	00804034 	movhi	r2,256
    365c:	10bfffc4 	addi	r2,r2,-1
    3660:	11000c2e 	bgeu	r2,r4,3694 <__clzsi2+0x58>
    3664:	00800204 	movi	r2,8
    3668:	00c00604 	movi	r3,24
    366c:	20c8d83a 	srl	r4,r4,r3
    3670:	00c00034 	movhi	r3,0
    3674:	18d26a04 	addi	r3,r3,18856
    3678:	1909883a 	add	r4,r3,r4
    367c:	20c00003 	ldbu	r3,0(r4)
    3680:	10c5c83a 	sub	r2,r2,r3
    3684:	f800283a 	ret
    3688:	00800604 	movi	r2,24
    368c:	00c00204 	movi	r3,8
    3690:	003ff606 	br	366c <__alt_mem_epcs+0xfffe266c>
    3694:	00800404 	movi	r2,16
    3698:	1007883a 	mov	r3,r2
    369c:	003ff306 	br	366c <__alt_mem_epcs+0xfffe266c>

000036a0 <memcpy>:
    36a0:	2005883a 	mov	r2,r4
    36a4:	2007883a 	mov	r3,r4
    36a8:	218d883a 	add	r6,r4,r6
    36ac:	19800526 	beq	r3,r6,36c4 <memcpy+0x24>
    36b0:	29000003 	ldbu	r4,0(r5)
    36b4:	18c00044 	addi	r3,r3,1
    36b8:	29400044 	addi	r5,r5,1
    36bc:	193fffc5 	stb	r4,-1(r3)
    36c0:	003ffa06 	br	36ac <__alt_mem_epcs+0xfffe26ac>
    36c4:	f800283a 	ret

000036c8 <memset>:
    36c8:	2005883a 	mov	r2,r4
    36cc:	2007883a 	mov	r3,r4
    36d0:	218d883a 	add	r6,r4,r6
    36d4:	19800326 	beq	r3,r6,36e4 <memset+0x1c>
    36d8:	19400005 	stb	r5,0(r3)
    36dc:	18c00044 	addi	r3,r3,1
    36e0:	003ffc06 	br	36d4 <__alt_mem_epcs+0xfffe26d4>
    36e4:	f800283a 	ret

000036e8 <_printf_r>:
    36e8:	defffd04 	addi	sp,sp,-12
    36ec:	dfc00015 	stw	ra,0(sp)
    36f0:	d9800115 	stw	r6,4(sp)
    36f4:	d9c00215 	stw	r7,8(sp)
    36f8:	20c00217 	ldw	r3,8(r4)
    36fc:	01800034 	movhi	r6,0
    3700:	31914304 	addi	r6,r6,17676
    3704:	19800115 	stw	r6,4(r3)
    3708:	280d883a 	mov	r6,r5
    370c:	21400217 	ldw	r5,8(r4)
    3710:	d9c00104 	addi	r7,sp,4
    3714:	0003fcc0 	call	3fcc <___vfprintf_internal_r>
    3718:	dfc00017 	ldw	ra,0(sp)
    371c:	dec00304 	addi	sp,sp,12
    3720:	f800283a 	ret

00003724 <printf>:
    3724:	defffc04 	addi	sp,sp,-16
    3728:	dfc00015 	stw	ra,0(sp)
    372c:	d9400115 	stw	r5,4(sp)
    3730:	d9800215 	stw	r6,8(sp)
    3734:	d9c00315 	stw	r7,12(sp)
    3738:	00800034 	movhi	r2,0
    373c:	1098e404 	addi	r2,r2,25488
    3740:	10800017 	ldw	r2,0(r2)
    3744:	01400034 	movhi	r5,0
    3748:	29514304 	addi	r5,r5,17676
    374c:	10c00217 	ldw	r3,8(r2)
    3750:	d9800104 	addi	r6,sp,4
    3754:	19400115 	stw	r5,4(r3)
    3758:	200b883a 	mov	r5,r4
    375c:	11000217 	ldw	r4,8(r2)
    3760:	00044f00 	call	44f0 <__vfprintf_internal>
    3764:	dfc00017 	ldw	ra,0(sp)
    3768:	dec00404 	addi	sp,sp,16
    376c:	f800283a 	ret

00003770 <_puts_r>:
    3770:	defffd04 	addi	sp,sp,-12
    3774:	dc000015 	stw	r16,0(sp)
    3778:	2021883a 	mov	r16,r4
    377c:	2809883a 	mov	r4,r5
    3780:	dfc00215 	stw	ra,8(sp)
    3784:	dc400115 	stw	r17,4(sp)
    3788:	2823883a 	mov	r17,r5
    378c:	00039980 	call	3998 <strlen>
    3790:	81400217 	ldw	r5,8(r16)
    3794:	01000034 	movhi	r4,0
    3798:	21114304 	addi	r4,r4,17676
    379c:	29000115 	stw	r4,4(r5)
    37a0:	100f883a 	mov	r7,r2
    37a4:	880d883a 	mov	r6,r17
    37a8:	8009883a 	mov	r4,r16
    37ac:	000450c0 	call	450c <__sfvwrite_small_dev>
    37b0:	00ffffc4 	movi	r3,-1
    37b4:	10c00926 	beq	r2,r3,37dc <_puts_r+0x6c>
    37b8:	81400217 	ldw	r5,8(r16)
    37bc:	01800034 	movhi	r6,0
    37c0:	01c00044 	movi	r7,1
    37c4:	28800117 	ldw	r2,4(r5)
    37c8:	3192aa04 	addi	r6,r6,19112
    37cc:	8009883a 	mov	r4,r16
    37d0:	103ee83a 	callr	r2
    37d4:	10bfffe0 	cmpeqi	r2,r2,-1
    37d8:	0085c83a 	sub	r2,zero,r2
    37dc:	dfc00217 	ldw	ra,8(sp)
    37e0:	dc400117 	ldw	r17,4(sp)
    37e4:	dc000017 	ldw	r16,0(sp)
    37e8:	dec00304 	addi	sp,sp,12
    37ec:	f800283a 	ret

000037f0 <puts>:
    37f0:	00800034 	movhi	r2,0
    37f4:	1098e404 	addi	r2,r2,25488
    37f8:	200b883a 	mov	r5,r4
    37fc:	11000017 	ldw	r4,0(r2)
    3800:	00037701 	jmpi	3770 <_puts_r>

00003804 <_snprintf_r>:
    3804:	3000040e 	bge	r6,zero,3818 <_snprintf_r+0x14>
    3808:	008022c4 	movi	r2,139
    380c:	20800015 	stw	r2,0(r4)
    3810:	00bfffc4 	movi	r2,-1
    3814:	f800283a 	ret
    3818:	defff604 	addi	sp,sp,-40
    381c:	00c08204 	movi	r3,520
    3820:	dfc00915 	stw	ra,36(sp)
    3824:	dc400815 	stw	r17,32(sp)
    3828:	dc000715 	stw	r16,28(sp)
    382c:	d8c0000d 	sth	r3,0(sp)
    3830:	d9400415 	stw	r5,16(sp)
    3834:	d9400215 	stw	r5,8(sp)
    3838:	3005883a 	mov	r2,r6
    383c:	30000226 	beq	r6,zero,3848 <_snprintf_r+0x44>
    3840:	30ffffc4 	addi	r3,r6,-1
    3844:	00000106 	br	384c <_snprintf_r+0x48>
    3848:	0007883a 	mov	r3,zero
    384c:	1021883a 	mov	r16,r2
    3850:	00bfffc4 	movi	r2,-1
    3854:	d880008d 	sth	r2,2(sp)
    3858:	00800034 	movhi	r2,0
    385c:	380d883a 	mov	r6,r7
    3860:	10917104 	addi	r2,r2,17860
    3864:	d9c00a04 	addi	r7,sp,40
    3868:	d80b883a 	mov	r5,sp
    386c:	d8c00515 	stw	r3,20(sp)
    3870:	d8c00315 	stw	r3,12(sp)
    3874:	2023883a 	mov	r17,r4
    3878:	d8800115 	stw	r2,4(sp)
    387c:	d8000615 	stw	zero,24(sp)
    3880:	0003a200 	call	3a20 <___svfprintf_internal_r>
    3884:	00ffffc4 	movi	r3,-1
    3888:	10c0020e 	bge	r2,r3,3894 <_snprintf_r+0x90>
    388c:	00c022c4 	movi	r3,139
    3890:	88c00015 	stw	r3,0(r17)
    3894:	80000226 	beq	r16,zero,38a0 <_snprintf_r+0x9c>
    3898:	d8c00417 	ldw	r3,16(sp)
    389c:	18000005 	stb	zero,0(r3)
    38a0:	dfc00917 	ldw	ra,36(sp)
    38a4:	dc400817 	ldw	r17,32(sp)
    38a8:	dc000717 	ldw	r16,28(sp)
    38ac:	dec00a04 	addi	sp,sp,40
    38b0:	f800283a 	ret

000038b4 <snprintf>:
    38b4:	defff504 	addi	sp,sp,-44
    38b8:	dfc00915 	stw	ra,36(sp)
    38bc:	dc400815 	stw	r17,32(sp)
    38c0:	dc000715 	stw	r16,28(sp)
    38c4:	d9c00a15 	stw	r7,40(sp)
    38c8:	00800034 	movhi	r2,0
    38cc:	1098e404 	addi	r2,r2,25488
    38d0:	14400017 	ldw	r17,0(r2)
    38d4:	2800040e 	bge	r5,zero,38e8 <snprintf+0x34>
    38d8:	008022c4 	movi	r2,139
    38dc:	88800015 	stw	r2,0(r17)
    38e0:	00bfffc4 	movi	r2,-1
    38e4:	00001c06 	br	3958 <snprintf+0xa4>
    38e8:	00c08204 	movi	r3,520
    38ec:	d8c0000d 	sth	r3,0(sp)
    38f0:	d9000415 	stw	r4,16(sp)
    38f4:	d9000215 	stw	r4,8(sp)
    38f8:	28000226 	beq	r5,zero,3904 <snprintf+0x50>
    38fc:	28ffffc4 	addi	r3,r5,-1
    3900:	00000106 	br	3908 <snprintf+0x54>
    3904:	0007883a 	mov	r3,zero
    3908:	d8c00515 	stw	r3,20(sp)
    390c:	d8c00315 	stw	r3,12(sp)
    3910:	11000017 	ldw	r4,0(r2)
    3914:	00ffffc4 	movi	r3,-1
    3918:	d8c0008d 	sth	r3,2(sp)
    391c:	00c00034 	movhi	r3,0
    3920:	18d17104 	addi	r3,r3,17860
    3924:	2821883a 	mov	r16,r5
    3928:	d9c00a04 	addi	r7,sp,40
    392c:	d80b883a 	mov	r5,sp
    3930:	d8c00115 	stw	r3,4(sp)
    3934:	d8000615 	stw	zero,24(sp)
    3938:	0003a200 	call	3a20 <___svfprintf_internal_r>
    393c:	00ffffc4 	movi	r3,-1
    3940:	10c0020e 	bge	r2,r3,394c <snprintf+0x98>
    3944:	00c022c4 	movi	r3,139
    3948:	88c00015 	stw	r3,0(r17)
    394c:	80000226 	beq	r16,zero,3958 <snprintf+0xa4>
    3950:	d8c00417 	ldw	r3,16(sp)
    3954:	18000005 	stb	zero,0(r3)
    3958:	dfc00917 	ldw	ra,36(sp)
    395c:	dc400817 	ldw	r17,32(sp)
    3960:	dc000717 	ldw	r16,28(sp)
    3964:	dec00b04 	addi	sp,sp,44
    3968:	f800283a 	ret

0000396c <strcpy>:
    396c:	2005883a 	mov	r2,r4
    3970:	200d883a 	mov	r6,r4
    3974:	28c00003 	ldbu	r3,0(r5)
    3978:	31800044 	addi	r6,r6,1
    397c:	29400044 	addi	r5,r5,1
    3980:	30ffffc5 	stb	r3,-1(r6)
    3984:	18c03fcc 	andi	r3,r3,255
    3988:	18c0201c 	xori	r3,r3,128
    398c:	18ffe004 	addi	r3,r3,-128
    3990:	183ff81e 	bne	r3,zero,3974 <__alt_mem_epcs+0xfffe2974>
    3994:	f800283a 	ret

00003998 <strlen>:
    3998:	2005883a 	mov	r2,r4
    399c:	10c00007 	ldb	r3,0(r2)
    39a0:	18000226 	beq	r3,zero,39ac <strlen+0x14>
    39a4:	10800044 	addi	r2,r2,1
    39a8:	003ffc06 	br	399c <__alt_mem_epcs+0xfffe299c>
    39ac:	1105c83a 	sub	r2,r2,r4
    39b0:	f800283a 	ret

000039b4 <print_repeat>:
    39b4:	defffb04 	addi	sp,sp,-20
    39b8:	dc800315 	stw	r18,12(sp)
    39bc:	dc400215 	stw	r17,8(sp)
    39c0:	dc000115 	stw	r16,4(sp)
    39c4:	dfc00415 	stw	ra,16(sp)
    39c8:	2025883a 	mov	r18,r4
    39cc:	2823883a 	mov	r17,r5
    39d0:	d9800005 	stb	r6,0(sp)
    39d4:	3821883a 	mov	r16,r7
    39d8:	04000a0e 	bge	zero,r16,3a04 <print_repeat+0x50>
    39dc:	88800117 	ldw	r2,4(r17)
    39e0:	01c00044 	movi	r7,1
    39e4:	d80d883a 	mov	r6,sp
    39e8:	880b883a 	mov	r5,r17
    39ec:	9009883a 	mov	r4,r18
    39f0:	103ee83a 	callr	r2
    39f4:	843fffc4 	addi	r16,r16,-1
    39f8:	103ff726 	beq	r2,zero,39d8 <__alt_mem_epcs+0xfffe29d8>
    39fc:	00bfffc4 	movi	r2,-1
    3a00:	00000106 	br	3a08 <print_repeat+0x54>
    3a04:	0005883a 	mov	r2,zero
    3a08:	dfc00417 	ldw	ra,16(sp)
    3a0c:	dc800317 	ldw	r18,12(sp)
    3a10:	dc400217 	ldw	r17,8(sp)
    3a14:	dc000117 	ldw	r16,4(sp)
    3a18:	dec00504 	addi	sp,sp,20
    3a1c:	f800283a 	ret

00003a20 <___svfprintf_internal_r>:
    3a20:	deffe504 	addi	sp,sp,-108
    3a24:	d8c00804 	addi	r3,sp,32
    3a28:	df001915 	stw	fp,100(sp)
    3a2c:	ddc01815 	stw	r23,96(sp)
    3a30:	dd801715 	stw	r22,92(sp)
    3a34:	dd401615 	stw	r21,88(sp)
    3a38:	dd001515 	stw	r20,84(sp)
    3a3c:	dcc01415 	stw	r19,80(sp)
    3a40:	dc801315 	stw	r18,76(sp)
    3a44:	dc401215 	stw	r17,72(sp)
    3a48:	dc001115 	stw	r16,68(sp)
    3a4c:	dfc01a15 	stw	ra,104(sp)
    3a50:	2027883a 	mov	r19,r4
    3a54:	2839883a 	mov	fp,r5
    3a58:	382d883a 	mov	r22,r7
    3a5c:	d9800f15 	stw	r6,60(sp)
    3a60:	0021883a 	mov	r16,zero
    3a64:	d8000e15 	stw	zero,56(sp)
    3a68:	002f883a 	mov	r23,zero
    3a6c:	002b883a 	mov	r21,zero
    3a70:	0025883a 	mov	r18,zero
    3a74:	0023883a 	mov	r17,zero
    3a78:	d8000c15 	stw	zero,48(sp)
    3a7c:	d8000b15 	stw	zero,44(sp)
    3a80:	0029883a 	mov	r20,zero
    3a84:	d8c00915 	stw	r3,36(sp)
    3a88:	d8c00f17 	ldw	r3,60(sp)
    3a8c:	19000003 	ldbu	r4,0(r3)
    3a90:	20803fcc 	andi	r2,r4,255
    3a94:	1080201c 	xori	r2,r2,128
    3a98:	10bfe004 	addi	r2,r2,-128
    3a9c:	10011c26 	beq	r2,zero,3f10 <___svfprintf_internal_r+0x4f0>
    3aa0:	00c00044 	movi	r3,1
    3aa4:	a0c01426 	beq	r20,r3,3af8 <___svfprintf_internal_r+0xd8>
    3aa8:	1d000216 	blt	r3,r20,3ab4 <___svfprintf_internal_r+0x94>
    3aac:	a0000626 	beq	r20,zero,3ac8 <___svfprintf_internal_r+0xa8>
    3ab0:	00011306 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3ab4:	01400084 	movi	r5,2
    3ab8:	a1401d26 	beq	r20,r5,3b30 <___svfprintf_internal_r+0x110>
    3abc:	014000c4 	movi	r5,3
    3ac0:	a1402926 	beq	r20,r5,3b68 <___svfprintf_internal_r+0x148>
    3ac4:	00010e06 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3ac8:	01400944 	movi	r5,37
    3acc:	1140fb26 	beq	r2,r5,3ebc <___svfprintf_internal_r+0x49c>
    3ad0:	e0800117 	ldw	r2,4(fp)
    3ad4:	d9000005 	stb	r4,0(sp)
    3ad8:	01c00044 	movi	r7,1
    3adc:	d80d883a 	mov	r6,sp
    3ae0:	e00b883a 	mov	r5,fp
    3ae4:	9809883a 	mov	r4,r19
    3ae8:	103ee83a 	callr	r2
    3aec:	1000d61e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3af0:	84000044 	addi	r16,r16,1
    3af4:	00010206 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3af8:	01400c04 	movi	r5,48
    3afc:	1140f826 	beq	r2,r5,3ee0 <___svfprintf_internal_r+0x4c0>
    3b00:	01400944 	movi	r5,37
    3b04:	11400a1e 	bne	r2,r5,3b30 <___svfprintf_internal_r+0x110>
    3b08:	d8800005 	stb	r2,0(sp)
    3b0c:	e0800117 	ldw	r2,4(fp)
    3b10:	a00f883a 	mov	r7,r20
    3b14:	d80d883a 	mov	r6,sp
    3b18:	e00b883a 	mov	r5,fp
    3b1c:	9809883a 	mov	r4,r19
    3b20:	103ee83a 	callr	r2
    3b24:	1000c81e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3b28:	84000044 	addi	r16,r16,1
    3b2c:	0000f306 	br	3efc <___svfprintf_internal_r+0x4dc>
    3b30:	217ff404 	addi	r5,r4,-48
    3b34:	29403fcc 	andi	r5,r5,255
    3b38:	00c00244 	movi	r3,9
    3b3c:	19400736 	bltu	r3,r5,3b5c <___svfprintf_internal_r+0x13c>
    3b40:	00bfffc4 	movi	r2,-1
    3b44:	88800226 	beq	r17,r2,3b50 <___svfprintf_internal_r+0x130>
    3b48:	8c4002a4 	muli	r17,r17,10
    3b4c:	00000106 	br	3b54 <___svfprintf_internal_r+0x134>
    3b50:	0023883a 	mov	r17,zero
    3b54:	2c63883a 	add	r17,r5,r17
    3b58:	0000e206 	br	3ee4 <___svfprintf_internal_r+0x4c4>
    3b5c:	01400b84 	movi	r5,46
    3b60:	1140e426 	beq	r2,r5,3ef4 <___svfprintf_internal_r+0x4d4>
    3b64:	05000084 	movi	r20,2
    3b68:	213ff404 	addi	r4,r4,-48
    3b6c:	21003fcc 	andi	r4,r4,255
    3b70:	00c00244 	movi	r3,9
    3b74:	19000736 	bltu	r3,r4,3b94 <___svfprintf_internal_r+0x174>
    3b78:	00bfffc4 	movi	r2,-1
    3b7c:	90800226 	beq	r18,r2,3b88 <___svfprintf_internal_r+0x168>
    3b80:	948002a4 	muli	r18,r18,10
    3b84:	00000106 	br	3b8c <___svfprintf_internal_r+0x16c>
    3b88:	0025883a 	mov	r18,zero
    3b8c:	24a5883a 	add	r18,r4,r18
    3b90:	0000db06 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3b94:	00c01b04 	movi	r3,108
    3b98:	10c0d426 	beq	r2,r3,3eec <___svfprintf_internal_r+0x4cc>
    3b9c:	013fffc4 	movi	r4,-1
    3ba0:	91000226 	beq	r18,r4,3bac <___svfprintf_internal_r+0x18c>
    3ba4:	d8000b15 	stw	zero,44(sp)
    3ba8:	00000106 	br	3bb0 <___svfprintf_internal_r+0x190>
    3bac:	04800044 	movi	r18,1
    3bb0:	01001a44 	movi	r4,105
    3bb4:	11001626 	beq	r2,r4,3c10 <___svfprintf_internal_r+0x1f0>
    3bb8:	20800916 	blt	r4,r2,3be0 <___svfprintf_internal_r+0x1c0>
    3bbc:	010018c4 	movi	r4,99
    3bc0:	11008a26 	beq	r2,r4,3dec <___svfprintf_internal_r+0x3cc>
    3bc4:	01001904 	movi	r4,100
    3bc8:	11001126 	beq	r2,r4,3c10 <___svfprintf_internal_r+0x1f0>
    3bcc:	01001604 	movi	r4,88
    3bd0:	1100ca1e 	bne	r2,r4,3efc <___svfprintf_internal_r+0x4dc>
    3bd4:	00c00044 	movi	r3,1
    3bd8:	d8c00e15 	stw	r3,56(sp)
    3bdc:	00001406 	br	3c30 <___svfprintf_internal_r+0x210>
    3be0:	01001cc4 	movi	r4,115
    3be4:	11009a26 	beq	r2,r4,3e50 <___svfprintf_internal_r+0x430>
    3be8:	20800416 	blt	r4,r2,3bfc <___svfprintf_internal_r+0x1dc>
    3bec:	01001bc4 	movi	r4,111
    3bf0:	1100c21e 	bne	r2,r4,3efc <___svfprintf_internal_r+0x4dc>
    3bf4:	05400204 	movi	r21,8
    3bf8:	00000e06 	br	3c34 <___svfprintf_internal_r+0x214>
    3bfc:	01001d44 	movi	r4,117
    3c00:	11000c26 	beq	r2,r4,3c34 <___svfprintf_internal_r+0x214>
    3c04:	01001e04 	movi	r4,120
    3c08:	11000926 	beq	r2,r4,3c30 <___svfprintf_internal_r+0x210>
    3c0c:	0000bb06 	br	3efc <___svfprintf_internal_r+0x4dc>
    3c10:	b5000104 	addi	r20,r22,4
    3c14:	b8000726 	beq	r23,zero,3c34 <___svfprintf_internal_r+0x214>
    3c18:	dd000d15 	stw	r20,52(sp)
    3c1c:	b5800017 	ldw	r22,0(r22)
    3c20:	b000080e 	bge	r22,zero,3c44 <___svfprintf_internal_r+0x224>
    3c24:	05adc83a 	sub	r22,zero,r22
    3c28:	02800044 	movi	r10,1
    3c2c:	00000606 	br	3c48 <___svfprintf_internal_r+0x228>
    3c30:	05400404 	movi	r21,16
    3c34:	b0c00104 	addi	r3,r22,4
    3c38:	d8c00d15 	stw	r3,52(sp)
    3c3c:	b5800017 	ldw	r22,0(r22)
    3c40:	002f883a 	mov	r23,zero
    3c44:	0015883a 	mov	r10,zero
    3c48:	d829883a 	mov	r20,sp
    3c4c:	b0001426 	beq	r22,zero,3ca0 <___svfprintf_internal_r+0x280>
    3c50:	b009883a 	mov	r4,r22
    3c54:	a80b883a 	mov	r5,r21
    3c58:	da801015 	stw	r10,64(sp)
    3c5c:	00017180 	call	1718 <__udivsi3>
    3c60:	1549383a 	mul	r4,r2,r21
    3c64:	00c00244 	movi	r3,9
    3c68:	da801017 	ldw	r10,64(sp)
    3c6c:	b12dc83a 	sub	r22,r22,r4
    3c70:	1d800216 	blt	r3,r22,3c7c <___svfprintf_internal_r+0x25c>
    3c74:	b5800c04 	addi	r22,r22,48
    3c78:	00000506 	br	3c90 <___svfprintf_internal_r+0x270>
    3c7c:	d8c00e17 	ldw	r3,56(sp)
    3c80:	18000226 	beq	r3,zero,3c8c <___svfprintf_internal_r+0x26c>
    3c84:	b5800dc4 	addi	r22,r22,55
    3c88:	00000106 	br	3c90 <___svfprintf_internal_r+0x270>
    3c8c:	b58015c4 	addi	r22,r22,87
    3c90:	a5800005 	stb	r22,0(r20)
    3c94:	a5000044 	addi	r20,r20,1
    3c98:	102d883a 	mov	r22,r2
    3c9c:	003feb06 	br	3c4c <__alt_mem_epcs+0xfffe2c4c>
    3ca0:	a6c7c83a 	sub	r3,r20,sp
    3ca4:	d8c00a15 	stw	r3,40(sp)
    3ca8:	90c5c83a 	sub	r2,r18,r3
    3cac:	00800a0e 	bge	zero,r2,3cd8 <___svfprintf_internal_r+0x2b8>
    3cb0:	a085883a 	add	r2,r20,r2
    3cb4:	01400c04 	movi	r5,48
    3cb8:	d8c00917 	ldw	r3,36(sp)
    3cbc:	a009883a 	mov	r4,r20
    3cc0:	a0c0032e 	bgeu	r20,r3,3cd0 <___svfprintf_internal_r+0x2b0>
    3cc4:	a5000044 	addi	r20,r20,1
    3cc8:	21400005 	stb	r5,0(r4)
    3ccc:	a0bffa1e 	bne	r20,r2,3cb8 <__alt_mem_epcs+0xfffe2cb8>
    3cd0:	a6c7c83a 	sub	r3,r20,sp
    3cd4:	d8c00a15 	stw	r3,40(sp)
    3cd8:	d8c00a17 	ldw	r3,40(sp)
    3cdc:	50d3883a 	add	r9,r10,r3
    3ce0:	d8c00b17 	ldw	r3,44(sp)
    3ce4:	8a6dc83a 	sub	r22,r17,r9
    3ce8:	18001726 	beq	r3,zero,3d48 <___svfprintf_internal_r+0x328>
    3cec:	50000a26 	beq	r10,zero,3d18 <___svfprintf_internal_r+0x2f8>
    3cf0:	00800b44 	movi	r2,45
    3cf4:	d8800805 	stb	r2,32(sp)
    3cf8:	e0800117 	ldw	r2,4(fp)
    3cfc:	01c00044 	movi	r7,1
    3d00:	d9800804 	addi	r6,sp,32
    3d04:	e00b883a 	mov	r5,fp
    3d08:	9809883a 	mov	r4,r19
    3d0c:	103ee83a 	callr	r2
    3d10:	10004d1e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3d14:	84000044 	addi	r16,r16,1
    3d18:	0580070e 	bge	zero,r22,3d38 <___svfprintf_internal_r+0x318>
    3d1c:	b00f883a 	mov	r7,r22
    3d20:	01800c04 	movi	r6,48
    3d24:	e00b883a 	mov	r5,fp
    3d28:	9809883a 	mov	r4,r19
    3d2c:	00039b40 	call	39b4 <print_repeat>
    3d30:	1000451e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3d34:	85a1883a 	add	r16,r16,r22
    3d38:	d8c00a17 	ldw	r3,40(sp)
    3d3c:	a013883a 	mov	r9,r20
    3d40:	1d2dc83a 	sub	r22,r3,r20
    3d44:	00002206 	br	3dd0 <___svfprintf_internal_r+0x3b0>
    3d48:	0580090e 	bge	zero,r22,3d70 <___svfprintf_internal_r+0x350>
    3d4c:	b00f883a 	mov	r7,r22
    3d50:	01800804 	movi	r6,32
    3d54:	e00b883a 	mov	r5,fp
    3d58:	9809883a 	mov	r4,r19
    3d5c:	da801015 	stw	r10,64(sp)
    3d60:	00039b40 	call	39b4 <print_repeat>
    3d64:	da801017 	ldw	r10,64(sp)
    3d68:	1000371e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3d6c:	85a1883a 	add	r16,r16,r22
    3d70:	503ff126 	beq	r10,zero,3d38 <__alt_mem_epcs+0xfffe2d38>
    3d74:	00800b44 	movi	r2,45
    3d78:	d8800805 	stb	r2,32(sp)
    3d7c:	e0800117 	ldw	r2,4(fp)
    3d80:	01c00044 	movi	r7,1
    3d84:	d9800804 	addi	r6,sp,32
    3d88:	e00b883a 	mov	r5,fp
    3d8c:	9809883a 	mov	r4,r19
    3d90:	103ee83a 	callr	r2
    3d94:	10002c1e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3d98:	84000044 	addi	r16,r16,1
    3d9c:	003fe606 	br	3d38 <__alt_mem_epcs+0xfffe2d38>
    3da0:	4a7fffc4 	addi	r9,r9,-1
    3da4:	48800003 	ldbu	r2,0(r9)
    3da8:	01c00044 	movi	r7,1
    3dac:	d9800804 	addi	r6,sp,32
    3db0:	d8800805 	stb	r2,32(sp)
    3db4:	e0800117 	ldw	r2,4(fp)
    3db8:	e00b883a 	mov	r5,fp
    3dbc:	da401015 	stw	r9,64(sp)
    3dc0:	9809883a 	mov	r4,r19
    3dc4:	103ee83a 	callr	r2
    3dc8:	da401017 	ldw	r9,64(sp)
    3dcc:	10001e1e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3dd0:	8245c83a 	sub	r2,r16,r9
    3dd4:	4d89883a 	add	r4,r9,r22
    3dd8:	a085883a 	add	r2,r20,r2
    3ddc:	013ff016 	blt	zero,r4,3da0 <__alt_mem_epcs+0xfffe2da0>
    3de0:	1021883a 	mov	r16,r2
    3de4:	dd800d17 	ldw	r22,52(sp)
    3de8:	00004406 	br	3efc <___svfprintf_internal_r+0x4dc>
    3dec:	00800044 	movi	r2,1
    3df0:	1440080e 	bge	r2,r17,3e14 <___svfprintf_internal_r+0x3f4>
    3df4:	8d3fffc4 	addi	r20,r17,-1
    3df8:	a00f883a 	mov	r7,r20
    3dfc:	01800804 	movi	r6,32
    3e00:	e00b883a 	mov	r5,fp
    3e04:	9809883a 	mov	r4,r19
    3e08:	00039b40 	call	39b4 <print_repeat>
    3e0c:	10000e1e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3e10:	8521883a 	add	r16,r16,r20
    3e14:	b0800017 	ldw	r2,0(r22)
    3e18:	01c00044 	movi	r7,1
    3e1c:	d80d883a 	mov	r6,sp
    3e20:	d8800005 	stb	r2,0(sp)
    3e24:	e0800117 	ldw	r2,4(fp)
    3e28:	e00b883a 	mov	r5,fp
    3e2c:	9809883a 	mov	r4,r19
    3e30:	b5000104 	addi	r20,r22,4
    3e34:	103ee83a 	callr	r2
    3e38:	1000031e 	bne	r2,zero,3e48 <___svfprintf_internal_r+0x428>
    3e3c:	84000044 	addi	r16,r16,1
    3e40:	a02d883a 	mov	r22,r20
    3e44:	00002d06 	br	3efc <___svfprintf_internal_r+0x4dc>
    3e48:	00bfffc4 	movi	r2,-1
    3e4c:	00003106 	br	3f14 <___svfprintf_internal_r+0x4f4>
    3e50:	b5000017 	ldw	r20,0(r22)
    3e54:	b0c00104 	addi	r3,r22,4
    3e58:	d8c00a15 	stw	r3,40(sp)
    3e5c:	a009883a 	mov	r4,r20
    3e60:	00039980 	call	3998 <strlen>
    3e64:	8893c83a 	sub	r9,r17,r2
    3e68:	102d883a 	mov	r22,r2
    3e6c:	0240090e 	bge	zero,r9,3e94 <___svfprintf_internal_r+0x474>
    3e70:	480f883a 	mov	r7,r9
    3e74:	01800804 	movi	r6,32
    3e78:	e00b883a 	mov	r5,fp
    3e7c:	9809883a 	mov	r4,r19
    3e80:	da401015 	stw	r9,64(sp)
    3e84:	00039b40 	call	39b4 <print_repeat>
    3e88:	da401017 	ldw	r9,64(sp)
    3e8c:	103fee1e 	bne	r2,zero,3e48 <__alt_mem_epcs+0xfffe2e48>
    3e90:	8261883a 	add	r16,r16,r9
    3e94:	e0800117 	ldw	r2,4(fp)
    3e98:	b00f883a 	mov	r7,r22
    3e9c:	a00d883a 	mov	r6,r20
    3ea0:	e00b883a 	mov	r5,fp
    3ea4:	9809883a 	mov	r4,r19
    3ea8:	103ee83a 	callr	r2
    3eac:	103fe61e 	bne	r2,zero,3e48 <__alt_mem_epcs+0xfffe2e48>
    3eb0:	85a1883a 	add	r16,r16,r22
    3eb4:	dd800a17 	ldw	r22,40(sp)
    3eb8:	00001006 	br	3efc <___svfprintf_internal_r+0x4dc>
    3ebc:	05c00044 	movi	r23,1
    3ec0:	04bfffc4 	movi	r18,-1
    3ec4:	d8000e15 	stw	zero,56(sp)
    3ec8:	05400284 	movi	r21,10
    3ecc:	9023883a 	mov	r17,r18
    3ed0:	d8000c15 	stw	zero,48(sp)
    3ed4:	d8000b15 	stw	zero,44(sp)
    3ed8:	b829883a 	mov	r20,r23
    3edc:	00000806 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3ee0:	dd000b15 	stw	r20,44(sp)
    3ee4:	05000084 	movi	r20,2
    3ee8:	00000506 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3eec:	00c00044 	movi	r3,1
    3ef0:	d8c00c15 	stw	r3,48(sp)
    3ef4:	050000c4 	movi	r20,3
    3ef8:	00000106 	br	3f00 <___svfprintf_internal_r+0x4e0>
    3efc:	0029883a 	mov	r20,zero
    3f00:	d8c00f17 	ldw	r3,60(sp)
    3f04:	18c00044 	addi	r3,r3,1
    3f08:	d8c00f15 	stw	r3,60(sp)
    3f0c:	003ede06 	br	3a88 <__alt_mem_epcs+0xfffe2a88>
    3f10:	8005883a 	mov	r2,r16
    3f14:	dfc01a17 	ldw	ra,104(sp)
    3f18:	df001917 	ldw	fp,100(sp)
    3f1c:	ddc01817 	ldw	r23,96(sp)
    3f20:	dd801717 	ldw	r22,92(sp)
    3f24:	dd401617 	ldw	r21,88(sp)
    3f28:	dd001517 	ldw	r20,84(sp)
    3f2c:	dcc01417 	ldw	r19,80(sp)
    3f30:	dc801317 	ldw	r18,76(sp)
    3f34:	dc401217 	ldw	r17,72(sp)
    3f38:	dc001117 	ldw	r16,68(sp)
    3f3c:	dec01b04 	addi	sp,sp,108
    3f40:	f800283a 	ret

00003f44 <__vfprintf_internal_unused>:
    3f44:	00800034 	movhi	r2,0
    3f48:	1098e404 	addi	r2,r2,25488
    3f4c:	300f883a 	mov	r7,r6
    3f50:	280d883a 	mov	r6,r5
    3f54:	200b883a 	mov	r5,r4
    3f58:	11000017 	ldw	r4,0(r2)
    3f5c:	0003a201 	jmpi	3a20 <___svfprintf_internal_r>

00003f60 <print_repeat>:
    3f60:	defffb04 	addi	sp,sp,-20
    3f64:	dc800315 	stw	r18,12(sp)
    3f68:	dc400215 	stw	r17,8(sp)
    3f6c:	dc000115 	stw	r16,4(sp)
    3f70:	dfc00415 	stw	ra,16(sp)
    3f74:	2025883a 	mov	r18,r4
    3f78:	2823883a 	mov	r17,r5
    3f7c:	d9800005 	stb	r6,0(sp)
    3f80:	3821883a 	mov	r16,r7
    3f84:	04000a0e 	bge	zero,r16,3fb0 <print_repeat+0x50>
    3f88:	88800117 	ldw	r2,4(r17)
    3f8c:	01c00044 	movi	r7,1
    3f90:	d80d883a 	mov	r6,sp
    3f94:	880b883a 	mov	r5,r17
    3f98:	9009883a 	mov	r4,r18
    3f9c:	103ee83a 	callr	r2
    3fa0:	843fffc4 	addi	r16,r16,-1
    3fa4:	103ff726 	beq	r2,zero,3f84 <__alt_mem_epcs+0xfffe2f84>
    3fa8:	00bfffc4 	movi	r2,-1
    3fac:	00000106 	br	3fb4 <print_repeat+0x54>
    3fb0:	0005883a 	mov	r2,zero
    3fb4:	dfc00417 	ldw	ra,16(sp)
    3fb8:	dc800317 	ldw	r18,12(sp)
    3fbc:	dc400217 	ldw	r17,8(sp)
    3fc0:	dc000117 	ldw	r16,4(sp)
    3fc4:	dec00504 	addi	sp,sp,20
    3fc8:	f800283a 	ret

00003fcc <___vfprintf_internal_r>:
    3fcc:	deffe504 	addi	sp,sp,-108
    3fd0:	d8c00804 	addi	r3,sp,32
    3fd4:	df001915 	stw	fp,100(sp)
    3fd8:	ddc01815 	stw	r23,96(sp)
    3fdc:	dd801715 	stw	r22,92(sp)
    3fe0:	dd401615 	stw	r21,88(sp)
    3fe4:	dd001515 	stw	r20,84(sp)
    3fe8:	dcc01415 	stw	r19,80(sp)
    3fec:	dc801315 	stw	r18,76(sp)
    3ff0:	dc401215 	stw	r17,72(sp)
    3ff4:	dc001115 	stw	r16,68(sp)
    3ff8:	dfc01a15 	stw	ra,104(sp)
    3ffc:	2027883a 	mov	r19,r4
    4000:	2839883a 	mov	fp,r5
    4004:	382d883a 	mov	r22,r7
    4008:	d9800f15 	stw	r6,60(sp)
    400c:	0021883a 	mov	r16,zero
    4010:	d8000e15 	stw	zero,56(sp)
    4014:	002f883a 	mov	r23,zero
    4018:	002b883a 	mov	r21,zero
    401c:	0025883a 	mov	r18,zero
    4020:	0023883a 	mov	r17,zero
    4024:	d8000c15 	stw	zero,48(sp)
    4028:	d8000b15 	stw	zero,44(sp)
    402c:	0029883a 	mov	r20,zero
    4030:	d8c00915 	stw	r3,36(sp)
    4034:	d8c00f17 	ldw	r3,60(sp)
    4038:	19000003 	ldbu	r4,0(r3)
    403c:	20803fcc 	andi	r2,r4,255
    4040:	1080201c 	xori	r2,r2,128
    4044:	10bfe004 	addi	r2,r2,-128
    4048:	10011c26 	beq	r2,zero,44bc <___vfprintf_internal_r+0x4f0>
    404c:	00c00044 	movi	r3,1
    4050:	a0c01426 	beq	r20,r3,40a4 <___vfprintf_internal_r+0xd8>
    4054:	1d000216 	blt	r3,r20,4060 <___vfprintf_internal_r+0x94>
    4058:	a0000626 	beq	r20,zero,4074 <___vfprintf_internal_r+0xa8>
    405c:	00011306 	br	44ac <___vfprintf_internal_r+0x4e0>
    4060:	01400084 	movi	r5,2
    4064:	a1401d26 	beq	r20,r5,40dc <___vfprintf_internal_r+0x110>
    4068:	014000c4 	movi	r5,3
    406c:	a1402926 	beq	r20,r5,4114 <___vfprintf_internal_r+0x148>
    4070:	00010e06 	br	44ac <___vfprintf_internal_r+0x4e0>
    4074:	01400944 	movi	r5,37
    4078:	1140fb26 	beq	r2,r5,4468 <___vfprintf_internal_r+0x49c>
    407c:	e0800117 	ldw	r2,4(fp)
    4080:	d9000005 	stb	r4,0(sp)
    4084:	01c00044 	movi	r7,1
    4088:	d80d883a 	mov	r6,sp
    408c:	e00b883a 	mov	r5,fp
    4090:	9809883a 	mov	r4,r19
    4094:	103ee83a 	callr	r2
    4098:	1000d61e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    409c:	84000044 	addi	r16,r16,1
    40a0:	00010206 	br	44ac <___vfprintf_internal_r+0x4e0>
    40a4:	01400c04 	movi	r5,48
    40a8:	1140f826 	beq	r2,r5,448c <___vfprintf_internal_r+0x4c0>
    40ac:	01400944 	movi	r5,37
    40b0:	11400a1e 	bne	r2,r5,40dc <___vfprintf_internal_r+0x110>
    40b4:	d8800005 	stb	r2,0(sp)
    40b8:	e0800117 	ldw	r2,4(fp)
    40bc:	a00f883a 	mov	r7,r20
    40c0:	d80d883a 	mov	r6,sp
    40c4:	e00b883a 	mov	r5,fp
    40c8:	9809883a 	mov	r4,r19
    40cc:	103ee83a 	callr	r2
    40d0:	1000c81e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    40d4:	84000044 	addi	r16,r16,1
    40d8:	0000f306 	br	44a8 <___vfprintf_internal_r+0x4dc>
    40dc:	217ff404 	addi	r5,r4,-48
    40e0:	29403fcc 	andi	r5,r5,255
    40e4:	00c00244 	movi	r3,9
    40e8:	19400736 	bltu	r3,r5,4108 <___vfprintf_internal_r+0x13c>
    40ec:	00bfffc4 	movi	r2,-1
    40f0:	88800226 	beq	r17,r2,40fc <___vfprintf_internal_r+0x130>
    40f4:	8c4002a4 	muli	r17,r17,10
    40f8:	00000106 	br	4100 <___vfprintf_internal_r+0x134>
    40fc:	0023883a 	mov	r17,zero
    4100:	2c63883a 	add	r17,r5,r17
    4104:	0000e206 	br	4490 <___vfprintf_internal_r+0x4c4>
    4108:	01400b84 	movi	r5,46
    410c:	1140e426 	beq	r2,r5,44a0 <___vfprintf_internal_r+0x4d4>
    4110:	05000084 	movi	r20,2
    4114:	213ff404 	addi	r4,r4,-48
    4118:	21003fcc 	andi	r4,r4,255
    411c:	00c00244 	movi	r3,9
    4120:	19000736 	bltu	r3,r4,4140 <___vfprintf_internal_r+0x174>
    4124:	00bfffc4 	movi	r2,-1
    4128:	90800226 	beq	r18,r2,4134 <___vfprintf_internal_r+0x168>
    412c:	948002a4 	muli	r18,r18,10
    4130:	00000106 	br	4138 <___vfprintf_internal_r+0x16c>
    4134:	0025883a 	mov	r18,zero
    4138:	24a5883a 	add	r18,r4,r18
    413c:	0000db06 	br	44ac <___vfprintf_internal_r+0x4e0>
    4140:	00c01b04 	movi	r3,108
    4144:	10c0d426 	beq	r2,r3,4498 <___vfprintf_internal_r+0x4cc>
    4148:	013fffc4 	movi	r4,-1
    414c:	91000226 	beq	r18,r4,4158 <___vfprintf_internal_r+0x18c>
    4150:	d8000b15 	stw	zero,44(sp)
    4154:	00000106 	br	415c <___vfprintf_internal_r+0x190>
    4158:	04800044 	movi	r18,1
    415c:	01001a44 	movi	r4,105
    4160:	11001626 	beq	r2,r4,41bc <___vfprintf_internal_r+0x1f0>
    4164:	20800916 	blt	r4,r2,418c <___vfprintf_internal_r+0x1c0>
    4168:	010018c4 	movi	r4,99
    416c:	11008a26 	beq	r2,r4,4398 <___vfprintf_internal_r+0x3cc>
    4170:	01001904 	movi	r4,100
    4174:	11001126 	beq	r2,r4,41bc <___vfprintf_internal_r+0x1f0>
    4178:	01001604 	movi	r4,88
    417c:	1100ca1e 	bne	r2,r4,44a8 <___vfprintf_internal_r+0x4dc>
    4180:	00c00044 	movi	r3,1
    4184:	d8c00e15 	stw	r3,56(sp)
    4188:	00001406 	br	41dc <___vfprintf_internal_r+0x210>
    418c:	01001cc4 	movi	r4,115
    4190:	11009a26 	beq	r2,r4,43fc <___vfprintf_internal_r+0x430>
    4194:	20800416 	blt	r4,r2,41a8 <___vfprintf_internal_r+0x1dc>
    4198:	01001bc4 	movi	r4,111
    419c:	1100c21e 	bne	r2,r4,44a8 <___vfprintf_internal_r+0x4dc>
    41a0:	05400204 	movi	r21,8
    41a4:	00000e06 	br	41e0 <___vfprintf_internal_r+0x214>
    41a8:	01001d44 	movi	r4,117
    41ac:	11000c26 	beq	r2,r4,41e0 <___vfprintf_internal_r+0x214>
    41b0:	01001e04 	movi	r4,120
    41b4:	11000926 	beq	r2,r4,41dc <___vfprintf_internal_r+0x210>
    41b8:	0000bb06 	br	44a8 <___vfprintf_internal_r+0x4dc>
    41bc:	b5000104 	addi	r20,r22,4
    41c0:	b8000726 	beq	r23,zero,41e0 <___vfprintf_internal_r+0x214>
    41c4:	dd000d15 	stw	r20,52(sp)
    41c8:	b5800017 	ldw	r22,0(r22)
    41cc:	b000080e 	bge	r22,zero,41f0 <___vfprintf_internal_r+0x224>
    41d0:	05adc83a 	sub	r22,zero,r22
    41d4:	02800044 	movi	r10,1
    41d8:	00000606 	br	41f4 <___vfprintf_internal_r+0x228>
    41dc:	05400404 	movi	r21,16
    41e0:	b0c00104 	addi	r3,r22,4
    41e4:	d8c00d15 	stw	r3,52(sp)
    41e8:	b5800017 	ldw	r22,0(r22)
    41ec:	002f883a 	mov	r23,zero
    41f0:	0015883a 	mov	r10,zero
    41f4:	d829883a 	mov	r20,sp
    41f8:	b0001426 	beq	r22,zero,424c <___vfprintf_internal_r+0x280>
    41fc:	b009883a 	mov	r4,r22
    4200:	a80b883a 	mov	r5,r21
    4204:	da801015 	stw	r10,64(sp)
    4208:	00017180 	call	1718 <__udivsi3>
    420c:	1549383a 	mul	r4,r2,r21
    4210:	00c00244 	movi	r3,9
    4214:	da801017 	ldw	r10,64(sp)
    4218:	b12dc83a 	sub	r22,r22,r4
    421c:	1d800216 	blt	r3,r22,4228 <___vfprintf_internal_r+0x25c>
    4220:	b5800c04 	addi	r22,r22,48
    4224:	00000506 	br	423c <___vfprintf_internal_r+0x270>
    4228:	d8c00e17 	ldw	r3,56(sp)
    422c:	18000226 	beq	r3,zero,4238 <___vfprintf_internal_r+0x26c>
    4230:	b5800dc4 	addi	r22,r22,55
    4234:	00000106 	br	423c <___vfprintf_internal_r+0x270>
    4238:	b58015c4 	addi	r22,r22,87
    423c:	a5800005 	stb	r22,0(r20)
    4240:	a5000044 	addi	r20,r20,1
    4244:	102d883a 	mov	r22,r2
    4248:	003feb06 	br	41f8 <__alt_mem_epcs+0xfffe31f8>
    424c:	a6c7c83a 	sub	r3,r20,sp
    4250:	d8c00a15 	stw	r3,40(sp)
    4254:	90c5c83a 	sub	r2,r18,r3
    4258:	00800a0e 	bge	zero,r2,4284 <___vfprintf_internal_r+0x2b8>
    425c:	a085883a 	add	r2,r20,r2
    4260:	01400c04 	movi	r5,48
    4264:	d8c00917 	ldw	r3,36(sp)
    4268:	a009883a 	mov	r4,r20
    426c:	a0c0032e 	bgeu	r20,r3,427c <___vfprintf_internal_r+0x2b0>
    4270:	a5000044 	addi	r20,r20,1
    4274:	21400005 	stb	r5,0(r4)
    4278:	a0bffa1e 	bne	r20,r2,4264 <__alt_mem_epcs+0xfffe3264>
    427c:	a6c7c83a 	sub	r3,r20,sp
    4280:	d8c00a15 	stw	r3,40(sp)
    4284:	d8c00a17 	ldw	r3,40(sp)
    4288:	50d3883a 	add	r9,r10,r3
    428c:	d8c00b17 	ldw	r3,44(sp)
    4290:	8a6dc83a 	sub	r22,r17,r9
    4294:	18001726 	beq	r3,zero,42f4 <___vfprintf_internal_r+0x328>
    4298:	50000a26 	beq	r10,zero,42c4 <___vfprintf_internal_r+0x2f8>
    429c:	00800b44 	movi	r2,45
    42a0:	d8800805 	stb	r2,32(sp)
    42a4:	e0800117 	ldw	r2,4(fp)
    42a8:	01c00044 	movi	r7,1
    42ac:	d9800804 	addi	r6,sp,32
    42b0:	e00b883a 	mov	r5,fp
    42b4:	9809883a 	mov	r4,r19
    42b8:	103ee83a 	callr	r2
    42bc:	10004d1e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    42c0:	84000044 	addi	r16,r16,1
    42c4:	0580070e 	bge	zero,r22,42e4 <___vfprintf_internal_r+0x318>
    42c8:	b00f883a 	mov	r7,r22
    42cc:	01800c04 	movi	r6,48
    42d0:	e00b883a 	mov	r5,fp
    42d4:	9809883a 	mov	r4,r19
    42d8:	0003f600 	call	3f60 <print_repeat>
    42dc:	1000451e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    42e0:	85a1883a 	add	r16,r16,r22
    42e4:	d8c00a17 	ldw	r3,40(sp)
    42e8:	a013883a 	mov	r9,r20
    42ec:	1d2dc83a 	sub	r22,r3,r20
    42f0:	00002206 	br	437c <___vfprintf_internal_r+0x3b0>
    42f4:	0580090e 	bge	zero,r22,431c <___vfprintf_internal_r+0x350>
    42f8:	b00f883a 	mov	r7,r22
    42fc:	01800804 	movi	r6,32
    4300:	e00b883a 	mov	r5,fp
    4304:	9809883a 	mov	r4,r19
    4308:	da801015 	stw	r10,64(sp)
    430c:	0003f600 	call	3f60 <print_repeat>
    4310:	da801017 	ldw	r10,64(sp)
    4314:	1000371e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    4318:	85a1883a 	add	r16,r16,r22
    431c:	503ff126 	beq	r10,zero,42e4 <__alt_mem_epcs+0xfffe32e4>
    4320:	00800b44 	movi	r2,45
    4324:	d8800805 	stb	r2,32(sp)
    4328:	e0800117 	ldw	r2,4(fp)
    432c:	01c00044 	movi	r7,1
    4330:	d9800804 	addi	r6,sp,32
    4334:	e00b883a 	mov	r5,fp
    4338:	9809883a 	mov	r4,r19
    433c:	103ee83a 	callr	r2
    4340:	10002c1e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    4344:	84000044 	addi	r16,r16,1
    4348:	003fe606 	br	42e4 <__alt_mem_epcs+0xfffe32e4>
    434c:	4a7fffc4 	addi	r9,r9,-1
    4350:	48800003 	ldbu	r2,0(r9)
    4354:	01c00044 	movi	r7,1
    4358:	d9800804 	addi	r6,sp,32
    435c:	d8800805 	stb	r2,32(sp)
    4360:	e0800117 	ldw	r2,4(fp)
    4364:	e00b883a 	mov	r5,fp
    4368:	da401015 	stw	r9,64(sp)
    436c:	9809883a 	mov	r4,r19
    4370:	103ee83a 	callr	r2
    4374:	da401017 	ldw	r9,64(sp)
    4378:	10001e1e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    437c:	8245c83a 	sub	r2,r16,r9
    4380:	4d89883a 	add	r4,r9,r22
    4384:	a085883a 	add	r2,r20,r2
    4388:	013ff016 	blt	zero,r4,434c <__alt_mem_epcs+0xfffe334c>
    438c:	1021883a 	mov	r16,r2
    4390:	dd800d17 	ldw	r22,52(sp)
    4394:	00004406 	br	44a8 <___vfprintf_internal_r+0x4dc>
    4398:	00800044 	movi	r2,1
    439c:	1440080e 	bge	r2,r17,43c0 <___vfprintf_internal_r+0x3f4>
    43a0:	8d3fffc4 	addi	r20,r17,-1
    43a4:	a00f883a 	mov	r7,r20
    43a8:	01800804 	movi	r6,32
    43ac:	e00b883a 	mov	r5,fp
    43b0:	9809883a 	mov	r4,r19
    43b4:	0003f600 	call	3f60 <print_repeat>
    43b8:	10000e1e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    43bc:	8521883a 	add	r16,r16,r20
    43c0:	b0800017 	ldw	r2,0(r22)
    43c4:	01c00044 	movi	r7,1
    43c8:	d80d883a 	mov	r6,sp
    43cc:	d8800005 	stb	r2,0(sp)
    43d0:	e0800117 	ldw	r2,4(fp)
    43d4:	e00b883a 	mov	r5,fp
    43d8:	9809883a 	mov	r4,r19
    43dc:	b5000104 	addi	r20,r22,4
    43e0:	103ee83a 	callr	r2
    43e4:	1000031e 	bne	r2,zero,43f4 <___vfprintf_internal_r+0x428>
    43e8:	84000044 	addi	r16,r16,1
    43ec:	a02d883a 	mov	r22,r20
    43f0:	00002d06 	br	44a8 <___vfprintf_internal_r+0x4dc>
    43f4:	00bfffc4 	movi	r2,-1
    43f8:	00003106 	br	44c0 <___vfprintf_internal_r+0x4f4>
    43fc:	b5000017 	ldw	r20,0(r22)
    4400:	b0c00104 	addi	r3,r22,4
    4404:	d8c00a15 	stw	r3,40(sp)
    4408:	a009883a 	mov	r4,r20
    440c:	00039980 	call	3998 <strlen>
    4410:	8893c83a 	sub	r9,r17,r2
    4414:	102d883a 	mov	r22,r2
    4418:	0240090e 	bge	zero,r9,4440 <___vfprintf_internal_r+0x474>
    441c:	480f883a 	mov	r7,r9
    4420:	01800804 	movi	r6,32
    4424:	e00b883a 	mov	r5,fp
    4428:	9809883a 	mov	r4,r19
    442c:	da401015 	stw	r9,64(sp)
    4430:	0003f600 	call	3f60 <print_repeat>
    4434:	da401017 	ldw	r9,64(sp)
    4438:	103fee1e 	bne	r2,zero,43f4 <__alt_mem_epcs+0xfffe33f4>
    443c:	8261883a 	add	r16,r16,r9
    4440:	e0800117 	ldw	r2,4(fp)
    4444:	b00f883a 	mov	r7,r22
    4448:	a00d883a 	mov	r6,r20
    444c:	e00b883a 	mov	r5,fp
    4450:	9809883a 	mov	r4,r19
    4454:	103ee83a 	callr	r2
    4458:	103fe61e 	bne	r2,zero,43f4 <__alt_mem_epcs+0xfffe33f4>
    445c:	85a1883a 	add	r16,r16,r22
    4460:	dd800a17 	ldw	r22,40(sp)
    4464:	00001006 	br	44a8 <___vfprintf_internal_r+0x4dc>
    4468:	05c00044 	movi	r23,1
    446c:	04bfffc4 	movi	r18,-1
    4470:	d8000e15 	stw	zero,56(sp)
    4474:	05400284 	movi	r21,10
    4478:	9023883a 	mov	r17,r18
    447c:	d8000c15 	stw	zero,48(sp)
    4480:	d8000b15 	stw	zero,44(sp)
    4484:	b829883a 	mov	r20,r23
    4488:	00000806 	br	44ac <___vfprintf_internal_r+0x4e0>
    448c:	dd000b15 	stw	r20,44(sp)
    4490:	05000084 	movi	r20,2
    4494:	00000506 	br	44ac <___vfprintf_internal_r+0x4e0>
    4498:	00c00044 	movi	r3,1
    449c:	d8c00c15 	stw	r3,48(sp)
    44a0:	050000c4 	movi	r20,3
    44a4:	00000106 	br	44ac <___vfprintf_internal_r+0x4e0>
    44a8:	0029883a 	mov	r20,zero
    44ac:	d8c00f17 	ldw	r3,60(sp)
    44b0:	18c00044 	addi	r3,r3,1
    44b4:	d8c00f15 	stw	r3,60(sp)
    44b8:	003ede06 	br	4034 <__alt_mem_epcs+0xfffe3034>
    44bc:	8005883a 	mov	r2,r16
    44c0:	dfc01a17 	ldw	ra,104(sp)
    44c4:	df001917 	ldw	fp,100(sp)
    44c8:	ddc01817 	ldw	r23,96(sp)
    44cc:	dd801717 	ldw	r22,92(sp)
    44d0:	dd401617 	ldw	r21,88(sp)
    44d4:	dd001517 	ldw	r20,84(sp)
    44d8:	dcc01417 	ldw	r19,80(sp)
    44dc:	dc801317 	ldw	r18,76(sp)
    44e0:	dc401217 	ldw	r17,72(sp)
    44e4:	dc001117 	ldw	r16,68(sp)
    44e8:	dec01b04 	addi	sp,sp,108
    44ec:	f800283a 	ret

000044f0 <__vfprintf_internal>:
    44f0:	00800034 	movhi	r2,0
    44f4:	1098e404 	addi	r2,r2,25488
    44f8:	300f883a 	mov	r7,r6
    44fc:	280d883a 	mov	r6,r5
    4500:	200b883a 	mov	r5,r4
    4504:	11000017 	ldw	r4,0(r2)
    4508:	0003fcc1 	jmpi	3fcc <___vfprintf_internal_r>

0000450c <__sfvwrite_small_dev>:
    450c:	2880000b 	ldhu	r2,0(r5)
    4510:	1080020c 	andi	r2,r2,8
    4514:	10002126 	beq	r2,zero,459c <__sfvwrite_small_dev+0x90>
    4518:	2880008f 	ldh	r2,2(r5)
    451c:	defffa04 	addi	sp,sp,-24
    4520:	dc000015 	stw	r16,0(sp)
    4524:	dfc00515 	stw	ra,20(sp)
    4528:	dd000415 	stw	r20,16(sp)
    452c:	dcc00315 	stw	r19,12(sp)
    4530:	dc800215 	stw	r18,8(sp)
    4534:	dc400115 	stw	r17,4(sp)
    4538:	2821883a 	mov	r16,r5
    453c:	10001216 	blt	r2,zero,4588 <__sfvwrite_small_dev+0x7c>
    4540:	2027883a 	mov	r19,r4
    4544:	3025883a 	mov	r18,r6
    4548:	3823883a 	mov	r17,r7
    454c:	05010004 	movi	r20,1024
    4550:	04400b0e 	bge	zero,r17,4580 <__sfvwrite_small_dev+0x74>
    4554:	880f883a 	mov	r7,r17
    4558:	a440010e 	bge	r20,r17,4560 <__sfvwrite_small_dev+0x54>
    455c:	01c10004 	movi	r7,1024
    4560:	8140008f 	ldh	r5,2(r16)
    4564:	900d883a 	mov	r6,r18
    4568:	9809883a 	mov	r4,r19
    456c:	00046cc0 	call	46cc <_write_r>
    4570:	0080050e 	bge	zero,r2,4588 <__sfvwrite_small_dev+0x7c>
    4574:	88a3c83a 	sub	r17,r17,r2
    4578:	90a5883a 	add	r18,r18,r2
    457c:	003ff406 	br	4550 <__alt_mem_epcs+0xfffe3550>
    4580:	0005883a 	mov	r2,zero
    4584:	00000706 	br	45a4 <__sfvwrite_small_dev+0x98>
    4588:	8080000b 	ldhu	r2,0(r16)
    458c:	10801014 	ori	r2,r2,64
    4590:	8080000d 	sth	r2,0(r16)
    4594:	00bfffc4 	movi	r2,-1
    4598:	00000206 	br	45a4 <__sfvwrite_small_dev+0x98>
    459c:	00bfffc4 	movi	r2,-1
    45a0:	f800283a 	ret
    45a4:	dfc00517 	ldw	ra,20(sp)
    45a8:	dd000417 	ldw	r20,16(sp)
    45ac:	dcc00317 	ldw	r19,12(sp)
    45b0:	dc800217 	ldw	r18,8(sp)
    45b4:	dc400117 	ldw	r17,4(sp)
    45b8:	dc000017 	ldw	r16,0(sp)
    45bc:	dec00604 	addi	sp,sp,24
    45c0:	f800283a 	ret

000045c4 <__sfvwrite_small_str>:
    45c4:	2880000b 	ldhu	r2,0(r5)
    45c8:	10c0020c 	andi	r3,r2,8
    45cc:	18002026 	beq	r3,zero,4650 <__sfvwrite_small_str+0x8c>
    45d0:	28c0008f 	ldh	r3,2(r5)
    45d4:	defffd04 	addi	sp,sp,-12
    45d8:	dc000015 	stw	r16,0(sp)
    45dc:	dfc00215 	stw	ra,8(sp)
    45e0:	dc400115 	stw	r17,4(sp)
    45e4:	2821883a 	mov	r16,r5
    45e8:	1800150e 	bge	r3,zero,4640 <__sfvwrite_small_str+0x7c>
    45ec:	10c0800c 	andi	r3,r2,512
    45f0:	18001326 	beq	r3,zero,4640 <__sfvwrite_small_str+0x7c>
    45f4:	2c400517 	ldw	r17,20(r5)
    45f8:	89c0030e 	bge	r17,r7,4608 <__sfvwrite_small_str+0x44>
    45fc:	10c0200c 	andi	r3,r2,128
    4600:	18000326 	beq	r3,zero,4610 <__sfvwrite_small_str+0x4c>
    4604:	00000e06 	br	4640 <__sfvwrite_small_str+0x7c>
    4608:	3c40010e 	bge	r7,r17,4610 <__sfvwrite_small_str+0x4c>
    460c:	3823883a 	mov	r17,r7
    4610:	81000417 	ldw	r4,16(r16)
    4614:	300b883a 	mov	r5,r6
    4618:	880d883a 	mov	r6,r17
    461c:	000466c0 	call	466c <memmove>
    4620:	80800517 	ldw	r2,20(r16)
    4624:	1445c83a 	sub	r2,r2,r17
    4628:	80800515 	stw	r2,20(r16)
    462c:	80800417 	ldw	r2,16(r16)
    4630:	1463883a 	add	r17,r2,r17
    4634:	84400415 	stw	r17,16(r16)
    4638:	0005883a 	mov	r2,zero
    463c:	00000606 	br	4658 <__sfvwrite_small_str+0x94>
    4640:	10801014 	ori	r2,r2,64
    4644:	8080000d 	sth	r2,0(r16)
    4648:	00bfffc4 	movi	r2,-1
    464c:	00000206 	br	4658 <__sfvwrite_small_str+0x94>
    4650:	00bfffc4 	movi	r2,-1
    4654:	f800283a 	ret
    4658:	dfc00217 	ldw	ra,8(sp)
    465c:	dc400117 	ldw	r17,4(sp)
    4660:	dc000017 	ldw	r16,0(sp)
    4664:	dec00304 	addi	sp,sp,12
    4668:	f800283a 	ret

0000466c <memmove>:
    466c:	2005883a 	mov	r2,r4
    4670:	218f883a 	add	r7,r4,r6
    4674:	29000236 	bltu	r5,r4,4680 <memmove+0x14>
    4678:	1007883a 	mov	r3,r2
    467c:	00000c06 	br	46b0 <memmove+0x44>
    4680:	2987883a 	add	r3,r5,r6
    4684:	20fffc2e 	bgeu	r4,r3,4678 <__alt_mem_epcs+0xfffe3678>
    4688:	380b883a 	mov	r5,r7
    468c:	30cdc83a 	sub	r6,r6,r3
    4690:	1989883a 	add	r4,r3,r6
    4694:	20000526 	beq	r4,zero,46ac <memmove+0x40>
    4698:	18ffffc4 	addi	r3,r3,-1
    469c:	19000003 	ldbu	r4,0(r3)
    46a0:	297fffc4 	addi	r5,r5,-1
    46a4:	29000005 	stb	r4,0(r5)
    46a8:	003ff906 	br	4690 <__alt_mem_epcs+0xfffe3690>
    46ac:	f800283a 	ret
    46b0:	19c00526 	beq	r3,r7,46c8 <memmove+0x5c>
    46b4:	29000003 	ldbu	r4,0(r5)
    46b8:	18c00044 	addi	r3,r3,1
    46bc:	29400044 	addi	r5,r5,1
    46c0:	193fffc5 	stb	r4,-1(r3)
    46c4:	003ffa06 	br	46b0 <__alt_mem_epcs+0xfffe36b0>
    46c8:	f800283a 	ret

000046cc <_write_r>:
    46cc:	defffd04 	addi	sp,sp,-12
    46d0:	dc000015 	stw	r16,0(sp)
    46d4:	04000034 	movhi	r16,0
    46d8:	dc400115 	stw	r17,4(sp)
    46dc:	8418e704 	addi	r16,r16,25500
    46e0:	2023883a 	mov	r17,r4
    46e4:	2809883a 	mov	r4,r5
    46e8:	300b883a 	mov	r5,r6
    46ec:	380d883a 	mov	r6,r7
    46f0:	dfc00215 	stw	ra,8(sp)
    46f4:	80000015 	stw	zero,0(r16)
    46f8:	00047540 	call	4754 <write>
    46fc:	00ffffc4 	movi	r3,-1
    4700:	10c0031e 	bne	r2,r3,4710 <_write_r+0x44>
    4704:	80c00017 	ldw	r3,0(r16)
    4708:	18000126 	beq	r3,zero,4710 <_write_r+0x44>
    470c:	88c00015 	stw	r3,0(r17)
    4710:	dfc00217 	ldw	ra,8(sp)
    4714:	dc400117 	ldw	r17,4(sp)
    4718:	dc000017 	ldw	r16,0(sp)
    471c:	dec00304 	addi	sp,sp,12
    4720:	f800283a 	ret

00004724 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4724:	f800283a 	ret

00004728 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4728:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    472c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4730:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4734:	00047b40 	call	47b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4738:	00047d40 	call	47d4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    473c:	d1a00517 	ldw	r6,-32748(gp)
    4740:	d1600617 	ldw	r5,-32744(gp)
    4744:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4748:	dfc00017 	ldw	ra,0(sp)
    474c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4750:	000108c1 	jmpi	108c <main>

00004754 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4754:	00800044 	movi	r2,1
    4758:	20800226 	beq	r4,r2,4764 <write+0x10>
    475c:	00800084 	movi	r2,2
    4760:	2080041e 	bne	r4,r2,4774 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4764:	01000034 	movhi	r4,0
    4768:	000f883a 	mov	r7,zero
    476c:	2118e504 	addi	r4,r4,25492
    4770:	00047e81 	jmpi	47e8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4774:	d0a00317 	ldw	r2,-32756(gp)
    4778:	10000926 	beq	r2,zero,47a0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    477c:	deffff04 	addi	sp,sp,-4
    4780:	dfc00015 	stw	ra,0(sp)
    4784:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4788:	00c01444 	movi	r3,81
    478c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4790:	00bfffc4 	movi	r2,-1
    4794:	dfc00017 	ldw	ra,0(sp)
    4798:	dec00104 	addi	sp,sp,4
    479c:	f800283a 	ret
    47a0:	d0a00404 	addi	r2,gp,-32752
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    47a4:	00c01444 	movi	r3,81
    47a8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    47ac:	00bfffc4 	movi	r2,-1
    47b0:	f800283a 	ret

000047b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    47b4:	deffff04 	addi	sp,sp,-4
    47b8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    47bc:	000486c0 	call	486c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    47c0:	00800044 	movi	r2,1
    47c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    47c8:	dfc00017 	ldw	ra,0(sp)
    47cc:	dec00104 	addi	sp,sp,4
    47d0:	f800283a 	ret

000047d4 <alt_sys_init>:
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( COUNTER_0, counter_0);
    47d4:	008000b4 	movhi	r2,2
    47d8:	10881804 	addi	r2,r2,8288
    47dc:	00c00044 	movi	r3,1
    47e0:	10c00035 	stwio	r3,0(r2)
    47e4:	f800283a 	ret

000047e8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    47e8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    47ec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    47f0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    47f4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    47f8:	2980072e 	bgeu	r5,r6,4818 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    47fc:	38c00037 	ldwio	r3,0(r7)
    4800:	18ffffec 	andhi	r3,r3,65535
    4804:	183ffc26 	beq	r3,zero,47f8 <__alt_mem_epcs+0xfffe37f8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4808:	28c00007 	ldb	r3,0(r5)
    480c:	20c00035 	stwio	r3,0(r4)
    4810:	29400044 	addi	r5,r5,1
    4814:	003ff806 	br	47f8 <__alt_mem_epcs+0xfffe37f8>

  return count;
}
    4818:	f800283a 	ret

0000481c <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
    481c:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    4820:	280a913a 	slli	r5,r5,4
    4824:	2145883a 	add	r2,r4,r5
    4828:	10800037 	ldwio	r2,0(r2)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    482c:	29400104 	addi	r5,r5,4
    4830:	2149883a 	add	r4,r4,r5
    4834:	20c00037 	ldwio	r3,0(r4)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
    4838:	f800283a 	ret

0000483c <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  return perf_get_section_time (hw_base_address, 0);
    483c:	000b883a 	mov	r5,zero
    4840:	000481c1 	jmpi	481c <perf_get_section_time>

00004844 <perf_get_num_starts>:
}

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  return IORD(hw_base_address, ((which_section*4)+2));
    4844:	280a913a 	slli	r5,r5,4
    4848:	29400204 	addi	r5,r5,8
    484c:	2149883a 	add	r4,r4,r5
}
    4850:	20800037 	ldwio	r2,0(r4)
    4854:	f800283a 	ret

00004858 <alt_get_performance_counter_base>:
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
#endif
}
    4858:	0005883a 	mov	r2,zero
    485c:	f800283a 	ret

00004860 <alt_get_cpu_freq>:
 */
alt_u32 
alt_get_cpu_freq()
{
    return ALT_CPU_FREQ;
}
    4860:	0080bef4 	movhi	r2,763
    4864:	10bc2004 	addi	r2,r2,-3968
    4868:	f800283a 	ret

0000486c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    486c:	000170fa 	wrctl	ienable,zero
    4870:	f800283a 	ret
