
NiosSys1.elf:     file format elf32-littlenios2
NiosSys1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006750 memsz 0x00006760 flags rwx
    LOAD off    0x00008000 vaddr 0x00021000 paddr 0x00021000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00021000  00021000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00008000  2**0
                  CONTENTS
  2 .text         00004ad8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000388  00004af8  00004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018f0  00004e80  00004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00006770  00006770  00007770  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00006780  00006780  00008000  2**0
                  CONTENTS
  7 .epcs         00000000  00021020  00021020  00008000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005e0  00000000  00000000  00008028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009305  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000323c  00000000  00000000  0001190d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003c78  00000000  00000000  00014b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b2c  00000000  00000000  000187c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a60  00000000  00000000  000192f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000070cc  00000000  00000000  0001ad50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00021e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000b78  00000000  00000000  00021e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002433a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0002433d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00024349  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002434a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002434b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002434f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00024353  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00024357  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00024362  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0002436d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00024378  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  00024382  2**0
                  CONTENTS, READONLY
 30 .jdi          00005634  00000000  00000000  000243a6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00057d5c  00000000  00000000  000299da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00021000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00004af8 l    d  .rodata	00000000 .rodata
00004e80 l    d  .rwdata	00000000 .rwdata
00006770 l    d  .bss	00000000 .bss
00006780 l    d  .onchip_memory	00000000 .onchip_memory
00021020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NiosSys1_bsp//obj/HAL/src/crt0.o
00000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 aes.c
00000000 l    df *ABS*	00000000 aestab.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003b8c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00004138 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00006680 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0000392c g     F .text	0000001c putchar
000049ac g     F .text	0000002c alt_main
00003b44 g     F .text	0000002c strcpy
00003948 g     F .text	00000080 _puts_r
00000b48 g     F .text	0000010c InvShiftRows
00005280 g     O .rwdata	00000100 Xtime3Sbox
000038d8 g     F .text	0000004c printf
00004ae4 g     F .text	0000000c alt_get_cpu_freq
00005180 g     O .rwdata	00000100 Xtime9
00000ff0 g     F .text	0000009c Decrypt
00001988 g     F .text	00000440 .hidden __divsf3
00004844 g     F .text	00000060 memmove
00003a8c g     F .text	000000b8 snprintf
00002368 g     F .text	00000070 .hidden __fixsfsi
000024c8 g     F .text	000000dc .hidden __gtdf2
00004af0 g     F .text	00000008 altera_nios2_gen2_irq_init
0000479c g     F .text	000000a8 __sfvwrite_small_str
00021000 g     F .entry	00000000 __reset
00006770 g     O .bss	00000004 errno
00006778 g     O .bss	00000004 alt_argv
00000694 g     F .text	0000010c ShiftRows
0000e760 g       *ABS*	00000000 _gp
00001e84 g     F .text	000004e4 .hidden __subsf3
00003924 g     F .text	00000008 _putchar_r
00003854 g     F .text	00000028 memcpy
000007a0 g     F .text	00000304 MixSubColumns
000039c8 g     F .text	00000014 puts
000016f0 g     F .text	00000010 timer_elapsed
0000389c g     F .text	0000003c _printf_r
000018cc g     F .text	00000064 .hidden __udivsi3
00001760 g     F .text	00000074 .hidden __fixunsdfsi
00004ac8 g     F .text	00000014 perf_get_num_starts
00006080 g     O .rwdata	00000400 aestab_SBox0
0000164c g     F .text	00000014 timer_elapsed_global
00004f80 g     O .rwdata	00000100 XtimeD
00001698 g     F .text	00000014 timer_read_to
000036e0 g     F .text	00000110 .hidden __extendsfdf2
00006760 g     O .rwdata	00000004 _global_impure_ptr
00006780 g       *ABS*	00000000 __bss_end
00003638 g     F .text	000000a8 .hidden __floatunsidf
000015f4 g     F .text	00000048 __timer_start
00006480 g     O .rwdata	00000100 InvSbox
000049a8 g     F .text	00000004 alt_dcache_flush_all
00000224 g     F .text	00000178 ExpandKey
000035b8 g     F .text	00000080 .hidden __fixdfsi
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000049d8 g     F .text	00000060 write
000048f8 g     F .text	00000058 _putc_r
00001dc8 g     F .text	000000bc .hidden __gtsf2
00006768 g     O .rwdata	00000004 jtag_uart_0
00001930 g     F .text	00000058 .hidden __umodsi3
00006780 g       *ABS*	00000000 end
00001680 g     F .text	00000018 timer_start
00004e80 g     O .rwdata	00000100 XtimeE
000186a0 g       *ABS*	00000000 __alt_stack_pointer
000037f0 g     F .text	00000064 .hidden __clzsi2
000039dc g     F .text	000000b0 _snprintf_r
00004a6c g     F .text	00000034 altera_avalon_jtag_uart_write
000041a4 g     F .text	00000524 ___vfprintf_internal_r
00000020 g     F .text	00000038 _start
00004a58 g     F .text	00000014 alt_sys_init
00001580 g     F .text	00000010 __timer_reset
00005880 g     O .rwdata	00000400 aestab_SBox2
00004aa0 g     F .text	00000020 perf_get_section_time
00006780 g       *ABS*	00000000 __alt_stack_base
00004ac0 g     F .text	00000008 perf_get_total_time
000025a4 g     F .text	00000718 .hidden __muldf3
00003bf8 g     F .text	00000524 ___svfprintf_internal_r
000016d8 g     F .text	00000018 timer_wait_for_to
000046e4 g     F .text	000000b8 __sfvwrite_small_dev
00000aa4 g     F .text	000000a4 aes_blockenc_NOacc
00006770 g       *ABS*	00000000 __bss_start
0000163c g     F .text	00000010 timer_start_global
0000387c g     F .text	00000020 memset
00005c80 g     O .rwdata	00000400 aestab_SBox1
0000108c g     F .text	000004f4 main
00006774 g     O .bss	00000004 alt_envp
0000676c g     O .rwdata	00000004 alt_errno
0000039c g     F .text	000002d4 aes_blockenc_SWacc
000048a4 g     F .text	00000054 putc
000017d4 g     F .text	00000084 .hidden __divsi3
00004a38 g     F .text	00000020 alt_irq_init
00004d7c g     O .rodata	00000100 .hidden __clz_tab
00005080 g     O .rwdata	00000100 XtimeB
00001dc8 g     F .text	000000bc .hidden __gesf2
00004950 g     F .text	00000058 _write_r
00006764 g     O .rwdata	00000004 _impure_ptr
0000677c g     O .bss	00000004 alt_argc
0000411c g     F .text	0000001c __vfprintf_internal_unused
00001660 g     F .text	00000020 timer_reset
000016ac g     F .text	0000002c timer_wait
00000058 g     F .text	000001cc aes_keyexpand128
00006770 g       *ABS*	00000000 _edata
00006780 g       *ABS*	00000000 _end
00004adc g     F .text	00000008 alt_get_performance_counter_base
000023d8 g     F .text	000000f0 .hidden __floatunsisf
00001858 g     F .text	00000074 .hidden __modsi3
00005380 g     O .rwdata	00000100 Xtime2Sbox
000186a0 g       *ABS*	00000000 __alt_data_end
00001590 g     F .text	00000064 __timer_elapsed
00001700 g     F .text	00000060 .hidden __fixunssfsi
00021000 g       .entry	00000000 _exit
00006580 g     O .rwdata	00000100 Sbox
00003b70 g     F .text	0000001c strlen
000024c8 g     F .text	000000dc .hidden __gedf2
00005480 g     O .rwdata	00000400 aestab_SBox3
000046c8 g     F .text	0000001c __vfprintf_internal
00021000 g       *ABS*	00000000 __alt_mem_epcs
00002cbc g     F .text	000008fc .hidden __subdf3
00000670 g     F .text	00000024 AddRoundKey
00000c54 g     F .text	0000039c InvMixSubColumns



Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6b9d814 	ori	gp,gp,59232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	1099dc14 	ori	r2,r2,26480

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18d9e014 	ori	r3,r3,26496

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <__alt_mem_epcs+0xfffdf044>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      50:	00049ac0 	call	49ac <alt_main>

00000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      54:	003fff06 	br	54 <__alt_mem_epcs+0xfffdf054>

00000058 <aes_keyexpand128>:
void aes_keyexpand128(uint8* key, uint8* keyexp)
{
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
      58:	20800017 	ldw	r2,0(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      5c:	defff704 	addi	sp,sp,-36
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
      60:	01c00034 	movhi	r7,0
void aes_keyexpand128(uint8* key, uint8* keyexp)
{
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
      64:	28800015 	stw	r2,0(r5)
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
      68:	20800117 	ldw	r2,4(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      6c:	dfc00815 	stw	ra,32(sp)
      70:	dd400515 	stw	r21,20(sp)
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
      74:	28800115 	stw	r2,4(r5)
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
      78:	20800217 	ldw	r2,8(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      7c:	dd000415 	stw	r20,16(sp)
      80:	dcc00315 	stw	r19,12(sp)
    uint32 i;
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
      84:	28800215 	stw	r2,8(r5)
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);
      88:	20800317 	ldw	r2,12(r4)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      8c:	dc800215 	stw	r18,8(sp)
      90:	dc400115 	stw	r17,4(sp)
      94:	dc000015 	stw	r16,0(sp)
    uint8 Rcon;

    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);
      98:	28800315 	stw	r2,12(r5)

//-------------------------------------------------------------------------------
// Key expansion routines...the two produce identical output, you may use either

void aes_keyexpand128(uint8* key, uint8* keyexp)
{
      9c:	ddc00715 	stw	r23,28(sp)
      a0:	dd800615 	stw	r22,24(sp)
      a4:	2d000344 	addi	r20,r5,13
      a8:	29000404 	addi	r4,r5,16
      ac:	2cc00044 	addi	r19,r5,1
      b0:	2c800384 	addi	r18,r5,14
      b4:	2c400444 	addi	r17,r5,17
      b8:	2c000084 	addi	r16,r5,2
      bc:	2fc003c4 	addi	ra,r5,15
      c0:	2bc00484 	addi	r15,r5,18
      c4:	2b8000c4 	addi	r14,r5,3
      c8:	29800304 	addi	r6,r5,12
      cc:	2b4004c4 	addi	r13,r5,19
      d0:	2b000104 	addi	r12,r5,4
      d4:	2ac00504 	addi	r11,r5,20
      d8:	2a800204 	addi	r10,r5,8
      dc:	2a400604 	addi	r9,r5,24
      e0:	2a000704 	addi	r8,r5,28
      e4:	2d402c04 	addi	r21,r5,176
    *(uint32 *)(keyexp   ) = *(uint32 *)(key   );
    *(uint32 *)(keyexp+4 ) = *(uint32 *)(key+4 );
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;
      e8:	00800044 	movi	r2,1

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
      ec:	39d96004 	addi	r7,r7,25984
      f0:	a5c00003 	ldbu	r23,0(r20)
      f4:	28c00003 	ldbu	r3,0(r5)
      f8:	21000404 	addi	r4,r4,16
      fc:	3def883a 	add	r23,r7,r23
     100:	18acf03a 	xor	r22,r3,r2
     104:	b8c00003 	ldbu	r3,0(r23)
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
        Rcon=((Rcon<<1)&0xFE)^
     108:	10803fcc 	andi	r2,r2,255
     10c:	29400404 	addi	r5,r5,16
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
     110:	b0c6f03a 	xor	r3,r22,r3
     114:	20fffc05 	stb	r3,-16(r4)
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
     118:	90c00003 	ldbu	r3,0(r18)
     11c:	a5000404 	addi	r20,r20,16
     120:	9cc00404 	addi	r19,r19,16
     124:	38c7883a 	add	r3,r7,r3
     128:	1d800003 	ldbu	r22,0(r3)
     12c:	98fffc03 	ldbu	r3,-16(r19)
     130:	94800404 	addi	r18,r18,16
     134:	8c400404 	addi	r17,r17,16
     138:	b0c6f03a 	xor	r3,r22,r3
     13c:	88fffc05 	stb	r3,-16(r17)
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
     140:	f8c00003 	ldbu	r3,0(ra)
     144:	84000404 	addi	r16,r16,16
     148:	ffc00404 	addi	ra,ra,16
     14c:	38c7883a 	add	r3,r7,r3
     150:	1d800003 	ldbu	r22,0(r3)
     154:	80fffc03 	ldbu	r3,-16(r16)
     158:	7bc00404 	addi	r15,r15,16
     15c:	73800404 	addi	r14,r14,16
     160:	b0c6f03a 	xor	r3,r22,r3
     164:	78fffc05 	stb	r3,-16(r15)
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
     168:	30c00003 	ldbu	r3,0(r6)
     16c:	6b400404 	addi	r13,r13,16
     170:	31800404 	addi	r6,r6,16
     174:	38c7883a 	add	r3,r7,r3
     178:	1d800003 	ldbu	r22,0(r3)
     17c:	70fffc03 	ldbu	r3,-16(r14)
     180:	63000404 	addi	r12,r12,16
     184:	5ac00404 	addi	r11,r11,16
     188:	b0c6f03a 	xor	r3,r22,r3
        Rcon=((Rcon<<1)&0xFE)^
     18c:	102cd0fa 	srli	r22,r2,3
    for(i=1;i<11;i++) {
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
     190:	68fffc05 	stb	r3,-16(r13)
        Rcon=((Rcon<<1)&0xFE)^
     194:	1087883a 	add	r3,r2,r2
     198:	b580040c 	andi	r22,r22,16
     19c:	b0c6f03a 	xor	r3,r22,r3
     1a0:	102cd1fa 	srli	r22,r2,7
     1a4:	52800404 	addi	r10,r10,16
     1a8:	4a400404 	addi	r9,r9,16
     1ac:	1dacf03a 	xor	r22,r3,r22
     1b0:	1006d13a 	srli	r3,r2,4
     1b4:	1004d1ba 	srli	r2,r2,6
     1b8:	42000404 	addi	r8,r8,16
     1bc:	18c0020c 	andi	r3,r3,8
     1c0:	b0c6f03a 	xor	r3,r22,r3
     1c4:	1080008c 	andi	r2,r2,2
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
     1c8:	65bffc17 	ldw	r22,-16(r12)
        *(keyexp+i*16  )=*(keyexp+i*16-16)^Sbox[*(keyexp+i*16-3)]
            ^Rcon;
        *(keyexp+i*16+1)=*(keyexp+i*16-15)^Sbox[*(keyexp+i*16-2)];
        *(keyexp+i*16+2)=*(keyexp+i*16-14)^Sbox[*(keyexp+i*16-1)];
        *(keyexp+i*16+3)=*(keyexp+i*16-13)^Sbox[*(keyexp+i*16-4)];
        Rcon=((Rcon<<1)&0xFE)^
     1cc:	1884f03a 	xor	r2,r3,r2
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
     1d0:	20fffc17 	ldw	r3,-16(r4)
     1d4:	b0ecf03a 	xor	r22,r22,r3
        Rcon=((Rcon<<1)&0xFE)^
            ((Rcon>>3)&0x10)^
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
     1d8:	5dbffc15 	stw	r22,-16(r11)
            ^*(uint32 *)(keyexp+i*16   );
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
            ^*(uint32 *)(keyexp+i*16+4 );
     1dc:	50fffc17 	ldw	r3,-16(r10)
     1e0:	b0c6f03a 	xor	r3,r22,r3
            ((Rcon>>4)&0x08)^
            ((Rcon>>6)&0x02)^
            ((Rcon>>7));
        *(uint32 *)(keyexp+i*16+4) =*(uint32 *)(keyexp+i*16-12)
            ^*(uint32 *)(keyexp+i*16   );
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
     1e4:	48fffc15 	stw	r3,-16(r9)
            ^*(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(keyexp+i*16+12)=*(uint32 *)(keyexp+i*16-4 )
     1e8:	35bffc17 	ldw	r22,-16(r6)
     1ec:	b0c6f03a 	xor	r3,r22,r3
     1f0:	40fffc15 	stw	r3,-16(r8)
    *(uint32 *)(keyexp+8 ) = *(uint32 *)(key+8 );
    *(uint32 *)(keyexp+12) = *(uint32 *)(key+12);

    Rcon = 0x01;

    for(i=1;i<11;i++) {
     1f4:	257fbe1e 	bne	r4,r21,f0 <__alt_mem_epcs+0xfffdf0f0>
        *(uint32 *)(keyexp+i*16+8) =*(uint32 *)(keyexp+i*16-8 )
            ^*(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(keyexp+i*16+12)=*(uint32 *)(keyexp+i*16-4 )
            ^*(uint32 *)(keyexp+i*16+8 );
    };
}
     1f8:	dfc00817 	ldw	ra,32(sp)
     1fc:	ddc00717 	ldw	r23,28(sp)
     200:	dd800617 	ldw	r22,24(sp)
     204:	dd400517 	ldw	r21,20(sp)
     208:	dd000417 	ldw	r20,16(sp)
     20c:	dcc00317 	ldw	r19,12(sp)
     210:	dc800217 	ldw	r18,8(sp)
     214:	dc400117 	ldw	r17,4(sp)
     218:	dc000017 	ldw	r16,0(sp)
     21c:	dec00904 	addi	sp,sp,36
     220:	f800283a 	ret

00000224 <ExpandKey>:



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     224:	defff704 	addi	sp,sp,-36
     228:	dc000315 	stw	r16,12(sp)
     22c:	2821883a 	mov	r16,r5
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     230:	01400034 	movhi	r5,0



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     234:	dc400415 	stw	r17,16(sp)
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     238:	018002c4 	movi	r6,11



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     23c:	2023883a 	mov	r17,r4
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     240:	2952be04 	addi	r5,r5,19192
     244:	d809883a 	mov	r4,sp



// produce Nb bytes for each round
void ExpandKey (uint8* key, uint8* expkey)
{
     248:	dfc00815 	stw	ra,32(sp)
     24c:	dd000715 	stw	r20,28(sp)
     250:	dcc00615 	stw	r19,24(sp)
     254:	dc800515 	stw	r18,20(sp)
    int i;
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
     258:	00038540 	call	3854 <memcpy>
     25c:	8809883a 	mov	r4,r17
     260:	803f883a 	mov	ra,r16
     264:	88c00404 	addi	r3,r17,16
     268:	8005883a 	mov	r2,r16
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];
     26c:	21400003 	ldbu	r5,0(r4)
     270:	21000044 	addi	r4,r4,1
     274:	10800044 	addi	r2,r2,1
     278:	117fffc5 	stb	r5,-1(r2)
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
     27c:	20fffb1e 	bne	r4,r3,26c <__alt_mem_epcs+0xfffdf26c>
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     280:	01c00034 	movhi	r7,0
     284:	84800304 	addi	r18,r16,12
     288:	84400344 	addi	r17,r16,13
     28c:	83c00384 	addi	r15,r16,14
     290:	838003c4 	addi	r14,r16,15
     294:	83400404 	addi	r13,r16,16
     298:	83000044 	addi	r12,r16,1
     29c:	82c00444 	addi	r11,r16,17
     2a0:	82800084 	addi	r10,r16,2
     2a4:	82400484 	addi	r9,r16,18
     2a8:	820000c4 	addi	r8,r16,3
    uint8 tmp0, tmp1, tmp2, tmp3, tmp4;
    unsigned idx;
    uint8 Rcon_[11] = {
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
     2ac:	01800104 	movi	r6,4
     2b0:	840004c4 	addi	r16,r16,19
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     2b4:	39d96004 	addi	r7,r7,25984

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     2b8:	04c00b04 	movi	r19,44
        tmp0 = expkey[4*idx - 4];
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
     2bc:	350000cc 	andi	r20,r6,3
    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
        tmp0 = expkey[4*idx - 4];
     2c0:	91400003 	ldbu	r5,0(r18)
        tmp1 = expkey[4*idx - 3];
     2c4:	89000003 	ldbu	r4,0(r17)
        tmp2 = expkey[4*idx - 2];
     2c8:	78c00003 	ldbu	r3,0(r15)
        tmp3 = expkey[4*idx - 1];
     2cc:	70800003 	ldbu	r2,0(r14)
        if( !(idx % Nk) ) {
     2d0:	a000101e 	bne	r20,zero,314 <ExpandKey+0xf0>
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     2d4:	29403fcc 	andi	r5,r5,255
     2d8:	3969883a 	add	r20,r7,r5
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
     2dc:	300ad0ba 	srli	r5,r6,2
     2e0:	21003fcc 	andi	r4,r4,255
     2e4:	3909883a 	add	r4,r7,r4
     2e8:	d94b883a 	add	r5,sp,r5
     2ec:	21000003 	ldbu	r4,0(r4)
     2f0:	29400003 	ldbu	r5,0(r5)
            tmp1 = Sbox[tmp2];
     2f4:	18c03fcc 	andi	r3,r3,255
            tmp2 = Sbox[tmp4];
     2f8:	10803fcc 	andi	r2,r2,255
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
            tmp1 = Sbox[tmp2];
     2fc:	38c7883a 	add	r3,r7,r3
            tmp2 = Sbox[tmp4];
     300:	3885883a 	add	r2,r7,r2
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
            tmp0 = Sbox[tmp1] ^ Rcon_[idx/Nk];
     304:	290af03a 	xor	r5,r5,r4
            tmp1 = Sbox[tmp2];
     308:	19000003 	ldbu	r4,0(r3)
            tmp2 = Sbox[tmp4];
     30c:	10c00003 	ldbu	r3,0(r2)
        tmp1 = expkey[4*idx - 3];
        tmp2 = expkey[4*idx - 2];
        tmp3 = expkey[4*idx - 1];
        if( !(idx % Nk) ) {
            tmp4 = tmp3;
            tmp3 = Sbox[tmp0];
     310:	a0800003 	ldbu	r2,0(r20)
            tmp1 = Sbox[tmp1];
            tmp2 = Sbox[tmp2];
            tmp3 = Sbox[tmp3];
        }

        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
     314:	fd000003 	ldbu	r20,0(ra)

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     318:	31800044 	addi	r6,r6,1
     31c:	94800104 	addi	r18,r18,4
            tmp1 = Sbox[tmp1];
            tmp2 = Sbox[tmp2];
            tmp3 = Sbox[tmp3];
        }

        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
     320:	a14af03a 	xor	r5,r20,r5
     324:	69400005 	stb	r5,0(r13)
        expkey[4*idx+1] = expkey[4*idx - 4*Nk + 1] ^ tmp1;
     328:	61400003 	ldbu	r5,0(r12)
     32c:	ffc00104 	addi	ra,ra,4
     330:	8c400104 	addi	r17,r17,4
     334:	2908f03a 	xor	r4,r5,r4
     338:	59000005 	stb	r4,0(r11)
        expkey[4*idx+2] = expkey[4*idx - 4*Nk + 2] ^ tmp2;
     33c:	51000003 	ldbu	r4,0(r10)
     340:	7bc00104 	addi	r15,r15,4
     344:	73800104 	addi	r14,r14,4
     348:	20c6f03a 	xor	r3,r4,r3
     34c:	48c00005 	stb	r3,0(r9)
        expkey[4*idx+3] = expkey[4*idx - 4*Nk + 3] ^ tmp3;
     350:	40c00003 	ldbu	r3,0(r8)
     354:	6b400104 	addi	r13,r13,4
     358:	63000104 	addi	r12,r12,4
     35c:	1884f03a 	xor	r2,r3,r2
     360:	80800005 	stb	r2,0(r16)
     364:	5ac00104 	addi	r11,r11,4
     368:	52800104 	addi	r10,r10,4
     36c:	4a400104 	addi	r9,r9,4
     370:	42000104 	addi	r8,r8,4
     374:	84000104 	addi	r16,r16,4

    for(i = 0; i < Nk*4; i++)  // Ugly substitute for memcpy
        expkey[i] = key[i];

    //		   4         4*11
    for( idx = Nk; idx < Nb * (Nr + 1); idx++ ) {
     378:	34ffd01e 	bne	r6,r19,2bc <__alt_mem_epcs+0xfffdf2bc>
        expkey[4*idx+0] = expkey[4*idx - 4*Nk + 0] ^ tmp0;
        expkey[4*idx+1] = expkey[4*idx - 4*Nk + 1] ^ tmp1;
        expkey[4*idx+2] = expkey[4*idx - 4*Nk + 2] ^ tmp2;
        expkey[4*idx+3] = expkey[4*idx - 4*Nk + 3] ^ tmp3;
    }
}
     37c:	dfc00817 	ldw	ra,32(sp)
     380:	dd000717 	ldw	r20,28(sp)
     384:	dcc00617 	ldw	r19,24(sp)
     388:	dc800517 	ldw	r18,20(sp)
     38c:	dc400417 	ldw	r17,16(sp)
     390:	dc000317 	ldw	r16,12(sp)
     394:	dec00904 	addi	sp,sp,36
     398:	f800283a 	ret

0000039c <aes_blockenc_SWacc>:
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
     39c:	20c00017 	ldw	r3,0(r4)
     3a0:	30800017 	ldw	r2,0(r6)


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3a4:	deffed04 	addi	sp,sp,-76
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     3a8:	03000034 	movhi	r12,0
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
     3ac:	1884f03a 	xor	r2,r3,r2
     3b0:	28800015 	stw	r2,0(r5)
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
     3b4:	20c00117 	ldw	r3,4(r4)
     3b8:	30800117 	ldw	r2,4(r6)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     3bc:	02c00034 	movhi	r11,0
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     3c0:	02800034 	movhi	r10,0
{
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
     3c4:	1884f03a 	xor	r2,r3,r2
     3c8:	28800115 	stw	r2,4(r5)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
     3cc:	20c00217 	ldw	r3,8(r4)
     3d0:	30800217 	ldw	r2,8(r6)
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     3d4:	02400034 	movhi	r9,0


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3d8:	dfc01215 	stw	ra,72(sp)
    uint32 rounds = 10; //aes_128;
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
     3dc:	1884f03a 	xor	r2,r3,r2
     3e0:	28800215 	stw	r2,8(r5)
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
     3e4:	20c00317 	ldw	r3,12(r4)
     3e8:	30800317 	ldw	r2,12(r6)


//-------------------------------------------------------------------------------
// Software-accelerated block encryption routine
void aes_blockenc_SWacc(uint8* src, uint8* dest, uint8* keyexp)
{
     3ec:	dc401115 	stw	r17,68(sp)
     3f0:	dc001015 	stw	r16,64(sp)
    uint32 i;
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
     3f4:	1884f03a 	xor	r2,r3,r2
     3f8:	28800315 	stw	r2,12(r5)
     3fc:	32000404 	addi	r8,r6,16
     400:	33c00504 	addi	r15,r6,20
     404:	33800604 	addi	r14,r6,24
     408:	33400704 	addi	r13,r6,28
     40c:	37c02804 	addi	ra,r6,160
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     410:	63182004 	addi	r12,r12,24704
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     414:	5ad72004 	addi	r11,r11,23680
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     418:	52962004 	addi	r10,r10,22656
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     41c:	4a552004 	addi	r9,r9,21632
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
     420:	28800003 	ldbu	r2,0(r5)
     424:	42000404 	addi	r8,r8,16
     428:	7bc00404 	addi	r15,r15,16
     42c:	1085883a 	add	r2,r2,r2
     430:	1085883a 	add	r2,r2,r2
     434:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     438:	28800143 	ldbu	r2,5(r5)
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     43c:	19c00017 	ldw	r7,0(r3)
     440:	73800404 	addi	r14,r14,16
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
     444:	1085883a 	add	r2,r2,r2
     448:	1085883a 	add	r2,r2,r2
     44c:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     450:	10800017 	ldw	r2,0(r2)
     454:	6b400404 	addi	r13,r13,16
     458:	388ef03a 	xor	r7,r7,r2
     45c:	28800283 	ldbu	r2,10(r5)
     460:	1085883a 	add	r2,r2,r2
     464:	1085883a 	add	r2,r2,r2
     468:	1285883a 	add	r2,r2,r10
     46c:	10800017 	ldw	r2,0(r2)
     470:	3886f03a 	xor	r3,r7,r2
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
     474:	288003c3 	ldbu	r2,15(r5)
     478:	1085883a 	add	r2,r2,r2
     47c:	1085883a 	add	r2,r2,r2
     480:	1245883a 	add	r2,r2,r9
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     484:	11c00017 	ldw	r7,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
     488:	28800103 	ldbu	r2,4(r5)
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
     48c:	19cef03a 	xor	r7,r3,r7
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
     490:	1085883a 	add	r2,r2,r2
     494:	1085883a 	add	r2,r2,r2
     498:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
     49c:	28800243 	ldbu	r2,9(r5)
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4a0:	19000017 	ldw	r4,0(r3)
        *(uint32 *)(temp  )=*(uint32 *)(aestab_SBox0+*(dest   )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
     4a4:	1085883a 	add	r2,r2,r2
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4b0:	10800017 	ldw	r2,0(r2)
     4b4:	2088f03a 	xor	r4,r4,r2
     4b8:	28800383 	ldbu	r2,14(r5)
     4bc:	1085883a 	add	r2,r2,r2
     4c0:	1085883a 	add	r2,r2,r2
     4c4:	1285883a 	add	r2,r2,r10
     4c8:	10800017 	ldw	r2,0(r2)
     4cc:	2086f03a 	xor	r3,r4,r2
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
     4d0:	288000c3 	ldbu	r2,3(r5)
     4d4:	1085883a 	add	r2,r2,r2
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4e0:	11000017 	ldw	r4,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
     4e4:	28800203 	ldbu	r2,8(r5)
            *(uint32 *)(aestab_SBox1+*(dest+5 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+10)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+15)*4);
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
     4e8:	1908f03a 	xor	r4,r3,r4
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
     4ec:	1085883a 	add	r2,r2,r2
     4f0:	1085883a 	add	r2,r2,r2
     4f4:	1307883a 	add	r3,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
     4f8:	28800343 	ldbu	r2,13(r5)
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     4fc:	18c00017 	ldw	r3,0(r3)
        *(uint32 *)(temp+1)=*(uint32 *)(aestab_SBox0+*(dest+4 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
     500:	1085883a 	add	r2,r2,r2
     504:	1085883a 	add	r2,r2,r2
     508:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     50c:	10800017 	ldw	r2,0(r2)
     510:	1886f03a 	xor	r3,r3,r2
     514:	28800083 	ldbu	r2,2(r5)
     518:	1085883a 	add	r2,r2,r2
     51c:	1085883a 	add	r2,r2,r2
     520:	1285883a 	add	r2,r2,r10
     524:	10800017 	ldw	r2,0(r2)
     528:	1886f03a 	xor	r3,r3,r2
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
     52c:	288001c3 	ldbu	r2,7(r5)
     530:	1085883a 	add	r2,r2,r2
     534:	1085883a 	add	r2,r2,r2
     538:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+9 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+14)*4)^
            *(uint32 *)(aestab_SBox3+*(dest+3 )*4);
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
     53c:	10800017 	ldw	r2,0(r2)
     540:	1886f03a 	xor	r3,r3,r2
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
     544:	28800303 	ldbu	r2,12(r5)
     548:	1085883a 	add	r2,r2,r2
     54c:	1085883a 	add	r2,r2,r2
     550:	1321883a 	add	r16,r2,r12
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
     554:	28800043 	ldbu	r2,1(r5)
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     558:	84000017 	ldw	r16,0(r16)
        *(uint32 *)(temp+2)=*(uint32 *)(aestab_SBox0+*(dest+8 )*4)^
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
     55c:	1085883a 	add	r2,r2,r2
     560:	1085883a 	add	r2,r2,r2
     564:	12c5883a 	add	r2,r2,r11
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     568:	10800017 	ldw	r2,0(r2)
     56c:	80a2f03a 	xor	r17,r16,r2
     570:	28800183 	ldbu	r2,6(r5)
     574:	1085883a 	add	r2,r2,r2
     578:	1085883a 	add	r2,r2,r2
     57c:	1285883a 	add	r2,r2,r10
     580:	14000017 	ldw	r16,0(r2)
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
     584:	288002c3 	ldbu	r2,11(r5)
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     588:	8c20f03a 	xor	r16,r17,r16
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
     58c:	1085883a 	add	r2,r2,r2
     590:	1085883a 	add	r2,r2,r2
     594:	1245883a 	add	r2,r2,r9
            *(uint32 *)(aestab_SBox1+*(dest+13)*4)^
            *(uint32 *)(aestab_SBox2+*(dest+2 )*4)^
            *(uint32 *)(aestab_SBox3+*(dest+7 )*4);
        *(uint32 *)(temp+3)=*(uint32 *)(aestab_SBox0+*(dest+12)*4)^
            *(uint32 *)(aestab_SBox1+*(dest+1 )*4)^
            *(uint32 *)(aestab_SBox2+*(dest+6 )*4)^
     598:	10800017 	ldw	r2,0(r2)
     59c:	8084f03a 	xor	r2,r16,r2
            *(uint32 *)(aestab_SBox3+*(dest+11)*4);
        *(uint32 *)(dest   )=*(uint32 *)(temp  )^
     5a0:	443ffc17 	ldw	r16,-16(r8)
     5a4:	81e0f03a 	xor	r16,r16,r7
     5a8:	2c000015 	stw	r16,0(r5)
            *(uint32 *)(keyexp+i*16   );
        *(uint32 *)(dest+4 )=*(uint32 *)(temp+1)^
     5ac:	7c3ffc17 	ldw	r16,-16(r15)
     5b0:	8120f03a 	xor	r16,r16,r4
     5b4:	2c000115 	stw	r16,4(r5)
            *(uint32 *)(keyexp+i*16+4 );
        *(uint32 *)(dest+8 )=*(uint32 *)(temp+2)^
     5b8:	743ffc17 	ldw	r16,-16(r14)
     5bc:	80e0f03a 	xor	r16,r16,r3
     5c0:	2c000215 	stw	r16,8(r5)
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
     5c4:	6c3ffc17 	ldw	r16,-16(r13)
     5c8:	80a0f03a 	xor	r16,r16,r2
     5cc:	2c000315 	stw	r16,12(r5)
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
     5d0:	fa3f931e 	bne	ra,r8,420 <__alt_mem_epcs+0xfffdf420>
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5d4:	02000034 	movhi	r8,0
     5d8:	d9000115 	stw	r4,4(sp)
     5dc:	d8800315 	stw	r2,12(sp)
     5e0:	d9c00015 	stw	r7,0(sp)
     5e4:	d8c00215 	stw	r3,8(sp)
    uint32 temp[16];
    *(uint32 *)(dest   )=*(uint32 *)(src   )^*(uint32 *)(keyexp   );
    *(uint32 *)(dest+4 )=*(uint32 *)(src+4 )^*(uint32 *)(keyexp+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(src+8 )^*(uint32 *)(keyexp+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(src+12)^*(uint32 *)(keyexp+12);
    for(i=1;i<rounds;i++) {
     5e8:	0005883a 	mov	r2,zero
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5ec:	42196004 	addi	r8,r8,25984
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     5f0:	01000404 	movi	r4,16
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     5f4:	10c00164 	muli	r3,r2,5
     5f8:	d88f883a 	add	r7,sp,r2
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     5fc:	10800044 	addi	r2,r2,1
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];
     600:	18c003cc 	andi	r3,r3,15
     604:	28c7883a 	add	r3,r5,r3
     608:	18c00003 	ldbu	r3,0(r3)
     60c:	40c7883a 	add	r3,r8,r3
     610:	18c00003 	ldbu	r3,0(r3)
     614:	38c00005 	stb	r3,0(r7)
            *(uint32 *)(keyexp+i*16+8 );
        *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
            *(uint32 *)(keyexp+i*16+12);
    };

    for(i=0;i<16;i++)
     618:	113ff61e 	bne	r2,r4,5f4 <__alt_mem_epcs+0xfffdf5f4>
        ((uint8 *)temp)[i]=Sbox[*(dest+((i*5)&0x0f))];

    *(uint32 *)(dest   )=*(uint32 *)(temp  )^
     61c:	30802817 	ldw	r2,160(r6)
     620:	d8c00017 	ldw	r3,0(sp)
     624:	1884f03a 	xor	r2,r3,r2
     628:	28800015 	stw	r2,0(r5)
        *(uint32 *)(keyexp+rounds*16   );
    *(uint32 *)(dest+4 )=*(uint32 *)(temp+1)^
     62c:	30802917 	ldw	r2,164(r6)
     630:	d8c00117 	ldw	r3,4(sp)
     634:	1884f03a 	xor	r2,r3,r2
     638:	28800115 	stw	r2,4(r5)
        *(uint32 *)(keyexp+rounds*16+4 );
    *(uint32 *)(dest+8 )=*(uint32 *)(temp+2)^
     63c:	30802a17 	ldw	r2,168(r6)
     640:	d8c00217 	ldw	r3,8(sp)
     644:	1884f03a 	xor	r2,r3,r2
     648:	28800215 	stw	r2,8(r5)
        *(uint32 *)(keyexp+rounds*16+8 );
    *(uint32 *)(dest+12)=*(uint32 *)(temp+3)^
     64c:	30802b17 	ldw	r2,172(r6)
     650:	d8c00317 	ldw	r3,12(sp)
     654:	1884f03a 	xor	r2,r3,r2
     658:	28800315 	stw	r2,12(r5)

    *(uint32 *)(temp  )=0;
    *(uint32 *)(temp+1)=0;
    *(uint32 *)(temp+2)=0;
    *(uint32 *)(temp+3)=0;
}
     65c:	dfc01217 	ldw	ra,72(sp)
     660:	dc401117 	ldw	r17,68(sp)
     664:	dc001017 	ldw	r16,64(sp)
     668:	dec01304 	addi	sp,sp,76
     66c:	f800283a 	ret

00000670 <AddRoundKey>:
        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    }
}

void AddRoundKey (unsigned *state, unsigned *key)
{
     670:	20c00404 	addi	r3,r4,16
    int idx;

    for( idx = 0; idx < 4; idx++ )  // This may also be done byte-at-a-time
        state[idx] ^= key[idx];
     674:	21800017 	ldw	r6,0(r4)
     678:	28800017 	ldw	r2,0(r5)
     67c:	21000104 	addi	r4,r4,4
     680:	29400104 	addi	r5,r5,4
     684:	3084f03a 	xor	r2,r6,r2
     688:	20bfff15 	stw	r2,-4(r4)

void AddRoundKey (unsigned *state, unsigned *key)
{
    int idx;

    for( idx = 0; idx < 4; idx++ )  // This may also be done byte-at-a-time
     68c:	20fff91e 	bne	r4,r3,674 <__alt_mem_epcs+0xfffdf674>
        state[idx] ^= key[idx];
}
     690:	f800283a 	ret

00000694 <ShiftRows>:
void ShiftRows (uint8 *state)
{
    uint8 tmp;

    // just substitute row 0
    state[0] = Sbox[state[0]];
     694:	20c00003 	ldbu	r3,0(r4)
     698:	00800034 	movhi	r2,0
     69c:	10996004 	addi	r2,r2,25984
     6a0:	10c7883a 	add	r3,r2,r3
     6a4:	18c00003 	ldbu	r3,0(r3)
     6a8:	20c00005 	stb	r3,0(r4)
    state[4] = Sbox[state[4]];
     6ac:	20c00103 	ldbu	r3,4(r4)
     6b0:	10c7883a 	add	r3,r2,r3
     6b4:	18c00003 	ldbu	r3,0(r3)
     6b8:	20c00105 	stb	r3,4(r4)
    state[8] = Sbox[state[8]];
     6bc:	20c00203 	ldbu	r3,8(r4)
     6c0:	10c7883a 	add	r3,r2,r3
     6c4:	18c00003 	ldbu	r3,0(r3)
     6c8:	20c00205 	stb	r3,8(r4)
    state[12] = Sbox[state[12]];
     6cc:	20c00303 	ldbu	r3,12(r4)
     6d0:	10c7883a 	add	r3,r2,r3
     6d4:	18c00003 	ldbu	r3,0(r3)
     6d8:	20c00305 	stb	r3,12(r4)

    // rotate row 1
    tmp = Sbox[state[1]];
     6dc:	20c00043 	ldbu	r3,1(r4)
     6e0:	10c7883a 	add	r3,r2,r3
     6e4:	19400003 	ldbu	r5,0(r3)
    state[1] = Sbox[state[5]];
     6e8:	20c00143 	ldbu	r3,5(r4)
     6ec:	10c7883a 	add	r3,r2,r3
     6f0:	18c00003 	ldbu	r3,0(r3)
     6f4:	20c00045 	stb	r3,1(r4)
    state[5] = Sbox[state[9]];
     6f8:	20c00243 	ldbu	r3,9(r4)
     6fc:	10c7883a 	add	r3,r2,r3
     700:	18c00003 	ldbu	r3,0(r3)
     704:	20c00145 	stb	r3,5(r4)
    state[9] = Sbox[state[13]];
     708:	20c00343 	ldbu	r3,13(r4)
     70c:	10c7883a 	add	r3,r2,r3
     710:	18c00003 	ldbu	r3,0(r3)
    state[13] = tmp;
     714:	21400345 	stb	r5,13(r4)

    // rotate row 1
    tmp = Sbox[state[1]];
    state[1] = Sbox[state[5]];
    state[5] = Sbox[state[9]];
    state[9] = Sbox[state[13]];
     718:	20c00245 	stb	r3,9(r4)
    state[13] = tmp;

    // rotate row 2
    tmp = Sbox[state[2]];
     71c:	20c00083 	ldbu	r3,2(r4)
     720:	10c7883a 	add	r3,r2,r3
     724:	19400003 	ldbu	r5,0(r3)
    state[2] = Sbox[state[10]];
     728:	20c00283 	ldbu	r3,10(r4)
     72c:	10c7883a 	add	r3,r2,r3
     730:	18c00003 	ldbu	r3,0(r3)
    state[10] = tmp;
     734:	21400285 	stb	r5,10(r4)
    state[9] = Sbox[state[13]];
    state[13] = tmp;

    // rotate row 2
    tmp = Sbox[state[2]];
    state[2] = Sbox[state[10]];
     738:	20c00085 	stb	r3,2(r4)
    state[10] = tmp;
    tmp = Sbox[state[6]];
     73c:	20c00183 	ldbu	r3,6(r4)
     740:	10c7883a 	add	r3,r2,r3
     744:	19400003 	ldbu	r5,0(r3)
    state[6] = Sbox[state[14]];
     748:	20c00383 	ldbu	r3,14(r4)
     74c:	10c7883a 	add	r3,r2,r3
     750:	18c00003 	ldbu	r3,0(r3)
    state[14] = tmp;
     754:	21400385 	stb	r5,14(r4)
    // rotate row 2
    tmp = Sbox[state[2]];
    state[2] = Sbox[state[10]];
    state[10] = tmp;
    tmp = Sbox[state[6]];
    state[6] = Sbox[state[14]];
     758:	20c00185 	stb	r3,6(r4)
    state[14] = tmp;

    // rotate row 3
    tmp = Sbox[state[15]];
     75c:	20c003c3 	ldbu	r3,15(r4)
     760:	10c7883a 	add	r3,r2,r3
     764:	19400003 	ldbu	r5,0(r3)
    state[15] = Sbox[state[11]];
     768:	20c002c3 	ldbu	r3,11(r4)
     76c:	10c7883a 	add	r3,r2,r3
     770:	18c00003 	ldbu	r3,0(r3)
     774:	20c003c5 	stb	r3,15(r4)
    state[11] = Sbox[state[7]];
     778:	20c001c3 	ldbu	r3,7(r4)
     77c:	10c7883a 	add	r3,r2,r3
     780:	18c00003 	ldbu	r3,0(r3)
     784:	20c002c5 	stb	r3,11(r4)
    state[7] = Sbox[state[3]];
     788:	20c000c3 	ldbu	r3,3(r4)
     78c:	10c5883a 	add	r2,r2,r3
     790:	10800003 	ldbu	r2,0(r2)
    state[3] = tmp;
     794:	214000c5 	stb	r5,3(r4)

    // rotate row 3
    tmp = Sbox[state[15]];
    state[15] = Sbox[state[11]];
    state[11] = Sbox[state[7]];
    state[7] = Sbox[state[3]];
     798:	208001c5 	stb	r2,7(r4)
    state[3] = tmp;
     79c:	f800283a 	ret

000007a0 <MixSubColumns>:
{
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
     7a0:	22400283 	ldbu	r9,10(r4)
     7a4:	21c003c3 	ldbu	r7,15(r4)
     7a8:	01400034 	movhi	r5,0
     7ac:	29596004 	addi	r5,r5,25984
     7b0:	2a45883a 	add	r2,r5,r9
     7b4:	13400003 	ldbu	r13,0(r2)
     7b8:	22000003 	ldbu	r8,0(r4)
     7bc:	22800143 	ldbu	r10,5(r4)
     7c0:	29c5883a 	add	r2,r5,r7
     7c4:	13000003 	ldbu	r12,0(r2)
     7c8:	00c00034 	movhi	r3,0
     7cc:	00800034 	movhi	r2,0
     7d0:	1094e004 	addi	r2,r2,21376
     7d4:	18d4a004 	addi	r3,r3,21120
     7d8:	1217883a 	add	r11,r2,r8
     7dc:	1a8d883a 	add	r6,r3,r10
     7e0:	5ac00003 	ldbu	r11,0(r11)
     7e4:	31800003 	ldbu	r6,0(r6)
    state[3] = tmp;
}

// Tis combines SubBytes, ShiftRows, and MixColumns
void MixSubColumns (uint8 *state)
{
     7e8:	defffc04 	addi	sp,sp,-16
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
     7ec:	598cf03a 	xor	r6,r11,r6
     7f0:	334cf03a 	xor	r6,r6,r13
     7f4:	330cf03a 	xor	r6,r6,r12
     7f8:	d9800005 	stb	r6,0(sp)
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     7fc:	2a0d883a 	add	r6,r5,r8
     800:	32c00003 	ldbu	r11,0(r6)
     804:	128d883a 	add	r6,r2,r10
     808:	31800003 	ldbu	r6,0(r6)
     80c:	62d8f03a 	xor	r12,r12,r11
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     810:	2a95883a 	add	r10,r5,r10
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     814:	6198f03a 	xor	r12,r12,r6
     818:	1a4d883a 	add	r6,r3,r9
     81c:	31800003 	ldbu	r6,0(r6)
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     820:	1253883a 	add	r9,r2,r9
     824:	4a400003 	ldbu	r9,0(r9)
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     828:	6198f03a 	xor	r12,r12,r6
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     82c:	51800003 	ldbu	r6,0(r10)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     830:	1a11883a 	add	r8,r3,r8
     834:	42000003 	ldbu	r8,0(r8)
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     838:	5996f03a 	xor	r11,r11,r6
     83c:	5a56f03a 	xor	r11,r11,r9
     840:	19d3883a 	add	r9,r3,r7
     844:	4a400003 	ldbu	r9,0(r9)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     848:	11cf883a 	add	r7,r2,r7
     84c:	39c00003 	ldbu	r7,0(r7)
     850:	698cf03a 	xor	r6,r13,r6
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     854:	5a56f03a 	xor	r11,r11,r9
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     858:	320cf03a 	xor	r6,r6,r8

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     85c:	22400383 	ldbu	r9,14(r4)

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     860:	31ccf03a 	xor	r6,r6,r7

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     864:	21c000c3 	ldbu	r7,3(r4)
     868:	22000103 	ldbu	r8,4(r4)
     86c:	22800243 	ldbu	r10,9(r4)

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
     870:	d98000c5 	stb	r6,3(sp)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     874:	2a4d883a 	add	r6,r5,r9
     878:	33400003 	ldbu	r13,0(r6)
     87c:	29cd883a 	add	r6,r5,r7
    uint8 tmp[4 * Nb];
    uint8 i;

    // mixing column 0
    tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
    tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
     880:	db000045 	stb	r12,1(sp)
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
     884:	dac00085 	stb	r11,2(sp)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
     888:	33000003 	ldbu	r12,0(r6)
     88c:	1217883a 	add	r11,r2,r8
     890:	1a8d883a 	add	r6,r3,r10
     894:	5ac00003 	ldbu	r11,0(r11)
     898:	31800003 	ldbu	r6,0(r6)
     89c:	598cf03a 	xor	r6,r11,r6
     8a0:	334cf03a 	xor	r6,r6,r13
     8a4:	330cf03a 	xor	r6,r6,r12
     8a8:	d9800105 	stb	r6,4(sp)
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8ac:	2a0d883a 	add	r6,r5,r8
     8b0:	32c00003 	ldbu	r11,0(r6)
     8b4:	128d883a 	add	r6,r2,r10
     8b8:	31800003 	ldbu	r6,0(r6)
     8bc:	62d8f03a 	xor	r12,r12,r11
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8c0:	2a95883a 	add	r10,r5,r10
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8c4:	6198f03a 	xor	r12,r12,r6
     8c8:	1a4d883a 	add	r6,r3,r9
     8cc:	31800003 	ldbu	r6,0(r6)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8d0:	1253883a 	add	r9,r2,r9
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8d4:	1a11883a 	add	r8,r3,r8
    tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
     8d8:	6198f03a 	xor	r12,r12,r6
     8dc:	db000145 	stb	r12,5(sp)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8e0:	51800003 	ldbu	r6,0(r10)
     8e4:	4a400003 	ldbu	r9,0(r9)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8e8:	42000003 	ldbu	r8,0(r8)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     8ec:	5996f03a 	xor	r11,r11,r6
     8f0:	5a56f03a 	xor	r11,r11,r9
     8f4:	19d3883a 	add	r9,r3,r7
     8f8:	4a400003 	ldbu	r9,0(r9)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     8fc:	11cf883a 	add	r7,r2,r7
     900:	39c00003 	ldbu	r7,0(r7)
     904:	698cf03a 	xor	r6,r13,r6
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     908:	5a56f03a 	xor	r11,r11,r9
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     90c:	320cf03a 	xor	r6,r6,r8

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     910:	22400083 	ldbu	r9,2(r4)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     914:	31ccf03a 	xor	r6,r6,r7

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     918:	21c001c3 	ldbu	r7,7(r4)
     91c:	22000203 	ldbu	r8,8(r4)
     920:	22800343 	ldbu	r10,13(r4)

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
     924:	d98001c5 	stb	r6,7(sp)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     928:	2a4d883a 	add	r6,r5,r9
     92c:	33400003 	ldbu	r13,0(r6)
     930:	29cd883a 	add	r6,r5,r7
     934:	33000003 	ldbu	r12,0(r6)
    tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];

    // mixing column 1
    tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
    tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
     938:	dac00185 	stb	r11,6(sp)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
     93c:	1a8d883a 	add	r6,r3,r10
     940:	1217883a 	add	r11,r2,r8
     944:	5ac00003 	ldbu	r11,0(r11)
     948:	31800003 	ldbu	r6,0(r6)
     94c:	598cf03a 	xor	r6,r11,r6
     950:	334cf03a 	xor	r6,r6,r13
     954:	330cf03a 	xor	r6,r6,r12
     958:	d9800205 	stb	r6,8(sp)
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     95c:	2a0d883a 	add	r6,r5,r8
     960:	32c00003 	ldbu	r11,0(r6)
     964:	128d883a 	add	r6,r2,r10
     968:	31800003 	ldbu	r6,0(r6)
     96c:	62d8f03a 	xor	r12,r12,r11
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     970:	2a95883a 	add	r10,r5,r10
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     974:	6198f03a 	xor	r12,r12,r6
     978:	1a4d883a 	add	r6,r3,r9
     97c:	31800003 	ldbu	r6,0(r6)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     980:	1253883a 	add	r9,r2,r9
     984:	4a400003 	ldbu	r9,0(r9)
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     988:	6198f03a 	xor	r12,r12,r6
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     98c:	51800003 	ldbu	r6,0(r10)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     990:	1a11883a 	add	r8,r3,r8
     994:	42000003 	ldbu	r8,0(r8)
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     998:	5996f03a 	xor	r11,r11,r6
     99c:	5a56f03a 	xor	r11,r11,r9
     9a0:	19d3883a 	add	r9,r3,r7
     9a4:	4a400003 	ldbu	r9,0(r9)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9a8:	11cf883a 	add	r7,r2,r7
     9ac:	39c00003 	ldbu	r7,0(r7)
     9b0:	698cf03a 	xor	r6,r13,r6
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     9b4:	5a56f03a 	xor	r11,r11,r9
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9b8:	320cf03a 	xor	r6,r6,r8

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9bc:	22400183 	ldbu	r9,6(r4)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9c0:	31ccf03a 	xor	r6,r6,r7

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9c4:	21c002c3 	ldbu	r7,11(r4)
     9c8:	22000303 	ldbu	r8,12(r4)
     9cc:	22800043 	ldbu	r10,1(r4)

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
     9d0:	d98002c5 	stb	r6,11(sp)

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9d4:	2a4d883a 	add	r6,r5,r9
    tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
     9d8:	db000245 	stb	r12,9(sp)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9dc:	33000003 	ldbu	r12,0(r6)
     9e0:	29cd883a 	add	r6,r5,r7
     9e4:	121b883a 	add	r13,r2,r8
    tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];

    // mixing column 2
    tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
    tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
     9e8:	dac00285 	stb	r11,10(sp)
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
     9ec:	32c00003 	ldbu	r11,0(r6)
     9f0:	1a8d883a 	add	r6,r3,r10
     9f4:	6b400003 	ldbu	r13,0(r13)
     9f8:	31800003 	ldbu	r6,0(r6)
     9fc:	698cf03a 	xor	r6,r13,r6
     a00:	330cf03a 	xor	r6,r6,r12
     a04:	32ccf03a 	xor	r6,r6,r11
     a08:	d9800305 	stb	r6,12(sp)
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a0c:	2a0d883a 	add	r6,r5,r8
     a10:	31800003 	ldbu	r6,0(r6)
     a14:	129b883a 	add	r13,r2,r10
     a18:	6b400003 	ldbu	r13,0(r13)
     a1c:	5996f03a 	xor	r11,r11,r6
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a20:	2a8b883a 	add	r5,r5,r10
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a24:	5b56f03a 	xor	r11,r11,r13
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a28:	29400003 	ldbu	r5,0(r5)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a2c:	1a5b883a 	add	r13,r3,r9
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a30:	1253883a 	add	r9,r2,r9
     a34:	4a400003 	ldbu	r9,0(r9)
     a38:	314cf03a 	xor	r6,r6,r5
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a3c:	11c5883a 	add	r2,r2,r7
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a40:	324cf03a 	xor	r6,r6,r9
     a44:	19d3883a 	add	r9,r3,r7
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a48:	1a07883a 	add	r3,r3,r8
     a4c:	18c00003 	ldbu	r3,0(r3)
     a50:	10800003 	ldbu	r2,0(r2)
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a54:	6b400003 	ldbu	r13,0(r13)
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a58:	4a400003 	ldbu	r9,0(r9)
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a5c:	614af03a 	xor	r5,r12,r5
     a60:	28caf03a 	xor	r5,r5,r3
     a64:	288af03a 	xor	r5,r5,r2
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a68:	5b56f03a 	xor	r11,r11,r13
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a6c:	324cf03a 	xor	r6,r6,r9
    tmp[10]  = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
    tmp[11]  = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];

    // mixing column 3
    tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
     a70:	dac00345 	stb	r11,13(sp)
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
     a74:	d9800385 	stb	r6,14(sp)
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
     a78:	d94003c5 	stb	r5,15(sp)
     a7c:	0005883a 	mov	r2,zero

    //memcpy (state, tmp, sizeof(tmp));
    for(i = 0; i < Nb*4; i++)
     a80:	00c00404 	movi	r3,16
        state[i] = tmp[i];
     a84:	d88d883a 	add	r6,sp,r2
     a88:	31800003 	ldbu	r6,0(r6)
     a8c:	208b883a 	add	r5,r4,r2
     a90:	10800044 	addi	r2,r2,1
     a94:	29800005 	stb	r6,0(r5)
    tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
    tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
    tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];

    //memcpy (state, tmp, sizeof(tmp));
    for(i = 0; i < Nb*4; i++)
     a98:	10fffa1e 	bne	r2,r3,a84 <__alt_mem_epcs+0xfffdfa84>
        state[i] = tmp[i];
}
     a9c:	dec00404 	addi	sp,sp,16
     aa0:	f800283a 	ret

00000aa4 <aes_blockenc_NOacc>:


//------------------------------------------------------------------------
// Un-accelerated block encryption
void aes_blockenc_NOacc(uint8* in, uint8* out, uint8* expkey)
{
     aa4:	defffa04 	addi	sp,sp,-24
     aa8:	dc800215 	stw	r18,8(sp)
     aac:	dc400115 	stw	r17,4(sp)
     ab0:	dfc00515 	stw	ra,20(sp)
     ab4:	dd000415 	stw	r20,16(sp)
     ab8:	dcc00315 	stw	r19,12(sp)
     abc:	dc000015 	stw	r16,0(sp)
     ac0:	2823883a 	mov	r17,r5
     ac4:	3025883a 	mov	r18,r6
     ac8:	2805883a 	mov	r2,r5
     acc:	20c00404 	addi	r3,r4,16
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];
     ad0:	21400003 	ldbu	r5,0(r4)
     ad4:	21000044 	addi	r4,r4,1
     ad8:	10800044 	addi	r2,r2,1
     adc:	117fffc5 	stb	r5,-1(r2)
void aes_blockenc_NOacc(uint8* in, uint8* out, uint8* expkey)
{
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
     ae0:	20fffb1e 	bne	r4,r3,ad0 <__alt_mem_epcs+0xfffdfad0>
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);
     ae4:	900b883a 	mov	r5,r18
     ae8:	8809883a 	mov	r4,r17
     aec:	00006700 	call	670 <AddRoundKey>

    for( round = 1; round < Nr + 1; round++ ) {
     af0:	04000044 	movi	r16,1
        if( round < Nr )
     af4:	05000284 	movi	r20,10
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     af8:	04c002c4 	movi	r19,11
        if( round < Nr )
            MixSubColumns (out); // Includes SubBytes and ShiftRows
     afc:	8809883a 	mov	r4,r17
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
        if( round < Nr )
     b00:	85000226 	beq	r16,r20,b0c <aes_blockenc_NOacc+0x68>
            MixSubColumns (out); // Includes SubBytes and ShiftRows
     b04:	00007a00 	call	7a0 <MixSubColumns>
     b08:	00000106 	br	b10 <aes_blockenc_NOacc+0x6c>
        else
            ShiftRows (out); // Includes SubBytes
     b0c:	00006940 	call	694 <ShiftRows>

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
     b10:	800a913a 	slli	r5,r16,4
     b14:	8809883a 	mov	r4,r17
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     b18:	84000044 	addi	r16,r16,1
        if( round < Nr )
            MixSubColumns (out); // Includes SubBytes and ShiftRows
        else
            ShiftRows (out); // Includes SubBytes

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
     b1c:	914b883a 	add	r5,r18,r5
     b20:	00006700 	call	670 <AddRoundKey>
    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey);

    for( round = 1; round < Nr + 1; round++ ) {
     b24:	84fff51e 	bne	r16,r19,afc <__alt_mem_epcs+0xfffdfafc>
        else
            ShiftRows (out); // Includes SubBytes

        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    }
}
     b28:	dfc00517 	ldw	ra,20(sp)
     b2c:	dd000417 	ldw	r20,16(sp)
     b30:	dcc00317 	ldw	r19,12(sp)
     b34:	dc800217 	ldw	r18,8(sp)
     b38:	dc400117 	ldw	r17,4(sp)
     b3c:	dc000017 	ldw	r16,0(sp)
     b40:	dec00604 	addi	sp,sp,24
     b44:	f800283a 	ret

00000b48 <InvShiftRows>:
void InvShiftRows (uint8 *state)
{
    uint8 tmp;

    // restore row 0
    state[0] = InvSbox[state[0]];
     b48:	20c00003 	ldbu	r3,0(r4)
     b4c:	00800034 	movhi	r2,0
     b50:	10992004 	addi	r2,r2,25728
     b54:	10c7883a 	add	r3,r2,r3
     b58:	18c00003 	ldbu	r3,0(r3)
     b5c:	20c00005 	stb	r3,0(r4)
    state[4] = InvSbox[state[4]];
     b60:	20c00103 	ldbu	r3,4(r4)
     b64:	10c7883a 	add	r3,r2,r3
     b68:	18c00003 	ldbu	r3,0(r3)
     b6c:	20c00105 	stb	r3,4(r4)
    state[8] = InvSbox[state[8]];
     b70:	20c00203 	ldbu	r3,8(r4)
     b74:	10c7883a 	add	r3,r2,r3
     b78:	18c00003 	ldbu	r3,0(r3)
     b7c:	20c00205 	stb	r3,8(r4)
    state[12] = InvSbox[state[12]];
     b80:	20c00303 	ldbu	r3,12(r4)
     b84:	10c7883a 	add	r3,r2,r3
     b88:	18c00003 	ldbu	r3,0(r3)
     b8c:	20c00305 	stb	r3,12(r4)

    // restore row 1
    tmp = InvSbox[state[13]];
     b90:	20c00343 	ldbu	r3,13(r4)
     b94:	10c7883a 	add	r3,r2,r3
     b98:	19400003 	ldbu	r5,0(r3)
    state[13] = InvSbox[state[9]];
     b9c:	20c00243 	ldbu	r3,9(r4)
     ba0:	10c7883a 	add	r3,r2,r3
     ba4:	18c00003 	ldbu	r3,0(r3)
     ba8:	20c00345 	stb	r3,13(r4)
    state[9] = InvSbox[state[5]];
     bac:	20c00143 	ldbu	r3,5(r4)
     bb0:	10c7883a 	add	r3,r2,r3
     bb4:	18c00003 	ldbu	r3,0(r3)
     bb8:	20c00245 	stb	r3,9(r4)
    state[5] = InvSbox[state[1]];
     bbc:	20c00043 	ldbu	r3,1(r4)
     bc0:	10c7883a 	add	r3,r2,r3
     bc4:	18c00003 	ldbu	r3,0(r3)
    state[1] = tmp;
     bc8:	21400045 	stb	r5,1(r4)

    // restore row 1
    tmp = InvSbox[state[13]];
    state[13] = InvSbox[state[9]];
    state[9] = InvSbox[state[5]];
    state[5] = InvSbox[state[1]];
     bcc:	20c00145 	stb	r3,5(r4)
    state[1] = tmp;

    // restore row 2
    tmp = InvSbox[state[2]];
     bd0:	20c00083 	ldbu	r3,2(r4)
     bd4:	10c7883a 	add	r3,r2,r3
     bd8:	19400003 	ldbu	r5,0(r3)
    state[2] = InvSbox[state[10]];
     bdc:	20c00283 	ldbu	r3,10(r4)
     be0:	10c7883a 	add	r3,r2,r3
     be4:	18c00003 	ldbu	r3,0(r3)
    state[10] = tmp;
     be8:	21400285 	stb	r5,10(r4)
    state[5] = InvSbox[state[1]];
    state[1] = tmp;

    // restore row 2
    tmp = InvSbox[state[2]];
    state[2] = InvSbox[state[10]];
     bec:	20c00085 	stb	r3,2(r4)
    state[10] = tmp;
    tmp = InvSbox[state[6]];
     bf0:	20c00183 	ldbu	r3,6(r4)
     bf4:	10c7883a 	add	r3,r2,r3
     bf8:	19400003 	ldbu	r5,0(r3)
    state[6] = InvSbox[state[14]];
     bfc:	20c00383 	ldbu	r3,14(r4)
     c00:	10c7883a 	add	r3,r2,r3
     c04:	18c00003 	ldbu	r3,0(r3)
    state[14] = tmp;
     c08:	21400385 	stb	r5,14(r4)
    // restore row 2
    tmp = InvSbox[state[2]];
    state[2] = InvSbox[state[10]];
    state[10] = tmp;
    tmp = InvSbox[state[6]];
    state[6] = InvSbox[state[14]];
     c0c:	20c00185 	stb	r3,6(r4)
    state[14] = tmp;

    // restore row 3
    tmp = InvSbox[state[3]];
     c10:	20c000c3 	ldbu	r3,3(r4)
     c14:	10c7883a 	add	r3,r2,r3
     c18:	19400003 	ldbu	r5,0(r3)
    state[3] = InvSbox[state[7]];
     c1c:	20c001c3 	ldbu	r3,7(r4)
     c20:	10c7883a 	add	r3,r2,r3
     c24:	18c00003 	ldbu	r3,0(r3)
     c28:	20c000c5 	stb	r3,3(r4)
    state[7] = InvSbox[state[11]];
     c2c:	20c002c3 	ldbu	r3,11(r4)
     c30:	10c7883a 	add	r3,r2,r3
     c34:	18c00003 	ldbu	r3,0(r3)
     c38:	20c001c5 	stb	r3,7(r4)
    state[11] = InvSbox[state[15]];
     c3c:	20c003c3 	ldbu	r3,15(r4)
     c40:	10c5883a 	add	r2,r2,r3
     c44:	10800003 	ldbu	r2,0(r2)
    state[15] = tmp;
     c48:	214003c5 	stb	r5,15(r4)

    // restore row 3
    tmp = InvSbox[state[3]];
    state[3] = InvSbox[state[7]];
    state[7] = InvSbox[state[11]];
    state[11] = InvSbox[state[15]];
     c4c:	208002c5 	stb	r2,11(r4)
    state[15] = tmp;
     c50:	f800283a 	ret

00000c54 <InvMixSubColumns>:
{
    uint8 tmp[4 * Nb];
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
     c54:	22800003 	ldbu	r10,0(r4)
     c58:	22400043 	ldbu	r9,1(r4)
     c5c:	00800034 	movhi	r2,0
     c60:	01800034 	movhi	r6,0
     c64:	1093a004 	addi	r2,r2,20096
     c68:	31942004 	addi	r6,r6,20608
     c6c:	128b883a 	add	r5,r2,r10
     c70:	3247883a 	add	r3,r6,r9
     c74:	22000083 	ldbu	r8,2(r4)
     c78:	2ac00003 	ldbu	r11,0(r5)
     c7c:	18c00003 	ldbu	r3,0(r3)
     c80:	01400034 	movhi	r5,0
     c84:	2953e004 	addi	r5,r5,20352
     c88:	58d6f03a 	xor	r11,r11,r3
     c8c:	2a07883a 	add	r3,r5,r8
     c90:	18c00003 	ldbu	r3,0(r3)
     c94:	21c000c3 	ldbu	r7,3(r4)
    state[15] = tmp;
}

// restore and un-mix each row in a column
void InvMixSubColumns (uint8 *state)
{
     c98:	defffc04 	addi	sp,sp,-16
    uint8 tmp[4 * Nb];
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
     c9c:	58d8f03a 	xor	r12,r11,r3
     ca0:	00c00034 	movhi	r3,0
     ca4:	18d46004 	addi	r3,r3,20864
     ca8:	19d7883a 	add	r11,r3,r7
     cac:	5ac00003 	ldbu	r11,0(r11)
     cb0:	62d6f03a 	xor	r11,r12,r11
     cb4:	dac00005 	stb	r11,0(sp)
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
     cb8:	1a99883a 	add	r12,r3,r10
     cbc:	1257883a 	add	r11,r2,r9
     cc0:	63000003 	ldbu	r12,0(r12)
     cc4:	5ac00003 	ldbu	r11,0(r11)
     cc8:	62d6f03a 	xor	r11,r12,r11
     ccc:	3219883a 	add	r12,r6,r8
     cd0:	63000003 	ldbu	r12,0(r12)
     cd4:	5b18f03a 	xor	r12,r11,r12
     cd8:	29d7883a 	add	r11,r5,r7
     cdc:	5ac00003 	ldbu	r11,0(r11)
     ce0:	62d6f03a 	xor	r11,r12,r11
     ce4:	dac00145 	stb	r11,5(sp)
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     ce8:	2a99883a 	add	r12,r5,r10
     cec:	1a57883a 	add	r11,r3,r9
     cf0:	63000003 	ldbu	r12,0(r12)
     cf4:	5ac00003 	ldbu	r11,0(r11)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     cf8:	3295883a 	add	r10,r6,r10
     cfc:	2a53883a 	add	r9,r5,r9
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d00:	62d6f03a 	xor	r11,r12,r11
     d04:	1219883a 	add	r12,r2,r8
     d08:	63000003 	ldbu	r12,0(r12)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d0c:	52800003 	ldbu	r10,0(r10)
     d10:	4a400003 	ldbu	r9,0(r9)
     d14:	1a11883a 	add	r8,r3,r8
     d18:	42000003 	ldbu	r8,0(r8)
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d1c:	5b18f03a 	xor	r12,r11,r12
     d20:	31d7883a 	add	r11,r6,r7
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d24:	5252f03a 	xor	r9,r10,r9
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d28:	5ac00003 	ldbu	r11,0(r11)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d2c:	22800103 	ldbu	r10,4(r4)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d30:	4a10f03a 	xor	r8,r9,r8
     d34:	11cf883a 	add	r7,r2,r7

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d38:	22400143 	ldbu	r9,5(r4)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d3c:	39c00003 	ldbu	r7,0(r7)
    int i;

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
     d40:	62d6f03a 	xor	r11,r12,r11
     d44:	dac00285 	stb	r11,10(sp)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d48:	1299883a 	add	r12,r2,r10
     d4c:	3257883a 	add	r11,r6,r9

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d50:	41cef03a 	xor	r7,r8,r7

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d54:	63000003 	ldbu	r12,0(r12)
     d58:	22000183 	ldbu	r8,6(r4)
     d5c:	5ac00003 	ldbu	r11,0(r11)

    // restore column 0
    tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
    tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
    tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
     d60:	d9c003c5 	stb	r7,15(sp)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
     d64:	21c001c3 	ldbu	r7,7(r4)
     d68:	62d6f03a 	xor	r11,r12,r11
     d6c:	2a19883a 	add	r12,r5,r8
     d70:	63000003 	ldbu	r12,0(r12)
     d74:	5b18f03a 	xor	r12,r11,r12
     d78:	19d7883a 	add	r11,r3,r7
     d7c:	5ac00003 	ldbu	r11,0(r11)
     d80:	62d6f03a 	xor	r11,r12,r11
     d84:	dac00105 	stb	r11,4(sp)
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
     d88:	1a99883a 	add	r12,r3,r10
     d8c:	1257883a 	add	r11,r2,r9
     d90:	63000003 	ldbu	r12,0(r12)
     d94:	5ac00003 	ldbu	r11,0(r11)
     d98:	62d6f03a 	xor	r11,r12,r11
     d9c:	3219883a 	add	r12,r6,r8
     da0:	63000003 	ldbu	r12,0(r12)
     da4:	5b18f03a 	xor	r12,r11,r12
     da8:	29d7883a 	add	r11,r5,r7
     dac:	5ac00003 	ldbu	r11,0(r11)
     db0:	62d6f03a 	xor	r11,r12,r11
     db4:	dac00245 	stb	r11,9(sp)
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     db8:	2a99883a 	add	r12,r5,r10
     dbc:	1a57883a 	add	r11,r3,r9
     dc0:	63000003 	ldbu	r12,0(r12)
     dc4:	5ac00003 	ldbu	r11,0(r11)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     dc8:	3295883a 	add	r10,r6,r10
     dcc:	2a53883a 	add	r9,r5,r9
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     dd0:	62d6f03a 	xor	r11,r12,r11
     dd4:	1219883a 	add	r12,r2,r8
     dd8:	63000003 	ldbu	r12,0(r12)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     ddc:	52800003 	ldbu	r10,0(r10)
     de0:	4a400003 	ldbu	r9,0(r9)
     de4:	1a11883a 	add	r8,r3,r8
     de8:	42000003 	ldbu	r8,0(r8)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     dec:	5b18f03a 	xor	r12,r11,r12
     df0:	31d7883a 	add	r11,r6,r7
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     df4:	5252f03a 	xor	r9,r10,r9
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     df8:	5ac00003 	ldbu	r11,0(r11)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     dfc:	22800203 	ldbu	r10,8(r4)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e00:	4a10f03a 	xor	r8,r9,r8
     e04:	11cf883a 	add	r7,r2,r7

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e08:	22400243 	ldbu	r9,9(r4)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e0c:	39c00003 	ldbu	r7,0(r7)
    tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
     e10:	62d6f03a 	xor	r11,r12,r11
     e14:	dac00385 	stb	r11,14(sp)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e18:	1299883a 	add	r12,r2,r10
     e1c:	3257883a 	add	r11,r6,r9

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e20:	41cef03a 	xor	r7,r8,r7

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e24:	63000003 	ldbu	r12,0(r12)
     e28:	22000283 	ldbu	r8,10(r4)
     e2c:	5ac00003 	ldbu	r11,0(r11)

    // restore column 1
    tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
    tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
    tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
     e30:	d9c000c5 	stb	r7,3(sp)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
     e34:	21c002c3 	ldbu	r7,11(r4)
     e38:	62d6f03a 	xor	r11,r12,r11
     e3c:	2a19883a 	add	r12,r5,r8
     e40:	63000003 	ldbu	r12,0(r12)
     e44:	5b18f03a 	xor	r12,r11,r12
     e48:	19d7883a 	add	r11,r3,r7
     e4c:	5ac00003 	ldbu	r11,0(r11)
     e50:	62d6f03a 	xor	r11,r12,r11
     e54:	dac00205 	stb	r11,8(sp)
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
     e58:	1a99883a 	add	r12,r3,r10
     e5c:	1257883a 	add	r11,r2,r9
     e60:	63000003 	ldbu	r12,0(r12)
     e64:	5ac00003 	ldbu	r11,0(r11)
     e68:	62d6f03a 	xor	r11,r12,r11
     e6c:	3219883a 	add	r12,r6,r8
     e70:	63000003 	ldbu	r12,0(r12)
     e74:	5b18f03a 	xor	r12,r11,r12
     e78:	29d7883a 	add	r11,r5,r7
     e7c:	5ac00003 	ldbu	r11,0(r11)
     e80:	62d6f03a 	xor	r11,r12,r11
     e84:	dac00345 	stb	r11,13(sp)
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     e88:	2a99883a 	add	r12,r5,r10
     e8c:	1a57883a 	add	r11,r3,r9
     e90:	63000003 	ldbu	r12,0(r12)
     e94:	5ac00003 	ldbu	r11,0(r11)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     e98:	3295883a 	add	r10,r6,r10
     e9c:	2a53883a 	add	r9,r5,r9
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     ea0:	62d6f03a 	xor	r11,r12,r11
     ea4:	1219883a 	add	r12,r2,r8
     ea8:	63000003 	ldbu	r12,0(r12)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     eac:	1a11883a 	add	r8,r3,r8
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     eb0:	5b18f03a 	xor	r12,r11,r12
     eb4:	31d7883a 	add	r11,r6,r7
     eb8:	5ac00003 	ldbu	r11,0(r11)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     ebc:	52800003 	ldbu	r10,0(r10)
     ec0:	4a400003 	ldbu	r9,0(r9)
     ec4:	42000003 	ldbu	r8,0(r8)
     ec8:	11cf883a 	add	r7,r2,r7
     ecc:	5252f03a 	xor	r9,r10,r9
     ed0:	4a10f03a 	xor	r8,r9,r8

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ed4:	22800303 	ldbu	r10,12(r4)
     ed8:	22400343 	ldbu	r9,13(r4)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     edc:	39c00003 	ldbu	r7,0(r7)
    tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
     ee0:	62d6f03a 	xor	r11,r12,r11
     ee4:	dac00085 	stb	r11,2(sp)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ee8:	1299883a 	add	r12,r2,r10
     eec:	3257883a 	add	r11,r6,r9

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     ef0:	41cef03a 	xor	r7,r8,r7

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     ef4:	63000003 	ldbu	r12,0(r12)
     ef8:	22000383 	ldbu	r8,14(r4)
     efc:	5ac00003 	ldbu	r11,0(r11)

    // restore column 2
    tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
    tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
    tmp[2]  = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
     f00:	d9c001c5 	stb	r7,7(sp)

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
     f04:	21c003c3 	ldbu	r7,15(r4)
     f08:	62d6f03a 	xor	r11,r12,r11
     f0c:	2a19883a 	add	r12,r5,r8
     f10:	63000003 	ldbu	r12,0(r12)
     f14:	5b18f03a 	xor	r12,r11,r12
     f18:	19d7883a 	add	r11,r3,r7
     f1c:	5ac00003 	ldbu	r11,0(r11)
     f20:	62d6f03a 	xor	r11,r12,r11
     f24:	dac00305 	stb	r11,12(sp)
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
     f28:	1a99883a 	add	r12,r3,r10
     f2c:	1257883a 	add	r11,r2,r9
     f30:	63000003 	ldbu	r12,0(r12)
     f34:	5ac00003 	ldbu	r11,0(r11)
     f38:	62d6f03a 	xor	r11,r12,r11
     f3c:	3219883a 	add	r12,r6,r8
     f40:	63000003 	ldbu	r12,0(r12)
     f44:	5b18f03a 	xor	r12,r11,r12
     f48:	29d7883a 	add	r11,r5,r7
     f4c:	5ac00003 	ldbu	r11,0(r11)
     f50:	62d6f03a 	xor	r11,r12,r11
     f54:	dac00045 	stb	r11,1(sp)
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f58:	2a99883a 	add	r12,r5,r10
     f5c:	1a57883a 	add	r11,r3,r9
     f60:	63000003 	ldbu	r12,0(r12)
     f64:	5ac00003 	ldbu	r11,0(r11)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f68:	2a4b883a 	add	r5,r5,r9
     f6c:	29400003 	ldbu	r5,0(r5)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f70:	62d6f03a 	xor	r11,r12,r11
     f74:	1219883a 	add	r12,r2,r8
     f78:	63000003 	ldbu	r12,0(r12)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f7c:	1a07883a 	add	r3,r3,r8
     f80:	11c5883a 	add	r2,r2,r7
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f84:	5b18f03a 	xor	r12,r11,r12
     f88:	31d7883a 	add	r11,r6,r7
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f8c:	328d883a 	add	r6,r6,r10
     f90:	31800003 	ldbu	r6,0(r6)
     f94:	18c00003 	ldbu	r3,0(r3)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     f98:	5ac00003 	ldbu	r11,0(r11)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     f9c:	10800003 	ldbu	r2,0(r2)
     fa0:	314af03a 	xor	r5,r6,r5
     fa4:	28c6f03a 	xor	r3,r5,r3
     fa8:	1884f03a 	xor	r2,r3,r2
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     fac:	62d6f03a 	xor	r11,r12,r11
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
        state[i] = InvSbox[tmp[i]];
     fb0:	01c00034 	movhi	r7,0

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
     fb4:	d88002c5 	stb	r2,11(sp)
    tmp[7]  = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];

    // restore column 3
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
     fb8:	dac00185 	stb	r11,6(sp)
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fbc:	0005883a 	mov	r2,zero
        state[i] = InvSbox[tmp[i]];
     fc0:	39d92004 	addi	r7,r7,25728
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fc4:	01400404 	movi	r5,16
        state[i] = InvSbox[tmp[i]];
     fc8:	d887883a 	add	r3,sp,r2
     fcc:	18c00003 	ldbu	r3,0(r3)
     fd0:	38c7883a 	add	r3,r7,r3
     fd4:	19800003 	ldbu	r6,0(r3)
     fd8:	2087883a 	add	r3,r4,r2
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fdc:	10800044 	addi	r2,r2,1
        state[i] = InvSbox[tmp[i]];
     fe0:	19800005 	stb	r6,0(r3)
    tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
    tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
    tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
    tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];

    for( i=0; i < 4 * Nb; i++ )
     fe4:	117ff81e 	bne	r2,r5,fc8 <__alt_mem_epcs+0xfffdffc8>
        state[i] = InvSbox[tmp[i]];
}
     fe8:	dec00404 	addi	sp,sp,16
     fec:	f800283a 	ret

00000ff0 <Decrypt>:


//-------------------------------------------------------------------------------------
// Decryption routines for correctness testing
void Decrypt (uint8 *in, uint8 *expkey, uint8 *out)
{
     ff0:	defffb04 	addi	sp,sp,-20
     ff4:	dc800215 	stw	r18,8(sp)
     ff8:	dc400115 	stw	r17,4(sp)
     ffc:	dfc00415 	stw	ra,16(sp)
    1000:	dcc00315 	stw	r19,12(sp)
    1004:	dc000015 	stw	r16,0(sp)
    1008:	2825883a 	mov	r18,r5
    100c:	3023883a 	mov	r17,r6
    1010:	3005883a 	mov	r2,r6
    1014:	20c00404 	addi	r3,r4,16
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
        out[i] = in[i];
    1018:	21400003 	ldbu	r5,0(r4)
    101c:	21000044 	addi	r4,r4,1
    1020:	10800044 	addi	r2,r2,1
    1024:	117fffc5 	stb	r5,-1(r2)
void Decrypt (uint8 *in, uint8 *expkey, uint8 *out)
{
    uint8 i;
    unsigned round;

    for(i = 0; i < Nb*4; i++)  // ugly substitute for memcpy
    1028:	20fffb1e 	bne	r4,r3,1018 <__alt_mem_epcs+0xfffe0018>
        out[i] = in[i];

    AddRoundKey ((unsigned *)out, (unsigned *)expkey + Nr * Nb);
    102c:	91402804 	addi	r5,r18,160
    1030:	8809883a 	mov	r4,r17
    1034:	00006700 	call	670 <AddRoundKey>
    InvShiftRows(out);
    1038:	8809883a 	mov	r4,r17
    103c:	0000b480 	call	b48 <InvShiftRows>

    for( round = Nr; round--; )
    1040:	04000284 	movi	r16,10
    1044:	04ffffc4 	movi	r19,-1
    1048:	843fffc4 	addi	r16,r16,-1
    104c:	84c00826 	beq	r16,r19,1070 <Decrypt+0x80>
    {
        AddRoundKey ((unsigned *)out, (unsigned *)expkey + round * Nb);
    1050:	800a913a 	slli	r5,r16,4
    1054:	8809883a 	mov	r4,r17
    1058:	914b883a 	add	r5,r18,r5
    105c:	00006700 	call	670 <AddRoundKey>
        if( round )
    1060:	803ff926 	beq	r16,zero,1048 <__alt_mem_epcs+0xfffe0048>
            InvMixSubColumns (out);
    1064:	8809883a 	mov	r4,r17
    1068:	0000c540 	call	c54 <InvMixSubColumns>
    106c:	003ff606 	br	1048 <__alt_mem_epcs+0xfffe0048>
    }
}
    1070:	dfc00417 	ldw	ra,16(sp)
    1074:	dcc00317 	ldw	r19,12(sp)
    1078:	dc800217 	ldw	r18,8(sp)
    107c:	dc400117 	ldw	r17,4(sp)
    1080:	dc000017 	ldw	r16,0(sp)
    1084:	dec00504 	addi	sp,sp,20
    1088:	f800283a 	ret

0000108c <main>:
#define BLOCK_SZ (128 / 8)
#define BUF_SZ 64
#define TEXT_DELAY_MS 80

int main(int argc, char *argv[])
{
    108c:	deffa504 	addi	sp,sp,-364
	int i, j;
    uint8 outputdata[BLOCK_SZ];
    uint8 inv_outputdata[BLOCK_SZ];
    uint8 decodedata[BLOCK_SZ];
    uint8 keyexp[aes_keyexpsize128];
    char buf[BUF_SZ] = {0};
    1090:	d9002e04 	addi	r4,sp,184
    1094:	01801004 	movi	r6,64
    1098:	000b883a 	mov	r5,zero
#define BLOCK_SZ (128 / 8)
#define BUF_SZ 64
#define TEXT_DELAY_MS 80

int main(int argc, char *argv[])
{
    109c:	dfc05a15 	stw	ra,360(sp)
    10a0:	dd405715 	stw	r21,348(sp)
    10a4:	dc005215 	stw	r16,328(sp)
    10a8:	ddc05915 	stw	r23,356(sp)
    10ac:	dd805815 	stw	r22,352(sp)
    10b0:	dd005615 	stw	r20,344(sp)
    10b4:	dcc05515 	stw	r19,340(sp)
    10b8:	dc805415 	stw	r18,336(sp)
    10bc:	dc405315 	stw	r17,332(sp)
	int i, j;
    uint8 outputdata[BLOCK_SZ];
    uint8 inv_outputdata[BLOCK_SZ];
    uint8 decodedata[BLOCK_SZ];
    uint8 keyexp[aes_keyexpsize128];
    char buf[BUF_SZ] = {0};
    10c0:	000387c0 	call	387c <memset>
	int inv_done = 0;

    unsigned long long tick_count = 0, tick_count_baseline = 0;
    void* PERF_UNIT_BASE = (void*)COUNTER_0_BASE;

    uint8 key[BLOCK_SZ] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};
    10c4:	01400034 	movhi	r5,0
    10c8:	d9004204 	addi	r4,sp,264
    10cc:	01800404 	movi	r6,16
    10d0:	29535704 	addi	r5,r5,19804
    10d4:	00038540 	call	3854 <memcpy>
    uint8 inputdata[BLOCK_SZ] = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22};
    10d8:	dd403e04 	addi	r21,sp,248
    10dc:	01400034 	movhi	r5,0
    10e0:	01800404 	movi	r6,16
    10e4:	29535b04 	addi	r5,r5,19820
    10e8:	a809883a 	mov	r4,r21
    10ec:	00038540 	call	3854 <memcpy>

    // Reset the performance counter
        PERF_RESET (PERF_UNIT_BASE);
    10f0:	040000b4 	movhi	r16,2
    10f4:	84082804 	addi	r16,r16,8352
    10f8:	00800044 	movi	r2,1
    10fc:	80800035 	stwio	r2,0(r16)
    	// Get the baseline target:
    	{
        	printf("Starting Baseline (SWacc) Measurement\n");
    1100:	01000034 	movhi	r4,0
    1104:	2112c104 	addi	r4,r4,19204
            // Start the performance counter
            PERF_START_MEASURING (PERF_UNIT_BASE);
    1108:	044000b4 	movhi	r17,2

    // Reset the performance counter
        PERF_RESET (PERF_UNIT_BASE);
    	// Get the baseline target:
    	{
        	printf("Starting Baseline (SWacc) Measurement\n");
    110c:	00039c80 	call	39c8 <puts>
            // Start the performance counter
            PERF_START_MEASURING (PERF_UNIT_BASE);
    1110:	8c482904 	addi	r17,r17,8356
    1114:	88000035 	stwio	zero,0(r17)

            aes_keyexpand128(key, keyexp);
    1118:	d9400204 	addi	r5,sp,8
    111c:	d9004204 	addi	r4,sp,264
    1120:	00000580 	call	58 <aes_keyexpand128>
    1124:	04804004 	movi	r18,256

            for(i = 0; i < INPUT_LENGTH; i++)
            {
                aes_blockenc_SWacc(inputdata, outputdata, keyexp);
    1128:	dcc04e04 	addi	r19,sp,312
    112c:	d9800204 	addi	r6,sp,8
    1130:	980b883a 	mov	r5,r19
    1134:	a809883a 	mov	r4,r21
    1138:	94bfffc4 	addi	r18,r18,-1
    113c:	000039c0 	call	39c <aes_blockenc_SWacc>
            // Start the performance counter
            PERF_START_MEASURING (PERF_UNIT_BASE);

            aes_keyexpand128(key, keyexp);

            for(i = 0; i < INPUT_LENGTH; i++)
    1140:	903ffa1e 	bne	r18,zero,112c <__alt_mem_epcs+0xfffe012c>
            {
                aes_blockenc_SWacc(inputdata, outputdata, keyexp);
            }

            // Stop the performance counter
            PERF_STOP_MEASURING (PERF_UNIT_BASE);
    1144:	80000035 	stwio	zero,0(r16)

            // Show the performance data
            tick_count_baseline = perf_get_section_time(PERF_UNIT_BASE, 0);
    1148:	010000b4 	movhi	r4,2
    114c:	000b883a 	mov	r5,zero
    1150:	21082804 	addi	r4,r4,8352
    1154:	0004aa00 	call	4aa0 <perf_get_section_time>
            printf("\t-> Software Encryption operation took %llu cycles\n", tick_count_baseline);
    1158:	01000034 	movhi	r4,0
    115c:	100b883a 	mov	r5,r2
    1160:	180d883a 	mov	r6,r3
    1164:	2112cb04 	addi	r4,r4,19244

            // Stop the performance counter
            PERF_STOP_MEASURING (PERF_UNIT_BASE);

            // Show the performance data
            tick_count_baseline = perf_get_section_time(PERF_UNIT_BASE, 0);
    1168:	102d883a 	mov	r22,r2
            printf("\t-> Software Encryption operation took %llu cycles\n", tick_count_baseline);
    116c:	00038d80 	call	38d8 <printf>
    	}

    	printf("\n");
    1170:	01000284 	movi	r4,10
    1174:	000392c0 	call	392c <putchar>

        // Reset the performance counter
        PERF_RESET (PERF_UNIT_BASE);
    1178:	04800044 	movi	r18,1
    117c:	84800035 	stwio	r18,0(r16)
    	{
    		printf("Starting Encryption HWacc Measurement\n");
    1180:	01000034 	movhi	r4,0
    1184:	2112d804 	addi	r4,r4,19296
    1188:	00039c80 	call	39c8 <puts>
    		// Start the performance counter
    		PERF_START_MEASURING (PERF_UNIT_BASE);
    118c:	88000035 	stwio	zero,0(r17)

    		alt_dcache_flush_all();
    1190:	00049a80 	call	49a8 <alt_dcache_flush_all>
    		IOWR(AES_ACCELERATOR_0_BASE,3,0);	//stop accelerator
    1194:	008000b4 	movhi	r2,2
    1198:	10883304 	addi	r2,r2,8396
    119c:	10000035 	stwio	zero,0(r2)
    		IOWR(AES_ACCELERATOR_0_BASE,2,INPUT_LENGTH);
    11a0:	00c000b4 	movhi	r3,2
    11a4:	18c83204 	addi	r3,r3,8392
    11a8:	01004004 	movi	r4,256
    11ac:	19000035 	stwio	r4,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,0,inputdata);
    11b0:	00c000b4 	movhi	r3,2
    11b4:	18c83004 	addi	r3,r3,8384
    11b8:	1d400035 	stwio	r21,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,1,outputdata);
    11bc:	00c000b4 	movhi	r3,2
    11c0:	18c83104 	addi	r3,r3,8388
    11c4:	1cc00035 	stwio	r19,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,4,*(uint32 *)(key));
    11c8:	d9004217 	ldw	r4,264(sp)
    11cc:	00c000b4 	movhi	r3,2
    11d0:	18c83404 	addi	r3,r3,8400
    11d4:	19000035 	stwio	r4,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
    11d8:	d9004317 	ldw	r4,268(sp)
    11dc:	00c000b4 	movhi	r3,2
    11e0:	18c83504 	addi	r3,r3,8404
    11e4:	19000035 	stwio	r4,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
    11e8:	d9004417 	ldw	r4,272(sp)
    11ec:	00c000b4 	movhi	r3,2
    11f0:	18c83604 	addi	r3,r3,8408
    11f4:	19000035 	stwio	r4,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
    11f8:	d9004517 	ldw	r4,276(sp)
    11fc:	00c000b4 	movhi	r3,2
    1200:	18c83704 	addi	r3,r3,8412
    1204:	19000035 	stwio	r4,0(r3)
    		IOWR(AES_ACCELERATOR_0_BASE,3,1);	//start accelerator
    1208:	14800035 	stwio	r18,0(r2)

    		while (done == 0) {
    			done = IORD(AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
    120c:	10c00037 	ldwio	r3,0(r2)
    		IOWR(AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
    		IOWR(AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
    		IOWR(AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
    		IOWR(AES_ACCELERATOR_0_BASE,3,1);	//start accelerator

    		while (done == 0) {
    1210:	183ffe26 	beq	r3,zero,120c <__alt_mem_epcs+0xfffe020c>
    			done = IORD(AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
    		}

    		// Stop the performance counter
    		PERF_STOP_MEASURING (PERF_UNIT_BASE);
    1214:	80000035 	stwio	zero,0(r16)

    		printf("Key %x %x %x %x\n", *(uint32 *)(key),*(uint32 *)(key+4),*(uint32 *)(key+8),*(uint32 *)(key+12));
    1218:	d8804517 	ldw	r2,276(sp)
    121c:	d9c04417 	ldw	r7,272(sp)
    1220:	d9804317 	ldw	r6,268(sp)
    1224:	d9404217 	ldw	r5,264(sp)
    1228:	01000034 	movhi	r4,0
    122c:	d8800015 	stw	r2,0(sp)
    1230:	2112e204 	addi	r4,r4,19336
    1234:	00038d80 	call	38d8 <printf>
    		printf("Input %x %x %x %x\n", *(uint32 *)(inputdata),*(uint32 *)(inputdata+4),*(uint32 *)(inputdata+8),*(uint32 *)(inputdata+12));
    1238:	d8804117 	ldw	r2,260(sp)
    123c:	d9c04017 	ldw	r7,256(sp)
    1240:	d9803f17 	ldw	r6,252(sp)
    1244:	d9403e17 	ldw	r5,248(sp)
    1248:	01000034 	movhi	r4,0
    124c:	d8800015 	stw	r2,0(sp)
    1250:	2112e704 	addi	r4,r4,19356
    1254:	00038d80 	call	38d8 <printf>
    		printf("Output %x %x %x %x\n", *(uint32 *)(outputdata),*(uint32 *)(outputdata+4),*(uint32 *)(outputdata+8),*(uint32 *)(outputdata+12));
    1258:	d8805117 	ldw	r2,324(sp)
    125c:	d9c05017 	ldw	r7,320(sp)
    1260:	d9804f17 	ldw	r6,316(sp)
    1264:	d9404e17 	ldw	r5,312(sp)
    1268:	01000034 	movhi	r4,0
    126c:	d8800015 	stw	r2,0(sp)
    1270:	2112ec04 	addi	r4,r4,19376
    1274:	00038d80 	call	38d8 <printf>

    		// Show the performance data
    		tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    1278:	010000b4 	movhi	r4,2
    127c:	000b883a 	mov	r5,zero
    1280:	21082804 	addi	r4,r4,8352
    1284:	0004aa00 	call	4aa0 <perf_get_section_time>
    		printf("\t-> Hardware Encryption operation took %llu cycles\n", tick_count);
    1288:	01000034 	movhi	r4,0
    128c:	100b883a 	mov	r5,r2
    1290:	180d883a 	mov	r6,r3
    1294:	2112f104 	addi	r4,r4,19396
    1298:	00038d80 	call	38d8 <printf>
    	}

    	printf("\n");
    129c:	01000284 	movi	r4,10
    12a0:	000392c0 	call	392c <putchar>

        // Test correctness of a block
    	printf("Starting Baseline (HWacc) Measurement\n");
    12a4:	01000034 	movhi	r4,0
    12a8:	2112fe04 	addi	r4,r4,19448
    12ac:	00039c80 	call	39c8 <puts>
    	PERF_RESET (PERF_UNIT_BASE);
    12b0:	00800044 	movi	r2,1
    12b4:	80800035 	stwio	r2,0(r16)
    	PERF_START_MEASURING (PERF_UNIT_BASE);
    12b8:	88000035 	stwio	zero,0(r17)
    	aes_keyexpand128(key, keyexp);
    12bc:	d9400204 	addi	r5,sp,8
    12c0:	d9004204 	addi	r4,sp,264
    12c4:	00000580 	call	58 <aes_keyexpand128>
    	Decrypt(outputdata, keyexp, decodedata);  // decrypt
    12c8:	d9804604 	addi	r6,sp,280
    12cc:	d9400204 	addi	r5,sp,8
    12d0:	9809883a 	mov	r4,r19
    12d4:	0000ff00 	call	ff0 <Decrypt>

    	PERF_STOP_MEASURING (PERF_UNIT_BASE);
    12d8:	80000035 	stwio	zero,0(r16)
        tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    12dc:	010000b4 	movhi	r4,2
    12e0:	000b883a 	mov	r5,zero
    12e4:	21082804 	addi	r4,r4,8352
    12e8:	0004aa00 	call	4aa0 <perf_get_section_time>
        printf("\t-> Software Decryption operation took %llu cycles\n", tick_count + 802062);
    12ec:	01400334 	movhi	r5,12
    12f0:	294f4384 	addi	r5,r5,15630
    12f4:	114b883a 	add	r5,r2,r5
    12f8:	288d803a 	cmpltu	r6,r5,r2
    12fc:	01000034 	movhi	r4,0
    1300:	30cd883a 	add	r6,r6,r3
    1304:	21130804 	addi	r4,r4,19488
    	PERF_START_MEASURING (PERF_UNIT_BASE);
    	aes_keyexpand128(key, keyexp);
    	Decrypt(outputdata, keyexp, decodedata);  // decrypt

    	PERF_STOP_MEASURING (PERF_UNIT_BASE);
        tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    1308:	1029883a 	mov	r20,r2
        printf("\t-> Software Decryption operation took %llu cycles\n", tick_count + 802062);
    130c:	00038d80 	call	38d8 <printf>

        j = 0;
    1310:	0007883a 	mov	r3,zero
        for(i = 0; i < 16; i++)
    1314:	0025883a 	mov	r18,zero
    1318:	05c00404 	movi	r23,16
        {
            if(inputdata[i] != decodedata[i])
    131c:	ac85883a 	add	r2,r21,r18
    1320:	d9004604 	addi	r4,sp,280
    1324:	11800003 	ldbu	r6,0(r2)
    1328:	2485883a 	add	r2,r4,r18
    132c:	11c00003 	ldbu	r7,0(r2)
    1330:	31c00526 	beq	r6,r7,1348 <main+0x2bc>
            {
                printf("Data error at index %i, in = 0x%X, dec = 0x%X\n", i,
    1334:	01000034 	movhi	r4,0
    1338:	900b883a 	mov	r5,r18
    133c:	21131504 	addi	r4,r4,19540
    1340:	00038d80 	call	38d8 <printf>
                        inputdata[i], decodedata[i]);
                j = 1;
    1344:	00c00044 	movi	r3,1
    	PERF_STOP_MEASURING (PERF_UNIT_BASE);
        tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
        printf("\t-> Software Decryption operation took %llu cycles\n", tick_count + 802062);

        j = 0;
        for(i = 0; i < 16; i++)
    1348:	94800044 	addi	r18,r18,1
    134c:	95fff31e 	bne	r18,r23,131c <__alt_mem_epcs+0xfffe031c>
                j = 1;
            }
        }

        // If there's not enough code space, comment from here ...
        if(j == 0){
    1350:	18002c1e 	bne	r3,zero,1404 <main+0x378>
            printf("The Output Of The Encryptor Is Correct!\n");
    1354:	01000034 	movhi	r4,0
    1358:	21132104 	addi	r4,r4,19588
    135c:	00039c80 	call	39c8 <puts>

        	// init the global timer
        	timer_start_global();
    1360:	000163c0 	call	163c <timer_start_global>

            unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
            unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
            float speedup = ((float)t1) / ((float)t2);
    1364:	b009883a 	mov	r4,r22
    1368:	00023d80 	call	23d8 <__floatunsisf>
    136c:	a009883a 	mov	r4,r20
    1370:	1025883a 	mov	r18,r2
    1374:	00023d80 	call	23d8 <__floatunsisf>
    1378:	100b883a 	mov	r5,r2
    137c:	9009883a 	mov	r4,r18
    1380:	00019880 	call	1988 <__divsf3>
            unsigned long whole = (unsigned long)speedup;
    1384:	1009883a 	mov	r4,r2
        	// init the global timer
        	timer_start_global();

            unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
            unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
            float speedup = ((float)t1) / ((float)t2);
    1388:	102b883a 	mov	r21,r2
            unsigned long whole = (unsigned long)speedup;
    138c:	00017000 	call	1700 <__fixunssfsi>
            unsigned long mantissa2 = (speedup * 100.0) - (whole * 100);

            snprintf(buf, BUF_SZ, "%lu cycles -> %lu.%.2lux faster", t2, whole, mantissa2);
    1390:	a809883a 	mov	r4,r21
        	timer_start_global();

            unsigned long t1 = (unsigned long)(tick_count_baseline & 0xFFFFFFFF);
            unsigned long t2 = (unsigned long)(tick_count & 0xFFFFFFFF);
            float speedup = ((float)t1) / ((float)t2);
            unsigned long whole = (unsigned long)speedup;
    1394:	1025883a 	mov	r18,r2
            unsigned long mantissa2 = (speedup * 100.0) - (whole * 100);

            snprintf(buf, BUF_SZ, "%lu cycles -> %lu.%.2lux faster", t2, whole, mantissa2);
    1398:	00036e00 	call	36e0 <__extendsfdf2>
    139c:	000d883a 	mov	r6,zero
    13a0:	01d01674 	movhi	r7,16473
    13a4:	180b883a 	mov	r5,r3
    13a8:	1009883a 	mov	r4,r2
    13ac:	00025a40 	call	25a4 <__muldf3>
    13b0:	91001924 	muli	r4,r18,100
    13b4:	102d883a 	mov	r22,r2
    13b8:	182b883a 	mov	r21,r3
    13bc:	00036380 	call	3638 <__floatunsidf>
    13c0:	100d883a 	mov	r6,r2
    13c4:	180f883a 	mov	r7,r3
    13c8:	b009883a 	mov	r4,r22
    13cc:	a80b883a 	mov	r5,r21
    13d0:	0002cbc0 	call	2cbc <__subdf3>
    13d4:	180b883a 	mov	r5,r3
    13d8:	1009883a 	mov	r4,r2
    13dc:	00017600 	call	1760 <__fixunsdfsi>
    13e0:	01800034 	movhi	r6,0
    13e4:	d8800115 	stw	r2,4(sp)
    13e8:	dc800015 	stw	r18,0(sp)
    13ec:	a00f883a 	mov	r7,r20
    13f0:	31932b04 	addi	r6,r6,19628
    13f4:	01401004 	movi	r5,64
    13f8:	d9002e04 	addi	r4,sp,184
    13fc:	0003a8c0 	call	3a8c <snprintf>
    1400:	00000406 	br	1414 <main+0x388>
        }

        else{
        	snprintf(buf, BUF_SZ, "%s", "Data error!");
    1404:	01400034 	movhi	r5,0
    1408:	29533304 	addi	r5,r5,19660
    140c:	d9002e04 	addi	r4,sp,184
    1410:	0003b440 	call	3b44 <strcpy>
    }

    printf("\n");
    1414:	01000284 	movi	r4,10
    1418:	000392c0 	call	392c <putchar>

	// Reset the performance counter
	PERF_RESET (PERF_UNIT_BASE);
    141c:	04800044 	movi	r18,1
    1420:	84800035 	stwio	r18,0(r16)
	// Do the student version:
	{
		printf("Starting Decryption HWacc Measurement\n");
    1424:	01000034 	movhi	r4,0
    1428:	21133604 	addi	r4,r4,19672
    142c:	00039c80 	call	39c8 <puts>
		// Start the performance counter
		PERF_START_MEASURING (PERF_UNIT_BASE);
    1430:	88000035 	stwio	zero,0(r17)

		alt_dcache_flush_all();
    1434:	00049a80 	call	49a8 <alt_dcache_flush_all>
		IOWR(INV_AES_ACCELERATOR_0_BASE,3,0);	//stop accelerator
    1438:	008000b4 	movhi	r2,2
    143c:	10881304 	addi	r2,r2,8268
    1440:	10000035 	stwio	zero,0(r2)
		IOWR(INV_AES_ACCELERATOR_0_BASE,2,INPUT_LENGTH);
    1444:	00c000b4 	movhi	r3,2
    1448:	18c81204 	addi	r3,r3,8264
    144c:	01004004 	movi	r4,256
    1450:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,0,outputdata);
    1454:	00c000b4 	movhi	r3,2
    1458:	18c81004 	addi	r3,r3,8256
    145c:	1cc00035 	stwio	r19,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,1,inv_outputdata);
    1460:	00c000b4 	movhi	r3,2
    1464:	18c81104 	addi	r3,r3,8260
    1468:	d9004a04 	addi	r4,sp,296
    146c:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,4,*(uint32 *)(key));
    1470:	d9004217 	ldw	r4,264(sp)
    1474:	00c000b4 	movhi	r3,2
    1478:	18c81404 	addi	r3,r3,8272
    147c:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
    1480:	d9004317 	ldw	r4,268(sp)
    1484:	00c000b4 	movhi	r3,2
    1488:	18c81504 	addi	r3,r3,8276
    148c:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
    1490:	d9004417 	ldw	r4,272(sp)
    1494:	00c000b4 	movhi	r3,2
    1498:	18c81604 	addi	r3,r3,8280
    149c:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
    14a0:	d9004517 	ldw	r4,276(sp)
    14a4:	00c000b4 	movhi	r3,2
    14a8:	18c81704 	addi	r3,r3,8284
    14ac:	19000035 	stwio	r4,0(r3)
		IOWR(INV_AES_ACCELERATOR_0_BASE,3,1);	//start accelerator
    14b0:	14800035 	stwio	r18,0(r2)

		while (inv_done == 0) {
			inv_done = IORD(INV_AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
    14b4:	10c00037 	ldwio	r3,0(r2)
		IOWR(INV_AES_ACCELERATOR_0_BASE,5,*(uint32 *)(key + 4));
		IOWR(INV_AES_ACCELERATOR_0_BASE,6,*(uint32 *)(key + 8));
		IOWR(INV_AES_ACCELERATOR_0_BASE,7,*(uint32 *)(key + 12));
		IOWR(INV_AES_ACCELERATOR_0_BASE,3,1);	//start accelerator

		while (inv_done == 0) {
    14b8:	183ffe26 	beq	r3,zero,14b4 <__alt_mem_epcs+0xfffe04b4>
			inv_done = IORD(INV_AES_ACCELERATOR_0_BASE,3);//check if all numbers are done
		}

		// Stop the performance counter
		PERF_STOP_MEASURING (PERF_UNIT_BASE);
    14bc:	80000035 	stwio	zero,0(r16)

		printf("Key %x %x %x %x\n", *(uint32 *)(key),*(uint32 *)(key+4),*(uint32 *)(key+8),*(uint32 *)(key+12));
    14c0:	d8804517 	ldw	r2,276(sp)
    14c4:	d9c04417 	ldw	r7,272(sp)
    14c8:	d9804317 	ldw	r6,268(sp)
    14cc:	d9404217 	ldw	r5,264(sp)
    14d0:	01000034 	movhi	r4,0
    14d4:	d8800015 	stw	r2,0(sp)
    14d8:	2112e204 	addi	r4,r4,19336
    14dc:	00038d80 	call	38d8 <printf>
		printf("Input %x %x %x %x\n", *(uint32 *)(outputdata),*(uint32 *)(outputdata+4),*(uint32 *)(outputdata+8),*(uint32 *)(outputdata+12));
    14e0:	d8805117 	ldw	r2,324(sp)
    14e4:	d9c05017 	ldw	r7,320(sp)
    14e8:	d9804f17 	ldw	r6,316(sp)
    14ec:	d9404e17 	ldw	r5,312(sp)
    14f0:	01000034 	movhi	r4,0
    14f4:	d8800015 	stw	r2,0(sp)
    14f8:	2112e704 	addi	r4,r4,19356
    14fc:	00038d80 	call	38d8 <printf>
		printf("Output %x %x %x %x\n", *(uint32 *)(inv_outputdata),*(uint32 *)(inv_outputdata+4),*(uint32 *)(inv_outputdata+8),*(uint32 *)(inv_outputdata+12));
    1500:	d8804d17 	ldw	r2,308(sp)
    1504:	d9c04c17 	ldw	r7,304(sp)
    1508:	d9804b17 	ldw	r6,300(sp)
    150c:	d9404a17 	ldw	r5,296(sp)
    1510:	01000034 	movhi	r4,0
    1514:	d8800015 	stw	r2,0(sp)
    1518:	2112ec04 	addi	r4,r4,19376
    151c:	00038d80 	call	38d8 <printf>

		// Show the performance data
		tick_count = perf_get_section_time(PERF_UNIT_BASE, 0);
    1520:	010000b4 	movhi	r4,2
    1524:	000b883a 	mov	r5,zero
    1528:	21082804 	addi	r4,r4,8352
    152c:	0004aa00 	call	4aa0 <perf_get_section_time>
		printf("\t-> Hardware Decryption operation took %llu cycles\n", tick_count);
    1530:	01000034 	movhi	r4,0
    1534:	100b883a 	mov	r5,r2
    1538:	180d883a 	mov	r6,r3
    153c:	21134004 	addi	r4,r4,19712
    1540:	00038d80 	call	38d8 <printf>
	}
    printf("The Output Of The Decryptor Is Correct!\n");
    1544:	01000034 	movhi	r4,0
    1548:	21134d04 	addi	r4,r4,19764
    154c:	00039c80 	call	39c8 <puts>


    return 0;
}
    1550:	0005883a 	mov	r2,zero
    1554:	dfc05a17 	ldw	ra,360(sp)
    1558:	ddc05917 	ldw	r23,356(sp)
    155c:	dd805817 	ldw	r22,352(sp)
    1560:	dd405717 	ldw	r21,348(sp)
    1564:	dd005617 	ldw	r20,344(sp)
    1568:	dcc05517 	ldw	r19,340(sp)
    156c:	dc805417 	ldw	r18,336(sp)
    1570:	dc405317 	ldw	r17,332(sp)
    1574:	dc005217 	ldw	r16,328(sp)
    1578:	dec05b04 	addi	sp,sp,364
    157c:	f800283a 	ret

00001580 <__timer_reset>:
#define TIMER_GLOBAL_BASE TIMER_1_BASE
#define TIMER_GLOBAL_FREQ TIMER_1_FREQ

// internal functions
void __timer_reset(int base) {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    1580:	00800204 	movi	r2,8
    1584:	20800135 	stwio	r2,4(r4)
			ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
	IOWR_ALTERA_AVALON_TIMER_STATUS(base, 0);
    1588:	20000035 	stwio	zero,0(r4)
    158c:	f800283a 	ret

00001590 <__timer_elapsed>:
}
int __timer_elapsed(int base, int freq) {
    1590:	defffe04 	addi	sp,sp,-8
    1594:	2007883a 	mov	r3,r4
    1598:	2809883a 	mov	r4,r5
    159c:	dfc00115 	stw	ra,4(sp)
    15a0:	dc000015 	stw	r16,0(sp)
	// read the period
	unsigned int period = IORD_ALTERA_AVALON_TIMER_PERIODH(base)<<16;
    15a4:	18800337 	ldwio	r2,12(r3)
    15a8:	1004943a 	slli	r2,r2,16
	period |= IORD_ALTERA_AVALON_TIMER_PERIODL(base);
    15ac:	19800237 	ldwio	r6,8(r3)
	// take a snapshot
	IOWR_ALTERA_AVALON_TIMER_SNAPL(base, 0);
    15b0:	19400404 	addi	r5,r3,16
    15b4:	28000035 	stwio	zero,0(r5)
	// read it
	unsigned int snap = IORD_ALTERA_AVALON_TIMER_SNAPH(base)<<16;
    15b8:	18c00537 	ldwio	r3,20(r3)
    15bc:	1806943a 	slli	r3,r3,16
	snap |= IORD_ALTERA_AVALON_TIMER_SNAPL(base);
    15c0:	2c000037 	ldwio	r16,0(r5)
	return (period-snap)/(freq/1000);
    15c4:	0140fa04 	movi	r5,1000
    15c8:	3084b03a 	or	r2,r6,r2
    15cc:	80e0b03a 	or	r16,r16,r3
    15d0:	1421c83a 	sub	r16,r2,r16
    15d4:	00017d40 	call	17d4 <__divsi3>
    15d8:	100b883a 	mov	r5,r2
    15dc:	8009883a 	mov	r4,r16
    15e0:	00018cc0 	call	18cc <__udivsi3>
}
    15e4:	dfc00117 	ldw	ra,4(sp)
    15e8:	dc000017 	ldw	r16,0(sp)
    15ec:	dec00204 	addi	sp,sp,8
    15f0:	f800283a 	ret

000015f4 <__timer_start>:
void __timer_start(int base, unsigned int period) {
    15f4:	defffd04 	addi	sp,sp,-12
    15f8:	dc400115 	stw	r17,4(sp)
    15fc:	dc000015 	stw	r16,0(sp)
    1600:	dfc00215 	stw	ra,8(sp)
    1604:	2821883a 	mov	r16,r5
    1608:	2023883a 	mov	r17,r4
	__timer_reset(base);
    160c:	00015800 	call	1580 <__timer_reset>
	IOWR_ALTERA_AVALON_TIMER_PERIODL(base, period & 0xFFFF);
    1610:	80bfffcc 	andi	r2,r16,65535
    1614:	88800235 	stwio	r2,8(r17)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(base, period >> 16);
    1618:	8020d43a 	srli	r16,r16,16
    161c:	8c000335 	stwio	r16,12(r17)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    1620:	00800104 	movi	r2,4
    1624:	88800135 	stwio	r2,4(r17)
			ALTERA_AVALON_TIMER_CONTROL_START_MSK);
}
    1628:	dfc00217 	ldw	ra,8(sp)
    162c:	dc400117 	ldw	r17,4(sp)
    1630:	dc000017 	ldw	r16,0(sp)
    1634:	dec00304 	addi	sp,sp,12
    1638:	f800283a 	ret

0000163c <timer_start_global>:

/**
 * Start the global timer (max period).
 */
void timer_start_global() {
	__timer_start(TIMER_GLOBAL_BASE, 0xFFFFFFFF);
    163c:	010000b4 	movhi	r4,2
    1640:	017fffc4 	movi	r5,-1
    1644:	21081804 	addi	r4,r4,8288
    1648:	00015f41 	jmpi	15f4 <__timer_start>

0000164c <timer_elapsed_global>:

/**
 * Returns the time elapsed since the global timer was initialized in ms.
 */
int timer_elapsed_global() {
	return __timer_elapsed(TIMER_GLOBAL_BASE, TIMER_GLOBAL_FREQ);
    164c:	0140bef4 	movhi	r5,763
    1650:	010000b4 	movhi	r4,2
    1654:	297c2004 	addi	r5,r5,-3968
    1658:	21081804 	addi	r4,r4,8288
    165c:	00015901 	jmpi	1590 <__timer_elapsed>

00001660 <timer_reset>:
#define TIMER_GLOBAL_BASE TIMER_1_BASE
#define TIMER_GLOBAL_FREQ TIMER_1_FREQ

// internal functions
void __timer_reset(int base) {
	IOWR_ALTERA_AVALON_TIMER_CONTROL(base,
    1660:	008000b4 	movhi	r2,2
    1664:	10882104 	addi	r2,r2,8324
    1668:	00c00204 	movi	r3,8
    166c:	10c00035 	stwio	r3,0(r2)
			ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
	IOWR_ALTERA_AVALON_TIMER_STATUS(base, 0);
    1670:	008000b4 	movhi	r2,2
    1674:	10882004 	addi	r2,r2,8320
    1678:	10000035 	stwio	zero,0(r2)
    167c:	f800283a 	ret

00001680 <timer_start>:
/**
 * initializes the user timer to run for "ms" ms.
 */
void timer_start(int ms) {
	unsigned int period = (TIMER_USER_FREQ / 1000) * ms - 1;
	__timer_start(TIMER_USER_BASE, period);
    1680:	0170d414 	movui	r5,50000
    1684:	214b383a 	mul	r5,r4,r5
    1688:	010000b4 	movhi	r4,2
    168c:	21082004 	addi	r4,r4,8320
    1690:	297fffc4 	addi	r5,r5,-1
    1694:	00015f41 	jmpi	15f4 <__timer_start>

00001698 <timer_read_to>:
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    1698:	008000b4 	movhi	r2,2
    169c:	10882004 	addi	r2,r2,8320
    16a0:	10800037 	ldwio	r2,0(r2)
}
    16a4:	1080004c 	andi	r2,r2,1
    16a8:	f800283a 	ret

000016ac <timer_wait>:

/**
 * Wait for "ms" ms.
 */
void timer_wait(int ms) {
    16ac:	deffff04 	addi	sp,sp,-4
    16b0:	dfc00015 	stw	ra,0(sp)
	timer_start(ms);
    16b4:	00016800 	call	1680 <timer_start>
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    16b8:	00c000b4 	movhi	r3,2
    16bc:	18c82004 	addi	r3,r3,8320
    16c0:	18800037 	ldwio	r2,0(r3)
/**
 * Wait for "ms" ms.
 */
void timer_wait(int ms) {
	timer_start(ms);
	while(timer_read_to()==0);
    16c4:	1080004c 	andi	r2,r2,1
    16c8:	103ffd26 	beq	r2,zero,16c0 <__alt_mem_epcs+0xfffe06c0>
}
    16cc:	dfc00017 	ldw	ra,0(sp)
    16d0:	dec00104 	addi	sp,sp,4
    16d4:	f800283a 	ret

000016d8 <timer_wait_for_to>:
/**
 * Reads timeout bit.
 * True if the timer reached 0.
 */
int timer_read_to() {
	return IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_USER_BASE) & ALTERA_AVALON_TIMER_STATUS_TO_MSK;
    16d8:	00c000b4 	movhi	r3,2
    16dc:	18c82004 	addi	r3,r3,8320
    16e0:	18800037 	ldwio	r2,0(r3)

/**
 * Wait for the timer to time-out.
 */
void timer_wait_for_to() {
	while(timer_read_to()==0);
    16e4:	1080004c 	andi	r2,r2,1
    16e8:	103ffd26 	beq	r2,zero,16e0 <__alt_mem_epcs+0xfffe06e0>
}
    16ec:	f800283a 	ret

000016f0 <timer_elapsed>:

/**
 * Reads the elapsed time in ms since the timer was started.
 */
int timer_elapsed() {
	return __timer_elapsed(TIMER_USER_BASE, TIMER_USER_BASE);
    16f0:	014000b4 	movhi	r5,2
    16f4:	29482004 	addi	r5,r5,8320
    16f8:	2809883a 	mov	r4,r5
    16fc:	00015901 	jmpi	1590 <__timer_elapsed>

00001700 <__fixunssfsi>:
    1700:	defffd04 	addi	sp,sp,-12
    1704:	dc000015 	stw	r16,0(sp)
    1708:	0413c034 	movhi	r16,20224
    170c:	800b883a 	mov	r5,r16
    1710:	dc400115 	stw	r17,4(sp)
    1714:	dfc00215 	stw	ra,8(sp)
    1718:	2023883a 	mov	r17,r4
    171c:	0001dc80 	call	1dc8 <__gesf2>
    1720:	1000070e 	bge	r2,zero,1740 <__fixunssfsi+0x40>
    1724:	8809883a 	mov	r4,r17
    1728:	00023680 	call	2368 <__fixsfsi>
    172c:	dfc00217 	ldw	ra,8(sp)
    1730:	dc400117 	ldw	r17,4(sp)
    1734:	dc000017 	ldw	r16,0(sp)
    1738:	dec00304 	addi	sp,sp,12
    173c:	f800283a 	ret
    1740:	800b883a 	mov	r5,r16
    1744:	8809883a 	mov	r4,r17
    1748:	0001e840 	call	1e84 <__subsf3>
    174c:	1009883a 	mov	r4,r2
    1750:	00023680 	call	2368 <__fixsfsi>
    1754:	00e00034 	movhi	r3,32768
    1758:	10c5883a 	add	r2,r2,r3
    175c:	003ff306 	br	172c <__alt_mem_epcs+0xfffe072c>

00001760 <__fixunsdfsi>:
    1760:	defffd04 	addi	sp,sp,-12
    1764:	000d883a 	mov	r6,zero
    1768:	01d07834 	movhi	r7,16864
    176c:	dc400115 	stw	r17,4(sp)
    1770:	dc000015 	stw	r16,0(sp)
    1774:	dfc00215 	stw	ra,8(sp)
    1778:	2023883a 	mov	r17,r4
    177c:	2821883a 	mov	r16,r5
    1780:	00024c80 	call	24c8 <__gedf2>
    1784:	1000080e 	bge	r2,zero,17a8 <__fixunsdfsi+0x48>
    1788:	8809883a 	mov	r4,r17
    178c:	800b883a 	mov	r5,r16
    1790:	00035b80 	call	35b8 <__fixdfsi>
    1794:	dfc00217 	ldw	ra,8(sp)
    1798:	dc400117 	ldw	r17,4(sp)
    179c:	dc000017 	ldw	r16,0(sp)
    17a0:	dec00304 	addi	sp,sp,12
    17a4:	f800283a 	ret
    17a8:	000d883a 	mov	r6,zero
    17ac:	01d07834 	movhi	r7,16864
    17b0:	8809883a 	mov	r4,r17
    17b4:	800b883a 	mov	r5,r16
    17b8:	0002cbc0 	call	2cbc <__subdf3>
    17bc:	180b883a 	mov	r5,r3
    17c0:	1009883a 	mov	r4,r2
    17c4:	00035b80 	call	35b8 <__fixdfsi>
    17c8:	00e00034 	movhi	r3,32768
    17cc:	10c5883a 	add	r2,r2,r3
    17d0:	003ff006 	br	1794 <__alt_mem_epcs+0xfffe0794>

000017d4 <__divsi3>:
    17d4:	20001b16 	blt	r4,zero,1844 <__divsi3+0x70>
    17d8:	000f883a 	mov	r7,zero
    17dc:	28001616 	blt	r5,zero,1838 <__divsi3+0x64>
    17e0:	200d883a 	mov	r6,r4
    17e4:	29001a2e 	bgeu	r5,r4,1850 <__divsi3+0x7c>
    17e8:	00800804 	movi	r2,32
    17ec:	00c00044 	movi	r3,1
    17f0:	00000106 	br	17f8 <__divsi3+0x24>
    17f4:	10000d26 	beq	r2,zero,182c <__divsi3+0x58>
    17f8:	294b883a 	add	r5,r5,r5
    17fc:	10bfffc4 	addi	r2,r2,-1
    1800:	18c7883a 	add	r3,r3,r3
    1804:	293ffb36 	bltu	r5,r4,17f4 <__alt_mem_epcs+0xfffe07f4>
    1808:	0005883a 	mov	r2,zero
    180c:	18000726 	beq	r3,zero,182c <__divsi3+0x58>
    1810:	0005883a 	mov	r2,zero
    1814:	31400236 	bltu	r6,r5,1820 <__divsi3+0x4c>
    1818:	314dc83a 	sub	r6,r6,r5
    181c:	10c4b03a 	or	r2,r2,r3
    1820:	1806d07a 	srli	r3,r3,1
    1824:	280ad07a 	srli	r5,r5,1
    1828:	183ffa1e 	bne	r3,zero,1814 <__alt_mem_epcs+0xfffe0814>
    182c:	38000126 	beq	r7,zero,1834 <__divsi3+0x60>
    1830:	0085c83a 	sub	r2,zero,r2
    1834:	f800283a 	ret
    1838:	014bc83a 	sub	r5,zero,r5
    183c:	39c0005c 	xori	r7,r7,1
    1840:	003fe706 	br	17e0 <__alt_mem_epcs+0xfffe07e0>
    1844:	0109c83a 	sub	r4,zero,r4
    1848:	01c00044 	movi	r7,1
    184c:	003fe306 	br	17dc <__alt_mem_epcs+0xfffe07dc>
    1850:	00c00044 	movi	r3,1
    1854:	003fee06 	br	1810 <__alt_mem_epcs+0xfffe0810>

00001858 <__modsi3>:
    1858:	20001716 	blt	r4,zero,18b8 <__modsi3+0x60>
    185c:	000f883a 	mov	r7,zero
    1860:	2005883a 	mov	r2,r4
    1864:	28001216 	blt	r5,zero,18b0 <__modsi3+0x58>
    1868:	2900162e 	bgeu	r5,r4,18c4 <__modsi3+0x6c>
    186c:	01800804 	movi	r6,32
    1870:	00c00044 	movi	r3,1
    1874:	00000106 	br	187c <__modsi3+0x24>
    1878:	30000a26 	beq	r6,zero,18a4 <__modsi3+0x4c>
    187c:	294b883a 	add	r5,r5,r5
    1880:	31bfffc4 	addi	r6,r6,-1
    1884:	18c7883a 	add	r3,r3,r3
    1888:	293ffb36 	bltu	r5,r4,1878 <__alt_mem_epcs+0xfffe0878>
    188c:	18000526 	beq	r3,zero,18a4 <__modsi3+0x4c>
    1890:	1806d07a 	srli	r3,r3,1
    1894:	11400136 	bltu	r2,r5,189c <__modsi3+0x44>
    1898:	1145c83a 	sub	r2,r2,r5
    189c:	280ad07a 	srli	r5,r5,1
    18a0:	183ffb1e 	bne	r3,zero,1890 <__alt_mem_epcs+0xfffe0890>
    18a4:	38000126 	beq	r7,zero,18ac <__modsi3+0x54>
    18a8:	0085c83a 	sub	r2,zero,r2
    18ac:	f800283a 	ret
    18b0:	014bc83a 	sub	r5,zero,r5
    18b4:	003fec06 	br	1868 <__alt_mem_epcs+0xfffe0868>
    18b8:	0109c83a 	sub	r4,zero,r4
    18bc:	01c00044 	movi	r7,1
    18c0:	003fe706 	br	1860 <__alt_mem_epcs+0xfffe0860>
    18c4:	00c00044 	movi	r3,1
    18c8:	003ff106 	br	1890 <__alt_mem_epcs+0xfffe0890>

000018cc <__udivsi3>:
    18cc:	200d883a 	mov	r6,r4
    18d0:	2900152e 	bgeu	r5,r4,1928 <__udivsi3+0x5c>
    18d4:	28001416 	blt	r5,zero,1928 <__udivsi3+0x5c>
    18d8:	00800804 	movi	r2,32
    18dc:	00c00044 	movi	r3,1
    18e0:	00000206 	br	18ec <__udivsi3+0x20>
    18e4:	10000e26 	beq	r2,zero,1920 <__udivsi3+0x54>
    18e8:	28000516 	blt	r5,zero,1900 <__udivsi3+0x34>
    18ec:	294b883a 	add	r5,r5,r5
    18f0:	10bfffc4 	addi	r2,r2,-1
    18f4:	18c7883a 	add	r3,r3,r3
    18f8:	293ffa36 	bltu	r5,r4,18e4 <__alt_mem_epcs+0xfffe08e4>
    18fc:	18000826 	beq	r3,zero,1920 <__udivsi3+0x54>
    1900:	0005883a 	mov	r2,zero
    1904:	31400236 	bltu	r6,r5,1910 <__udivsi3+0x44>
    1908:	314dc83a 	sub	r6,r6,r5
    190c:	10c4b03a 	or	r2,r2,r3
    1910:	1806d07a 	srli	r3,r3,1
    1914:	280ad07a 	srli	r5,r5,1
    1918:	183ffa1e 	bne	r3,zero,1904 <__alt_mem_epcs+0xfffe0904>
    191c:	f800283a 	ret
    1920:	0005883a 	mov	r2,zero
    1924:	f800283a 	ret
    1928:	00c00044 	movi	r3,1
    192c:	003ff406 	br	1900 <__alt_mem_epcs+0xfffe0900>

00001930 <__umodsi3>:
    1930:	2005883a 	mov	r2,r4
    1934:	2900122e 	bgeu	r5,r4,1980 <__umodsi3+0x50>
    1938:	28001116 	blt	r5,zero,1980 <__umodsi3+0x50>
    193c:	01800804 	movi	r6,32
    1940:	00c00044 	movi	r3,1
    1944:	00000206 	br	1950 <__umodsi3+0x20>
    1948:	30000c26 	beq	r6,zero,197c <__umodsi3+0x4c>
    194c:	28000516 	blt	r5,zero,1964 <__umodsi3+0x34>
    1950:	294b883a 	add	r5,r5,r5
    1954:	31bfffc4 	addi	r6,r6,-1
    1958:	18c7883a 	add	r3,r3,r3
    195c:	293ffa36 	bltu	r5,r4,1948 <__alt_mem_epcs+0xfffe0948>
    1960:	18000626 	beq	r3,zero,197c <__umodsi3+0x4c>
    1964:	1806d07a 	srli	r3,r3,1
    1968:	11400136 	bltu	r2,r5,1970 <__umodsi3+0x40>
    196c:	1145c83a 	sub	r2,r2,r5
    1970:	280ad07a 	srli	r5,r5,1
    1974:	183ffb1e 	bne	r3,zero,1964 <__alt_mem_epcs+0xfffe0964>
    1978:	f800283a 	ret
    197c:	f800283a 	ret
    1980:	00c00044 	movi	r3,1
    1984:	003ff706 	br	1964 <__alt_mem_epcs+0xfffe0964>

00001988 <__divsf3>:
    1988:	defff504 	addi	sp,sp,-44
    198c:	200cd5fa 	srli	r6,r4,23
    1990:	dcc00415 	stw	r19,16(sp)
    1994:	2026d7fa 	srli	r19,r4,31
    1998:	00c02034 	movhi	r3,128
    199c:	dd800715 	stw	r22,28(sp)
    19a0:	dd000515 	stw	r20,20(sp)
    19a4:	dc800315 	stw	r18,12(sp)
    19a8:	18ffffc4 	addi	r3,r3,-1
    19ac:	dfc00a15 	stw	ra,40(sp)
    19b0:	df000915 	stw	fp,36(sp)
    19b4:	ddc00815 	stw	r23,32(sp)
    19b8:	dd400615 	stw	r21,24(sp)
    19bc:	dc400215 	stw	r17,8(sp)
    19c0:	dc000115 	stw	r16,4(sp)
    19c4:	35003fcc 	andi	r20,r6,255
    19c8:	1924703a 	and	r18,r3,r4
    19cc:	9d803fcc 	andi	r22,r19,255
    19d0:	a0005226 	beq	r20,zero,1b1c <__divsf3+0x194>
    19d4:	00803fc4 	movi	r2,255
    19d8:	a0802e26 	beq	r20,r2,1a94 <__divsf3+0x10c>
    19dc:	91002034 	orhi	r4,r18,128
    19e0:	202490fa 	slli	r18,r4,3
    19e4:	a53fe044 	addi	r20,r20,-127
    19e8:	0021883a 	mov	r16,zero
    19ec:	002f883a 	mov	r23,zero
    19f0:	280cd5fa 	srli	r6,r5,23
    19f4:	282ad7fa 	srli	r21,r5,31
    19f8:	00c02034 	movhi	r3,128
    19fc:	18ffffc4 	addi	r3,r3,-1
    1a00:	31803fcc 	andi	r6,r6,255
    1a04:	1962703a 	and	r17,r3,r5
    1a08:	af003fcc 	andi	fp,r21,255
    1a0c:	30004a26 	beq	r6,zero,1b38 <__divsf3+0x1b0>
    1a10:	00803fc4 	movi	r2,255
    1a14:	30804526 	beq	r6,r2,1b2c <__divsf3+0x1a4>
    1a18:	89402034 	orhi	r5,r17,128
    1a1c:	282290fa 	slli	r17,r5,3
    1a20:	31bfe044 	addi	r6,r6,-127
    1a24:	000b883a 	mov	r5,zero
    1a28:	2c20b03a 	or	r16,r5,r16
    1a2c:	802090ba 	slli	r16,r16,2
    1a30:	00800034 	movhi	r2,0
    1a34:	10869504 	addi	r2,r2,6740
    1a38:	80a1883a 	add	r16,r16,r2
    1a3c:	81000017 	ldw	r4,0(r16)
    1a40:	9d46f03a 	xor	r3,r19,r21
    1a44:	180f883a 	mov	r7,r3
    1a48:	18803fcc 	andi	r2,r3,255
    1a4c:	a18dc83a 	sub	r6,r20,r6
    1a50:	2000683a 	jmp	r4
    1a54:	00001c38 	rdprs	zero,zero,112
    1a58:	00001abc 	xorhi	zero,zero,106
    1a5c:	00001c2c 	andhi	zero,zero,112
    1a60:	00001aa8 	cmpgeui	zero,zero,106
    1a64:	00001c2c 	andhi	zero,zero,112
    1a68:	00001c04 	movi	zero,112
    1a6c:	00001c2c 	andhi	zero,zero,112
    1a70:	00001aa8 	cmpgeui	zero,zero,106
    1a74:	00001abc 	xorhi	zero,zero,106
    1a78:	00001abc 	xorhi	zero,zero,106
    1a7c:	00001c04 	movi	zero,112
    1a80:	00001aa8 	cmpgeui	zero,zero,106
    1a84:	00001d18 	cmpnei	zero,zero,116
    1a88:	00001d18 	cmpnei	zero,zero,116
    1a8c:	00001d18 	cmpnei	zero,zero,116
    1a90:	00001ccc 	andi	zero,zero,115
    1a94:	9000581e 	bne	r18,zero,1bf8 <__divsf3+0x270>
    1a98:	04000204 	movi	r16,8
    1a9c:	05c00084 	movi	r23,2
    1aa0:	003fd306 	br	19f0 <__alt_mem_epcs+0xfffe09f0>
    1aa4:	0023883a 	mov	r17,zero
    1aa8:	e02d883a 	mov	r22,fp
    1aac:	282f883a 	mov	r23,r5
    1ab0:	00800084 	movi	r2,2
    1ab4:	b8808f1e 	bne	r23,r2,1cf4 <__divsf3+0x36c>
    1ab8:	b005883a 	mov	r2,r22
    1abc:	11c0004c 	andi	r7,r2,1
    1ac0:	013fffc4 	movi	r4,-1
    1ac4:	000d883a 	mov	r6,zero
    1ac8:	21003fcc 	andi	r4,r4,255
    1acc:	200895fa 	slli	r4,r4,23
    1ad0:	38803fcc 	andi	r2,r7,255
    1ad4:	00c02034 	movhi	r3,128
    1ad8:	100497fa 	slli	r2,r2,31
    1adc:	18ffffc4 	addi	r3,r3,-1
    1ae0:	30c6703a 	and	r3,r6,r3
    1ae4:	1906b03a 	or	r3,r3,r4
    1ae8:	1884b03a 	or	r2,r3,r2
    1aec:	dfc00a17 	ldw	ra,40(sp)
    1af0:	df000917 	ldw	fp,36(sp)
    1af4:	ddc00817 	ldw	r23,32(sp)
    1af8:	dd800717 	ldw	r22,28(sp)
    1afc:	dd400617 	ldw	r21,24(sp)
    1b00:	dd000517 	ldw	r20,20(sp)
    1b04:	dcc00417 	ldw	r19,16(sp)
    1b08:	dc800317 	ldw	r18,12(sp)
    1b0c:	dc400217 	ldw	r17,8(sp)
    1b10:	dc000117 	ldw	r16,4(sp)
    1b14:	dec00b04 	addi	sp,sp,44
    1b18:	f800283a 	ret
    1b1c:	90002b1e 	bne	r18,zero,1bcc <__divsf3+0x244>
    1b20:	04000104 	movi	r16,4
    1b24:	05c00044 	movi	r23,1
    1b28:	003fb106 	br	19f0 <__alt_mem_epcs+0xfffe09f0>
    1b2c:	8800251e 	bne	r17,zero,1bc4 <__divsf3+0x23c>
    1b30:	01400084 	movi	r5,2
    1b34:	00000206 	br	1b40 <__divsf3+0x1b8>
    1b38:	88001a1e 	bne	r17,zero,1ba4 <__divsf3+0x21c>
    1b3c:	01400044 	movi	r5,1
    1b40:	8160b03a 	or	r16,r16,r5
    1b44:	802090ba 	slli	r16,r16,2
    1b48:	00c00034 	movhi	r3,0
    1b4c:	18c6d904 	addi	r3,r3,7012
    1b50:	80e1883a 	add	r16,r16,r3
    1b54:	80c00017 	ldw	r3,0(r16)
    1b58:	9d44f03a 	xor	r2,r19,r21
    1b5c:	a18dc83a 	sub	r6,r20,r6
    1b60:	1800683a 	jmp	r3
    1b64:	00001abc 	xorhi	zero,zero,106
    1b68:	00001abc 	xorhi	zero,zero,106
    1b6c:	00001d08 	cmpgei	zero,zero,116
    1b70:	00001aa4 	muli	zero,zero,106
    1b74:	00001d08 	cmpgei	zero,zero,116
    1b78:	00001c04 	movi	zero,112
    1b7c:	00001d08 	cmpgei	zero,zero,116
    1b80:	00001aa4 	muli	zero,zero,106
    1b84:	00001abc 	xorhi	zero,zero,106
    1b88:	00001abc 	xorhi	zero,zero,106
    1b8c:	00001c04 	movi	zero,112
    1b90:	00001aa4 	muli	zero,zero,106
    1b94:	00001d18 	cmpnei	zero,zero,116
    1b98:	00001d18 	cmpnei	zero,zero,116
    1b9c:	00001d18 	cmpnei	zero,zero,116
    1ba0:	00001d30 	cmpltui	zero,zero,116
    1ba4:	8809883a 	mov	r4,r17
    1ba8:	00037f00 	call	37f0 <__clzsi2>
    1bac:	10fffec4 	addi	r3,r2,-5
    1bb0:	10801d84 	addi	r2,r2,118
    1bb4:	88e2983a 	sll	r17,r17,r3
    1bb8:	008dc83a 	sub	r6,zero,r2
    1bbc:	000b883a 	mov	r5,zero
    1bc0:	003f9906 	br	1a28 <__alt_mem_epcs+0xfffe0a28>
    1bc4:	014000c4 	movi	r5,3
    1bc8:	003f9706 	br	1a28 <__alt_mem_epcs+0xfffe0a28>
    1bcc:	9009883a 	mov	r4,r18
    1bd0:	d9400015 	stw	r5,0(sp)
    1bd4:	00037f00 	call	37f0 <__clzsi2>
    1bd8:	10fffec4 	addi	r3,r2,-5
    1bdc:	11801d84 	addi	r6,r2,118
    1be0:	90e4983a 	sll	r18,r18,r3
    1be4:	01a9c83a 	sub	r20,zero,r6
    1be8:	0021883a 	mov	r16,zero
    1bec:	002f883a 	mov	r23,zero
    1bf0:	d9400017 	ldw	r5,0(sp)
    1bf4:	003f7e06 	br	19f0 <__alt_mem_epcs+0xfffe09f0>
    1bf8:	04000304 	movi	r16,12
    1bfc:	05c000c4 	movi	r23,3
    1c00:	003f7b06 	br	19f0 <__alt_mem_epcs+0xfffe09f0>
    1c04:	01802034 	movhi	r6,128
    1c08:	000f883a 	mov	r7,zero
    1c0c:	31bfffc4 	addi	r6,r6,-1
    1c10:	013fffc4 	movi	r4,-1
    1c14:	003fac06 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1c18:	01400044 	movi	r5,1
    1c1c:	2909c83a 	sub	r4,r5,r4
    1c20:	00c006c4 	movi	r3,27
    1c24:	19004b0e 	bge	r3,r4,1d54 <__divsf3+0x3cc>
    1c28:	114e703a 	and	r7,r2,r5
    1c2c:	0009883a 	mov	r4,zero
    1c30:	000d883a 	mov	r6,zero
    1c34:	003fa406 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1c38:	9006917a 	slli	r3,r18,5
    1c3c:	8822917a 	slli	r17,r17,5
    1c40:	1c40372e 	bgeu	r3,r17,1d20 <__divsf3+0x398>
    1c44:	31bfffc4 	addi	r6,r6,-1
    1c48:	010006c4 	movi	r4,27
    1c4c:	000b883a 	mov	r5,zero
    1c50:	180f883a 	mov	r7,r3
    1c54:	294b883a 	add	r5,r5,r5
    1c58:	18c7883a 	add	r3,r3,r3
    1c5c:	38000116 	blt	r7,zero,1c64 <__divsf3+0x2dc>
    1c60:	1c400236 	bltu	r3,r17,1c6c <__divsf3+0x2e4>
    1c64:	1c47c83a 	sub	r3,r3,r17
    1c68:	29400054 	ori	r5,r5,1
    1c6c:	213fffc4 	addi	r4,r4,-1
    1c70:	203ff71e 	bne	r4,zero,1c50 <__alt_mem_epcs+0xfffe0c50>
    1c74:	1806c03a 	cmpne	r3,r3,zero
    1c78:	1962b03a 	or	r17,r3,r5
    1c7c:	31001fc4 	addi	r4,r6,127
    1c80:	013fe50e 	bge	zero,r4,1c18 <__alt_mem_epcs+0xfffe0c18>
    1c84:	88c001cc 	andi	r3,r17,7
    1c88:	18000426 	beq	r3,zero,1c9c <__divsf3+0x314>
    1c8c:	88c003cc 	andi	r3,r17,15
    1c90:	01400104 	movi	r5,4
    1c94:	19400126 	beq	r3,r5,1c9c <__divsf3+0x314>
    1c98:	8963883a 	add	r17,r17,r5
    1c9c:	88c2002c 	andhi	r3,r17,2048
    1ca0:	18000426 	beq	r3,zero,1cb4 <__divsf3+0x32c>
    1ca4:	00fe0034 	movhi	r3,63488
    1ca8:	18ffffc4 	addi	r3,r3,-1
    1cac:	31002004 	addi	r4,r6,128
    1cb0:	88e2703a 	and	r17,r17,r3
    1cb4:	00c03f84 	movi	r3,254
    1cb8:	193f8016 	blt	r3,r4,1abc <__alt_mem_epcs+0xfffe0abc>
    1cbc:	880c91ba 	slli	r6,r17,6
    1cc0:	11c0004c 	andi	r7,r2,1
    1cc4:	300cd27a 	srli	r6,r6,9
    1cc8:	003f7f06 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1ccc:	9080102c 	andhi	r2,r18,64
    1cd0:	10000226 	beq	r2,zero,1cdc <__divsf3+0x354>
    1cd4:	8880102c 	andhi	r2,r17,64
    1cd8:	10001826 	beq	r2,zero,1d3c <__divsf3+0x3b4>
    1cdc:	00802034 	movhi	r2,128
    1ce0:	91801034 	orhi	r6,r18,64
    1ce4:	10bfffc4 	addi	r2,r2,-1
    1ce8:	980f883a 	mov	r7,r19
    1cec:	308c703a 	and	r6,r6,r2
    1cf0:	003fc706 	br	1c10 <__alt_mem_epcs+0xfffe0c10>
    1cf4:	008000c4 	movi	r2,3
    1cf8:	b8802d26 	beq	r23,r2,1db0 <__divsf3+0x428>
    1cfc:	00c00044 	movi	r3,1
    1d00:	b005883a 	mov	r2,r22
    1d04:	b8ffdd1e 	bne	r23,r3,1c7c <__alt_mem_epcs+0xfffe0c7c>
    1d08:	11c0004c 	andi	r7,r2,1
    1d0c:	0009883a 	mov	r4,zero
    1d10:	000d883a 	mov	r6,zero
    1d14:	003f6c06 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1d18:	9023883a 	mov	r17,r18
    1d1c:	003f6406 	br	1ab0 <__alt_mem_epcs+0xfffe0ab0>
    1d20:	1c47c83a 	sub	r3,r3,r17
    1d24:	01000684 	movi	r4,26
    1d28:	01400044 	movi	r5,1
    1d2c:	003fc806 	br	1c50 <__alt_mem_epcs+0xfffe0c50>
    1d30:	9080102c 	andhi	r2,r18,64
    1d34:	103fe926 	beq	r2,zero,1cdc <__alt_mem_epcs+0xfffe0cdc>
    1d38:	0023883a 	mov	r17,zero
    1d3c:	00802034 	movhi	r2,128
    1d40:	89801034 	orhi	r6,r17,64
    1d44:	10bfffc4 	addi	r2,r2,-1
    1d48:	a80f883a 	mov	r7,r21
    1d4c:	308c703a 	and	r6,r6,r2
    1d50:	003faf06 	br	1c10 <__alt_mem_epcs+0xfffe0c10>
    1d54:	01c00804 	movi	r7,32
    1d58:	390fc83a 	sub	r7,r7,r4
    1d5c:	89ce983a 	sll	r7,r17,r7
    1d60:	890ad83a 	srl	r5,r17,r4
    1d64:	380ec03a 	cmpne	r7,r7,zero
    1d68:	29cab03a 	or	r5,r5,r7
    1d6c:	28c001cc 	andi	r3,r5,7
    1d70:	18000426 	beq	r3,zero,1d84 <__divsf3+0x3fc>
    1d74:	28c003cc 	andi	r3,r5,15
    1d78:	01000104 	movi	r4,4
    1d7c:	19000126 	beq	r3,r4,1d84 <__divsf3+0x3fc>
    1d80:	290b883a 	add	r5,r5,r4
    1d84:	28c1002c 	andhi	r3,r5,1024
    1d88:	18000426 	beq	r3,zero,1d9c <__divsf3+0x414>
    1d8c:	11c0004c 	andi	r7,r2,1
    1d90:	01000044 	movi	r4,1
    1d94:	000d883a 	mov	r6,zero
    1d98:	003f4b06 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1d9c:	280a91ba 	slli	r5,r5,6
    1da0:	11c0004c 	andi	r7,r2,1
    1da4:	0009883a 	mov	r4,zero
    1da8:	280cd27a 	srli	r6,r5,9
    1dac:	003f4606 	br	1ac8 <__alt_mem_epcs+0xfffe0ac8>
    1db0:	00802034 	movhi	r2,128
    1db4:	89801034 	orhi	r6,r17,64
    1db8:	10bfffc4 	addi	r2,r2,-1
    1dbc:	b00f883a 	mov	r7,r22
    1dc0:	308c703a 	and	r6,r6,r2
    1dc4:	003f9206 	br	1c10 <__alt_mem_epcs+0xfffe0c10>

00001dc8 <__gesf2>:
    1dc8:	2004d5fa 	srli	r2,r4,23
    1dcc:	2806d5fa 	srli	r3,r5,23
    1dd0:	01802034 	movhi	r6,128
    1dd4:	31bfffc4 	addi	r6,r6,-1
    1dd8:	10803fcc 	andi	r2,r2,255
    1ddc:	01c03fc4 	movi	r7,255
    1de0:	3110703a 	and	r8,r6,r4
    1de4:	18c03fcc 	andi	r3,r3,255
    1de8:	314c703a 	and	r6,r6,r5
    1dec:	2008d7fa 	srli	r4,r4,31
    1df0:	280ad7fa 	srli	r5,r5,31
    1df4:	11c01926 	beq	r2,r7,1e5c <__gesf2+0x94>
    1df8:	01c03fc4 	movi	r7,255
    1dfc:	19c00f26 	beq	r3,r7,1e3c <__gesf2+0x74>
    1e00:	1000061e 	bne	r2,zero,1e1c <__gesf2+0x54>
    1e04:	400f003a 	cmpeq	r7,r8,zero
    1e08:	1800071e 	bne	r3,zero,1e28 <__gesf2+0x60>
    1e0c:	3000061e 	bne	r6,zero,1e28 <__gesf2+0x60>
    1e10:	0005883a 	mov	r2,zero
    1e14:	40000e1e 	bne	r8,zero,1e50 <__gesf2+0x88>
    1e18:	f800283a 	ret
    1e1c:	18000a1e 	bne	r3,zero,1e48 <__gesf2+0x80>
    1e20:	30000b26 	beq	r6,zero,1e50 <__gesf2+0x88>
    1e24:	000f883a 	mov	r7,zero
    1e28:	29403fcc 	andi	r5,r5,255
    1e2c:	38000726 	beq	r7,zero,1e4c <__gesf2+0x84>
    1e30:	28000826 	beq	r5,zero,1e54 <__gesf2+0x8c>
    1e34:	00800044 	movi	r2,1
    1e38:	f800283a 	ret
    1e3c:	303ff026 	beq	r6,zero,1e00 <__alt_mem_epcs+0xfffe0e00>
    1e40:	00bfff84 	movi	r2,-2
    1e44:	f800283a 	ret
    1e48:	29403fcc 	andi	r5,r5,255
    1e4c:	21400526 	beq	r4,r5,1e64 <__gesf2+0x9c>
    1e50:	203ff826 	beq	r4,zero,1e34 <__alt_mem_epcs+0xfffe0e34>
    1e54:	00bfffc4 	movi	r2,-1
    1e58:	f800283a 	ret
    1e5c:	403fe626 	beq	r8,zero,1df8 <__alt_mem_epcs+0xfffe0df8>
    1e60:	003ff706 	br	1e40 <__alt_mem_epcs+0xfffe0e40>
    1e64:	18bffa16 	blt	r3,r2,1e50 <__alt_mem_epcs+0xfffe0e50>
    1e68:	10c00216 	blt	r2,r3,1e74 <__gesf2+0xac>
    1e6c:	323ff836 	bltu	r6,r8,1e50 <__alt_mem_epcs+0xfffe0e50>
    1e70:	4180022e 	bgeu	r8,r6,1e7c <__gesf2+0xb4>
    1e74:	203fef1e 	bne	r4,zero,1e34 <__alt_mem_epcs+0xfffe0e34>
    1e78:	003ff606 	br	1e54 <__alt_mem_epcs+0xfffe0e54>
    1e7c:	0005883a 	mov	r2,zero
    1e80:	f800283a 	ret

00001e84 <__subsf3>:
    1e84:	defffc04 	addi	sp,sp,-16
    1e88:	280cd5fa 	srli	r6,r5,23
    1e8c:	dc000015 	stw	r16,0(sp)
    1e90:	01c02034 	movhi	r7,128
    1e94:	2020d5fa 	srli	r16,r4,23
    1e98:	39ffffc4 	addi	r7,r7,-1
    1e9c:	3906703a 	and	r3,r7,r4
    1ea0:	dc400115 	stw	r17,4(sp)
    1ea4:	394e703a 	and	r7,r7,r5
    1ea8:	2022d7fa 	srli	r17,r4,31
    1eac:	dfc00315 	stw	ra,12(sp)
    1eb0:	dc800215 	stw	r18,8(sp)
    1eb4:	31803fcc 	andi	r6,r6,255
    1eb8:	01003fc4 	movi	r4,255
    1ebc:	84003fcc 	andi	r16,r16,255
    1ec0:	180690fa 	slli	r3,r3,3
    1ec4:	2804d7fa 	srli	r2,r5,31
    1ec8:	380e90fa 	slli	r7,r7,3
    1ecc:	31006d26 	beq	r6,r4,2084 <__subsf3+0x200>
    1ed0:	1080005c 	xori	r2,r2,1
    1ed4:	8189c83a 	sub	r4,r16,r6
    1ed8:	14404f26 	beq	r2,r17,2018 <__subsf3+0x194>
    1edc:	0100770e 	bge	zero,r4,20bc <__subsf3+0x238>
    1ee0:	30001e1e 	bne	r6,zero,1f5c <__subsf3+0xd8>
    1ee4:	38006a1e 	bne	r7,zero,2090 <__subsf3+0x20c>
    1ee8:	188001cc 	andi	r2,r3,7
    1eec:	10000426 	beq	r2,zero,1f00 <__subsf3+0x7c>
    1ef0:	188003cc 	andi	r2,r3,15
    1ef4:	01000104 	movi	r4,4
    1ef8:	11000126 	beq	r2,r4,1f00 <__subsf3+0x7c>
    1efc:	1907883a 	add	r3,r3,r4
    1f00:	1881002c 	andhi	r2,r3,1024
    1f04:	10003926 	beq	r2,zero,1fec <__subsf3+0x168>
    1f08:	84000044 	addi	r16,r16,1
    1f0c:	00803fc4 	movi	r2,255
    1f10:	80807526 	beq	r16,r2,20e8 <__subsf3+0x264>
    1f14:	180691ba 	slli	r3,r3,6
    1f18:	8880004c 	andi	r2,r17,1
    1f1c:	180ad27a 	srli	r5,r3,9
    1f20:	84003fcc 	andi	r16,r16,255
    1f24:	800695fa 	slli	r3,r16,23
    1f28:	10803fcc 	andi	r2,r2,255
    1f2c:	01002034 	movhi	r4,128
    1f30:	213fffc4 	addi	r4,r4,-1
    1f34:	100497fa 	slli	r2,r2,31
    1f38:	2920703a 	and	r16,r5,r4
    1f3c:	80e0b03a 	or	r16,r16,r3
    1f40:	8084b03a 	or	r2,r16,r2
    1f44:	dfc00317 	ldw	ra,12(sp)
    1f48:	dc800217 	ldw	r18,8(sp)
    1f4c:	dc400117 	ldw	r17,4(sp)
    1f50:	dc000017 	ldw	r16,0(sp)
    1f54:	dec00404 	addi	sp,sp,16
    1f58:	f800283a 	ret
    1f5c:	00803fc4 	movi	r2,255
    1f60:	80bfe126 	beq	r16,r2,1ee8 <__alt_mem_epcs+0xfffe0ee8>
    1f64:	39c10034 	orhi	r7,r7,1024
    1f68:	008006c4 	movi	r2,27
    1f6c:	11007416 	blt	r2,r4,2140 <__subsf3+0x2bc>
    1f70:	00800804 	movi	r2,32
    1f74:	1105c83a 	sub	r2,r2,r4
    1f78:	3884983a 	sll	r2,r7,r2
    1f7c:	390ed83a 	srl	r7,r7,r4
    1f80:	1008c03a 	cmpne	r4,r2,zero
    1f84:	390eb03a 	or	r7,r7,r4
    1f88:	19c7c83a 	sub	r3,r3,r7
    1f8c:	1881002c 	andhi	r2,r3,1024
    1f90:	10001426 	beq	r2,zero,1fe4 <__subsf3+0x160>
    1f94:	04810034 	movhi	r18,1024
    1f98:	94bfffc4 	addi	r18,r18,-1
    1f9c:	1ca4703a 	and	r18,r3,r18
    1fa0:	9009883a 	mov	r4,r18
    1fa4:	00037f00 	call	37f0 <__clzsi2>
    1fa8:	10bffec4 	addi	r2,r2,-5
    1fac:	90a4983a 	sll	r18,r18,r2
    1fb0:	14005116 	blt	r2,r16,20f8 <__subsf3+0x274>
    1fb4:	1405c83a 	sub	r2,r2,r16
    1fb8:	10c00044 	addi	r3,r2,1
    1fbc:	00800804 	movi	r2,32
    1fc0:	10c5c83a 	sub	r2,r2,r3
    1fc4:	9084983a 	sll	r2,r18,r2
    1fc8:	90e4d83a 	srl	r18,r18,r3
    1fcc:	0021883a 	mov	r16,zero
    1fd0:	1006c03a 	cmpne	r3,r2,zero
    1fd4:	90c6b03a 	or	r3,r18,r3
    1fd8:	003fc306 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    1fdc:	2000e026 	beq	r4,zero,2360 <__subsf3+0x4dc>
    1fe0:	2007883a 	mov	r3,r4
    1fe4:	188001cc 	andi	r2,r3,7
    1fe8:	103fc11e 	bne	r2,zero,1ef0 <__alt_mem_epcs+0xfffe0ef0>
    1fec:	180ad0fa 	srli	r5,r3,3
    1ff0:	00c03fc4 	movi	r3,255
    1ff4:	8880004c 	andi	r2,r17,1
    1ff8:	80c0031e 	bne	r16,r3,2008 <__subsf3+0x184>
    1ffc:	28006d26 	beq	r5,zero,21b4 <__subsf3+0x330>
    2000:	29401034 	orhi	r5,r5,64
    2004:	043fffc4 	movi	r16,-1
    2008:	00c02034 	movhi	r3,128
    200c:	18ffffc4 	addi	r3,r3,-1
    2010:	28ca703a 	and	r5,r5,r3
    2014:	003fc206 	br	1f20 <__alt_mem_epcs+0xfffe0f20>
    2018:	01003c0e 	bge	zero,r4,210c <__subsf3+0x288>
    201c:	30002126 	beq	r6,zero,20a4 <__subsf3+0x220>
    2020:	01403fc4 	movi	r5,255
    2024:	817fb026 	beq	r16,r5,1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2028:	39c10034 	orhi	r7,r7,1024
    202c:	014006c4 	movi	r5,27
    2030:	29007416 	blt	r5,r4,2204 <__subsf3+0x380>
    2034:	01400804 	movi	r5,32
    2038:	290bc83a 	sub	r5,r5,r4
    203c:	394a983a 	sll	r5,r7,r5
    2040:	390ed83a 	srl	r7,r7,r4
    2044:	2808c03a 	cmpne	r4,r5,zero
    2048:	390eb03a 	or	r7,r7,r4
    204c:	19c7883a 	add	r3,r3,r7
    2050:	1901002c 	andhi	r4,r3,1024
    2054:	20003826 	beq	r4,zero,2138 <__subsf3+0x2b4>
    2058:	84000044 	addi	r16,r16,1
    205c:	01003fc4 	movi	r4,255
    2060:	81005426 	beq	r16,r4,21b4 <__subsf3+0x330>
    2064:	1023883a 	mov	r17,r2
    2068:	00bf0034 	movhi	r2,64512
    206c:	10bfffc4 	addi	r2,r2,-1
    2070:	1900004c 	andi	r4,r3,1
    2074:	1886703a 	and	r3,r3,r2
    2078:	1806d07a 	srli	r3,r3,1
    207c:	1906b03a 	or	r3,r3,r4
    2080:	003f9906 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2084:	383f9226 	beq	r7,zero,1ed0 <__alt_mem_epcs+0xfffe0ed0>
    2088:	10803fcc 	andi	r2,r2,255
    208c:	003f9106 	br	1ed4 <__alt_mem_epcs+0xfffe0ed4>
    2090:	213fffc4 	addi	r4,r4,-1
    2094:	203fbc26 	beq	r4,zero,1f88 <__alt_mem_epcs+0xfffe0f88>
    2098:	00803fc4 	movi	r2,255
    209c:	80bfb21e 	bne	r16,r2,1f68 <__alt_mem_epcs+0xfffe0f68>
    20a0:	003f9106 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    20a4:	383f9026 	beq	r7,zero,1ee8 <__alt_mem_epcs+0xfffe0ee8>
    20a8:	213fffc4 	addi	r4,r4,-1
    20ac:	203fe726 	beq	r4,zero,204c <__alt_mem_epcs+0xfffe104c>
    20b0:	01403fc4 	movi	r5,255
    20b4:	817fdd1e 	bne	r16,r5,202c <__alt_mem_epcs+0xfffe102c>
    20b8:	003f8b06 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    20bc:	2000221e 	bne	r4,zero,2148 <__subsf3+0x2c4>
    20c0:	81000044 	addi	r4,r16,1
    20c4:	21003fcc 	andi	r4,r4,255
    20c8:	01400044 	movi	r5,1
    20cc:	2900470e 	bge	r5,r4,21ec <__subsf3+0x368>
    20d0:	19e5c83a 	sub	r18,r3,r7
    20d4:	9141002c 	andhi	r5,r18,1024
    20d8:	28002d26 	beq	r5,zero,2190 <__subsf3+0x30c>
    20dc:	38e5c83a 	sub	r18,r7,r3
    20e0:	1023883a 	mov	r17,r2
    20e4:	003fae06 	br	1fa0 <__alt_mem_epcs+0xfffe0fa0>
    20e8:	8880004c 	andi	r2,r17,1
    20ec:	043fffc4 	movi	r16,-1
    20f0:	000b883a 	mov	r5,zero
    20f4:	003f8a06 	br	1f20 <__alt_mem_epcs+0xfffe0f20>
    20f8:	00ff0034 	movhi	r3,64512
    20fc:	18ffffc4 	addi	r3,r3,-1
    2100:	80a1c83a 	sub	r16,r16,r2
    2104:	90c6703a 	and	r3,r18,r3
    2108:	003f7706 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    210c:	2000431e 	bne	r4,zero,221c <__subsf3+0x398>
    2110:	81000044 	addi	r4,r16,1
    2114:	21803fcc 	andi	r6,r4,255
    2118:	01400044 	movi	r5,1
    211c:	2980280e 	bge	r5,r6,21c0 <__subsf3+0x33c>
    2120:	01403fc4 	movi	r5,255
    2124:	21402326 	beq	r4,r5,21b4 <__subsf3+0x330>
    2128:	19c7883a 	add	r3,r3,r7
    212c:	1806d07a 	srli	r3,r3,1
    2130:	2021883a 	mov	r16,r4
    2134:	003f6c06 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2138:	1023883a 	mov	r17,r2
    213c:	003fa906 	br	1fe4 <__alt_mem_epcs+0xfffe0fe4>
    2140:	01c00044 	movi	r7,1
    2144:	003f9006 	br	1f88 <__alt_mem_epcs+0xfffe0f88>
    2148:	8000151e 	bne	r16,zero,21a0 <__subsf3+0x31c>
    214c:	18002f26 	beq	r3,zero,220c <__subsf3+0x388>
    2150:	0108303a 	nor	r4,zero,r4
    2154:	20000a26 	beq	r4,zero,2180 <__subsf3+0x2fc>
    2158:	01403fc4 	movi	r5,255
    215c:	31402b26 	beq	r6,r5,220c <__subsf3+0x388>
    2160:	014006c4 	movi	r5,27
    2164:	29006e16 	blt	r5,r4,2320 <__subsf3+0x49c>
    2168:	01400804 	movi	r5,32
    216c:	290bc83a 	sub	r5,r5,r4
    2170:	194a983a 	sll	r5,r3,r5
    2174:	1908d83a 	srl	r4,r3,r4
    2178:	2806c03a 	cmpne	r3,r5,zero
    217c:	20c6b03a 	or	r3,r4,r3
    2180:	38c7c83a 	sub	r3,r7,r3
    2184:	3021883a 	mov	r16,r6
    2188:	1023883a 	mov	r17,r2
    218c:	003f7f06 	br	1f8c <__alt_mem_epcs+0xfffe0f8c>
    2190:	903f831e 	bne	r18,zero,1fa0 <__alt_mem_epcs+0xfffe0fa0>
    2194:	0005883a 	mov	r2,zero
    2198:	0021883a 	mov	r16,zero
    219c:	003f9a06 	br	2008 <__alt_mem_epcs+0xfffe1008>
    21a0:	01403fc4 	movi	r5,255
    21a4:	31401926 	beq	r6,r5,220c <__subsf3+0x388>
    21a8:	0109c83a 	sub	r4,zero,r4
    21ac:	18c10034 	orhi	r3,r3,1024
    21b0:	003feb06 	br	2160 <__alt_mem_epcs+0xfffe1160>
    21b4:	043fffc4 	movi	r16,-1
    21b8:	000b883a 	mov	r5,zero
    21bc:	003f5806 	br	1f20 <__alt_mem_epcs+0xfffe0f20>
    21c0:	8000481e 	bne	r16,zero,22e4 <__subsf3+0x460>
    21c4:	18006226 	beq	r3,zero,2350 <__subsf3+0x4cc>
    21c8:	383f4726 	beq	r7,zero,1ee8 <__alt_mem_epcs+0xfffe0ee8>
    21cc:	19c7883a 	add	r3,r3,r7
    21d0:	1881002c 	andhi	r2,r3,1024
    21d4:	103f8326 	beq	r2,zero,1fe4 <__alt_mem_epcs+0xfffe0fe4>
    21d8:	00bf0034 	movhi	r2,64512
    21dc:	10bfffc4 	addi	r2,r2,-1
    21e0:	2821883a 	mov	r16,r5
    21e4:	1886703a 	and	r3,r3,r2
    21e8:	003f3f06 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    21ec:	80001c1e 	bne	r16,zero,2260 <__subsf3+0x3dc>
    21f0:	1800261e 	bne	r3,zero,228c <__subsf3+0x408>
    21f4:	38004c26 	beq	r7,zero,2328 <__subsf3+0x4a4>
    21f8:	3807883a 	mov	r3,r7
    21fc:	1023883a 	mov	r17,r2
    2200:	003f3906 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2204:	01c00044 	movi	r7,1
    2208:	003f9006 	br	204c <__alt_mem_epcs+0xfffe104c>
    220c:	3807883a 	mov	r3,r7
    2210:	3021883a 	mov	r16,r6
    2214:	1023883a 	mov	r17,r2
    2218:	003f3306 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    221c:	8000161e 	bne	r16,zero,2278 <__subsf3+0x3f4>
    2220:	18002d26 	beq	r3,zero,22d8 <__subsf3+0x454>
    2224:	0108303a 	nor	r4,zero,r4
    2228:	20000a26 	beq	r4,zero,2254 <__subsf3+0x3d0>
    222c:	01403fc4 	movi	r5,255
    2230:	31402926 	beq	r6,r5,22d8 <__subsf3+0x454>
    2234:	014006c4 	movi	r5,27
    2238:	29004716 	blt	r5,r4,2358 <__subsf3+0x4d4>
    223c:	01400804 	movi	r5,32
    2240:	290bc83a 	sub	r5,r5,r4
    2244:	194a983a 	sll	r5,r3,r5
    2248:	1908d83a 	srl	r4,r3,r4
    224c:	2806c03a 	cmpne	r3,r5,zero
    2250:	20c6b03a 	or	r3,r4,r3
    2254:	19c7883a 	add	r3,r3,r7
    2258:	3021883a 	mov	r16,r6
    225c:	003f7c06 	br	2050 <__alt_mem_epcs+0xfffe1050>
    2260:	1800111e 	bne	r3,zero,22a8 <__subsf3+0x424>
    2264:	38003326 	beq	r7,zero,2334 <__subsf3+0x4b0>
    2268:	3807883a 	mov	r3,r7
    226c:	1023883a 	mov	r17,r2
    2270:	04003fc4 	movi	r16,255
    2274:	003f1c06 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2278:	01403fc4 	movi	r5,255
    227c:	31401626 	beq	r6,r5,22d8 <__subsf3+0x454>
    2280:	0109c83a 	sub	r4,zero,r4
    2284:	18c10034 	orhi	r3,r3,1024
    2288:	003fea06 	br	2234 <__alt_mem_epcs+0xfffe1234>
    228c:	383f1626 	beq	r7,zero,1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2290:	19c9c83a 	sub	r4,r3,r7
    2294:	2141002c 	andhi	r5,r4,1024
    2298:	283f5026 	beq	r5,zero,1fdc <__alt_mem_epcs+0xfffe0fdc>
    229c:	38c7c83a 	sub	r3,r7,r3
    22a0:	1023883a 	mov	r17,r2
    22a4:	003f1006 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    22a8:	38001b26 	beq	r7,zero,2318 <__subsf3+0x494>
    22ac:	1806d0fa 	srli	r3,r3,3
    22b0:	1900102c 	andhi	r4,r3,64
    22b4:	20000526 	beq	r4,zero,22cc <__subsf3+0x448>
    22b8:	380ed0fa 	srli	r7,r7,3
    22bc:	3900102c 	andhi	r4,r7,64
    22c0:	2000021e 	bne	r4,zero,22cc <__subsf3+0x448>
    22c4:	3807883a 	mov	r3,r7
    22c8:	1023883a 	mov	r17,r2
    22cc:	180690fa 	slli	r3,r3,3
    22d0:	04003fc4 	movi	r16,255
    22d4:	003f0406 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    22d8:	3807883a 	mov	r3,r7
    22dc:	3021883a 	mov	r16,r6
    22e0:	003f0106 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    22e4:	18001726 	beq	r3,zero,2344 <__subsf3+0x4c0>
    22e8:	38000b26 	beq	r7,zero,2318 <__subsf3+0x494>
    22ec:	1806d0fa 	srli	r3,r3,3
    22f0:	1900102c 	andhi	r4,r3,64
    22f4:	20000426 	beq	r4,zero,2308 <__subsf3+0x484>
    22f8:	380ed0fa 	srli	r7,r7,3
    22fc:	3900102c 	andhi	r4,r7,64
    2300:	2000011e 	bne	r4,zero,2308 <__subsf3+0x484>
    2304:	3807883a 	mov	r3,r7
    2308:	180690fa 	slli	r3,r3,3
    230c:	1023883a 	mov	r17,r2
    2310:	04003fc4 	movi	r16,255
    2314:	003ef406 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2318:	04003fc4 	movi	r16,255
    231c:	003ef206 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2320:	00c00044 	movi	r3,1
    2324:	003f9606 	br	2180 <__alt_mem_epcs+0xfffe1180>
    2328:	000b883a 	mov	r5,zero
    232c:	0005883a 	mov	r2,zero
    2330:	003f3506 	br	2008 <__alt_mem_epcs+0xfffe1008>
    2334:	01402034 	movhi	r5,128
    2338:	297fffc4 	addi	r5,r5,-1
    233c:	0005883a 	mov	r2,zero
    2340:	003f2f06 	br	2000 <__alt_mem_epcs+0xfffe1000>
    2344:	3807883a 	mov	r3,r7
    2348:	04003fc4 	movi	r16,255
    234c:	003ee606 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2350:	3807883a 	mov	r3,r7
    2354:	003ee406 	br	1ee8 <__alt_mem_epcs+0xfffe0ee8>
    2358:	00c00044 	movi	r3,1
    235c:	003fbd06 	br	2254 <__alt_mem_epcs+0xfffe1254>
    2360:	0005883a 	mov	r2,zero
    2364:	003f2806 	br	2008 <__alt_mem_epcs+0xfffe1008>

00002368 <__fixsfsi>:
    2368:	200ad5fa 	srli	r5,r4,23
    236c:	00c02034 	movhi	r3,128
    2370:	18ffffc4 	addi	r3,r3,-1
    2374:	29403fcc 	andi	r5,r5,255
    2378:	00801f84 	movi	r2,126
    237c:	1906703a 	and	r3,r3,r4
    2380:	2008d7fa 	srli	r4,r4,31
    2384:	11400e0e 	bge	r2,r5,23c0 <__fixsfsi+0x58>
    2388:	00802744 	movi	r2,157
    238c:	11400816 	blt	r2,r5,23b0 <__fixsfsi+0x48>
    2390:	00802544 	movi	r2,149
    2394:	18c02034 	orhi	r3,r3,128
    2398:	11400b0e 	bge	r2,r5,23c8 <__fixsfsi+0x60>
    239c:	28bfda84 	addi	r2,r5,-150
    23a0:	1884983a 	sll	r2,r3,r2
    23a4:	20000726 	beq	r4,zero,23c4 <__fixsfsi+0x5c>
    23a8:	0085c83a 	sub	r2,zero,r2
    23ac:	f800283a 	ret
    23b0:	00a00034 	movhi	r2,32768
    23b4:	10bfffc4 	addi	r2,r2,-1
    23b8:	2085883a 	add	r2,r4,r2
    23bc:	f800283a 	ret
    23c0:	0005883a 	mov	r2,zero
    23c4:	f800283a 	ret
    23c8:	00802584 	movi	r2,150
    23cc:	1145c83a 	sub	r2,r2,r5
    23d0:	1884d83a 	srl	r2,r3,r2
    23d4:	003ff306 	br	23a4 <__alt_mem_epcs+0xfffe13a4>

000023d8 <__floatunsisf>:
    23d8:	defffe04 	addi	sp,sp,-8
    23dc:	dfc00115 	stw	ra,4(sp)
    23e0:	dc000015 	stw	r16,0(sp)
    23e4:	20002c26 	beq	r4,zero,2498 <__floatunsisf+0xc0>
    23e8:	2021883a 	mov	r16,r4
    23ec:	00037f00 	call	37f0 <__clzsi2>
    23f0:	00c02784 	movi	r3,158
    23f4:	1887c83a 	sub	r3,r3,r2
    23f8:	01002584 	movi	r4,150
    23fc:	20c00f16 	blt	r4,r3,243c <__floatunsisf+0x64>
    2400:	20c9c83a 	sub	r4,r4,r3
    2404:	8108983a 	sll	r4,r16,r4
    2408:	00802034 	movhi	r2,128
    240c:	10bfffc4 	addi	r2,r2,-1
    2410:	2088703a 	and	r4,r4,r2
    2414:	18803fcc 	andi	r2,r3,255
    2418:	100695fa 	slli	r3,r2,23
    241c:	00802034 	movhi	r2,128
    2420:	10bfffc4 	addi	r2,r2,-1
    2424:	2084703a 	and	r2,r4,r2
    2428:	10c4b03a 	or	r2,r2,r3
    242c:	dfc00117 	ldw	ra,4(sp)
    2430:	dc000017 	ldw	r16,0(sp)
    2434:	dec00204 	addi	sp,sp,8
    2438:	f800283a 	ret
    243c:	01002644 	movi	r4,153
    2440:	20c01816 	blt	r4,r3,24a4 <__floatunsisf+0xcc>
    2444:	20c9c83a 	sub	r4,r4,r3
    2448:	8108983a 	sll	r4,r16,r4
    244c:	017f0034 	movhi	r5,64512
    2450:	297fffc4 	addi	r5,r5,-1
    2454:	218001cc 	andi	r6,r4,7
    2458:	214a703a 	and	r5,r4,r5
    245c:	30000426 	beq	r6,zero,2470 <__floatunsisf+0x98>
    2460:	210003cc 	andi	r4,r4,15
    2464:	01800104 	movi	r6,4
    2468:	21800126 	beq	r4,r6,2470 <__floatunsisf+0x98>
    246c:	298b883a 	add	r5,r5,r6
    2470:	2901002c 	andhi	r4,r5,1024
    2474:	20000526 	beq	r4,zero,248c <__floatunsisf+0xb4>
    2478:	00c027c4 	movi	r3,159
    247c:	1887c83a 	sub	r3,r3,r2
    2480:	00bf0034 	movhi	r2,64512
    2484:	10bfffc4 	addi	r2,r2,-1
    2488:	288a703a 	and	r5,r5,r2
    248c:	280891ba 	slli	r4,r5,6
    2490:	2008d27a 	srli	r4,r4,9
    2494:	003fdf06 	br	2414 <__alt_mem_epcs+0xfffe1414>
    2498:	0007883a 	mov	r3,zero
    249c:	0009883a 	mov	r4,zero
    24a0:	003fdc06 	br	2414 <__alt_mem_epcs+0xfffe1414>
    24a4:	01402e44 	movi	r5,185
    24a8:	28cbc83a 	sub	r5,r5,r3
    24ac:	01000144 	movi	r4,5
    24b0:	2089c83a 	sub	r4,r4,r2
    24b4:	814a983a 	sll	r5,r16,r5
    24b8:	8108d83a 	srl	r4,r16,r4
    24bc:	2820c03a 	cmpne	r16,r5,zero
    24c0:	2408b03a 	or	r4,r4,r16
    24c4:	003fe106 	br	244c <__alt_mem_epcs+0xfffe144c>

000024c8 <__gedf2>:
    24c8:	2804d53a 	srli	r2,r5,20
    24cc:	3806d53a 	srli	r3,r7,20
    24d0:	02000434 	movhi	r8,16
    24d4:	423fffc4 	addi	r8,r8,-1
    24d8:	1081ffcc 	andi	r2,r2,2047
    24dc:	0241ffc4 	movi	r9,2047
    24e0:	2a14703a 	and	r10,r5,r8
    24e4:	18c1ffcc 	andi	r3,r3,2047
    24e8:	3a10703a 	and	r8,r7,r8
    24ec:	280ad7fa 	srli	r5,r5,31
    24f0:	380ed7fa 	srli	r7,r7,31
    24f4:	12401d26 	beq	r2,r9,256c <__gedf2+0xa4>
    24f8:	0241ffc4 	movi	r9,2047
    24fc:	1a401226 	beq	r3,r9,2548 <__gedf2+0x80>
    2500:	1000081e 	bne	r2,zero,2524 <__gedf2+0x5c>
    2504:	2296b03a 	or	r11,r4,r10
    2508:	5813003a 	cmpeq	r9,r11,zero
    250c:	1800091e 	bne	r3,zero,2534 <__gedf2+0x6c>
    2510:	3218b03a 	or	r12,r6,r8
    2514:	6000071e 	bne	r12,zero,2534 <__gedf2+0x6c>
    2518:	0005883a 	mov	r2,zero
    251c:	5800101e 	bne	r11,zero,2560 <__gedf2+0x98>
    2520:	f800283a 	ret
    2524:	18000c1e 	bne	r3,zero,2558 <__gedf2+0x90>
    2528:	3212b03a 	or	r9,r6,r8
    252c:	48000c26 	beq	r9,zero,2560 <__gedf2+0x98>
    2530:	0013883a 	mov	r9,zero
    2534:	39c03fcc 	andi	r7,r7,255
    2538:	48000826 	beq	r9,zero,255c <__gedf2+0x94>
    253c:	38000926 	beq	r7,zero,2564 <__gedf2+0x9c>
    2540:	00800044 	movi	r2,1
    2544:	f800283a 	ret
    2548:	3212b03a 	or	r9,r6,r8
    254c:	483fec26 	beq	r9,zero,2500 <__alt_mem_epcs+0xfffe1500>
    2550:	00bfff84 	movi	r2,-2
    2554:	f800283a 	ret
    2558:	39c03fcc 	andi	r7,r7,255
    255c:	29c00626 	beq	r5,r7,2578 <__gedf2+0xb0>
    2560:	283ff726 	beq	r5,zero,2540 <__alt_mem_epcs+0xfffe1540>
    2564:	00bfffc4 	movi	r2,-1
    2568:	f800283a 	ret
    256c:	2292b03a 	or	r9,r4,r10
    2570:	483fe126 	beq	r9,zero,24f8 <__alt_mem_epcs+0xfffe14f8>
    2574:	003ff606 	br	2550 <__alt_mem_epcs+0xfffe1550>
    2578:	18bff916 	blt	r3,r2,2560 <__alt_mem_epcs+0xfffe1560>
    257c:	10c00316 	blt	r2,r3,258c <__gedf2+0xc4>
    2580:	42bff736 	bltu	r8,r10,2560 <__alt_mem_epcs+0xfffe1560>
    2584:	52000326 	beq	r10,r8,2594 <__gedf2+0xcc>
    2588:	5200042e 	bgeu	r10,r8,259c <__gedf2+0xd4>
    258c:	283fec1e 	bne	r5,zero,2540 <__alt_mem_epcs+0xfffe1540>
    2590:	003ff406 	br	2564 <__alt_mem_epcs+0xfffe1564>
    2594:	313ff236 	bltu	r6,r4,2560 <__alt_mem_epcs+0xfffe1560>
    2598:	21bffc36 	bltu	r4,r6,258c <__alt_mem_epcs+0xfffe158c>
    259c:	0005883a 	mov	r2,zero
    25a0:	f800283a 	ret

000025a4 <__muldf3>:
    25a4:	defff304 	addi	sp,sp,-52
    25a8:	2804d53a 	srli	r2,r5,20
    25ac:	dd800915 	stw	r22,36(sp)
    25b0:	282cd7fa 	srli	r22,r5,31
    25b4:	dc000315 	stw	r16,12(sp)
    25b8:	04000434 	movhi	r16,16
    25bc:	dd400815 	stw	r21,32(sp)
    25c0:	dc800515 	stw	r18,20(sp)
    25c4:	843fffc4 	addi	r16,r16,-1
    25c8:	dfc00c15 	stw	ra,48(sp)
    25cc:	df000b15 	stw	fp,44(sp)
    25d0:	ddc00a15 	stw	r23,40(sp)
    25d4:	dd000715 	stw	r20,28(sp)
    25d8:	dcc00615 	stw	r19,24(sp)
    25dc:	dc400415 	stw	r17,16(sp)
    25e0:	1481ffcc 	andi	r18,r2,2047
    25e4:	2c20703a 	and	r16,r5,r16
    25e8:	b02b883a 	mov	r21,r22
    25ec:	b2403fcc 	andi	r9,r22,255
    25f0:	90006026 	beq	r18,zero,2774 <__muldf3+0x1d0>
    25f4:	0081ffc4 	movi	r2,2047
    25f8:	2029883a 	mov	r20,r4
    25fc:	90803626 	beq	r18,r2,26d8 <__muldf3+0x134>
    2600:	80800434 	orhi	r2,r16,16
    2604:	100490fa 	slli	r2,r2,3
    2608:	2020d77a 	srli	r16,r4,29
    260c:	202890fa 	slli	r20,r4,3
    2610:	94bf0044 	addi	r18,r18,-1023
    2614:	80a0b03a 	or	r16,r16,r2
    2618:	0027883a 	mov	r19,zero
    261c:	0039883a 	mov	fp,zero
    2620:	3804d53a 	srli	r2,r7,20
    2624:	382ed7fa 	srli	r23,r7,31
    2628:	04400434 	movhi	r17,16
    262c:	8c7fffc4 	addi	r17,r17,-1
    2630:	1081ffcc 	andi	r2,r2,2047
    2634:	3011883a 	mov	r8,r6
    2638:	3c62703a 	and	r17,r7,r17
    263c:	ba803fcc 	andi	r10,r23,255
    2640:	10006d26 	beq	r2,zero,27f8 <__muldf3+0x254>
    2644:	00c1ffc4 	movi	r3,2047
    2648:	10c06526 	beq	r2,r3,27e0 <__muldf3+0x23c>
    264c:	88c00434 	orhi	r3,r17,16
    2650:	180690fa 	slli	r3,r3,3
    2654:	3022d77a 	srli	r17,r6,29
    2658:	301090fa 	slli	r8,r6,3
    265c:	10bf0044 	addi	r2,r2,-1023
    2660:	88e2b03a 	or	r17,r17,r3
    2664:	000b883a 	mov	r5,zero
    2668:	9085883a 	add	r2,r18,r2
    266c:	2cc8b03a 	or	r4,r5,r19
    2670:	00c003c4 	movi	r3,15
    2674:	bdacf03a 	xor	r22,r23,r22
    2678:	12c00044 	addi	r11,r2,1
    267c:	19009936 	bltu	r3,r4,28e4 <__muldf3+0x340>
    2680:	200890ba 	slli	r4,r4,2
    2684:	00c00034 	movhi	r3,0
    2688:	18c9a604 	addi	r3,r3,9880
    268c:	20c9883a 	add	r4,r4,r3
    2690:	20c00017 	ldw	r3,0(r4)
    2694:	1800683a 	jmp	r3
    2698:	000028e4 	muli	zero,zero,163
    269c:	000026f8 	rdprs	zero,zero,155
    26a0:	000026f8 	rdprs	zero,zero,155
    26a4:	000026f4 	movhi	zero,155
    26a8:	000028c0 	call	28c <ExpandKey+0x68>
    26ac:	000028c0 	call	28c <ExpandKey+0x68>
    26b0:	000028a8 	cmpgeui	zero,zero,162
    26b4:	000026f4 	movhi	zero,155
    26b8:	000028c0 	call	28c <ExpandKey+0x68>
    26bc:	000028a8 	cmpgeui	zero,zero,162
    26c0:	000028c0 	call	28c <ExpandKey+0x68>
    26c4:	000026f4 	movhi	zero,155
    26c8:	000028d0 	cmplti	zero,zero,163
    26cc:	000028d0 	cmplti	zero,zero,163
    26d0:	000028d0 	cmplti	zero,zero,163
    26d4:	00002aec 	andhi	zero,zero,171
    26d8:	2404b03a 	or	r2,r4,r16
    26dc:	10006f1e 	bne	r2,zero,289c <__muldf3+0x2f8>
    26e0:	04c00204 	movi	r19,8
    26e4:	0021883a 	mov	r16,zero
    26e8:	0029883a 	mov	r20,zero
    26ec:	07000084 	movi	fp,2
    26f0:	003fcb06 	br	2620 <__alt_mem_epcs+0xfffe1620>
    26f4:	502d883a 	mov	r22,r10
    26f8:	00800084 	movi	r2,2
    26fc:	28805726 	beq	r5,r2,285c <__muldf3+0x2b8>
    2700:	008000c4 	movi	r2,3
    2704:	28816626 	beq	r5,r2,2ca0 <__muldf3+0x6fc>
    2708:	00800044 	movi	r2,1
    270c:	2881411e 	bne	r5,r2,2c14 <__muldf3+0x670>
    2710:	b02b883a 	mov	r21,r22
    2714:	0005883a 	mov	r2,zero
    2718:	000b883a 	mov	r5,zero
    271c:	0029883a 	mov	r20,zero
    2720:	1004953a 	slli	r2,r2,20
    2724:	a8c03fcc 	andi	r3,r21,255
    2728:	04400434 	movhi	r17,16
    272c:	8c7fffc4 	addi	r17,r17,-1
    2730:	180697fa 	slli	r3,r3,31
    2734:	2c4a703a 	and	r5,r5,r17
    2738:	288ab03a 	or	r5,r5,r2
    273c:	28c6b03a 	or	r3,r5,r3
    2740:	a005883a 	mov	r2,r20
    2744:	dfc00c17 	ldw	ra,48(sp)
    2748:	df000b17 	ldw	fp,44(sp)
    274c:	ddc00a17 	ldw	r23,40(sp)
    2750:	dd800917 	ldw	r22,36(sp)
    2754:	dd400817 	ldw	r21,32(sp)
    2758:	dd000717 	ldw	r20,28(sp)
    275c:	dcc00617 	ldw	r19,24(sp)
    2760:	dc800517 	ldw	r18,20(sp)
    2764:	dc400417 	ldw	r17,16(sp)
    2768:	dc000317 	ldw	r16,12(sp)
    276c:	dec00d04 	addi	sp,sp,52
    2770:	f800283a 	ret
    2774:	2404b03a 	or	r2,r4,r16
    2778:	2027883a 	mov	r19,r4
    277c:	10004226 	beq	r2,zero,2888 <__muldf3+0x2e4>
    2780:	8000fc26 	beq	r16,zero,2b74 <__muldf3+0x5d0>
    2784:	8009883a 	mov	r4,r16
    2788:	d9800215 	stw	r6,8(sp)
    278c:	d9c00015 	stw	r7,0(sp)
    2790:	da400115 	stw	r9,4(sp)
    2794:	00037f00 	call	37f0 <__clzsi2>
    2798:	d9800217 	ldw	r6,8(sp)
    279c:	d9c00017 	ldw	r7,0(sp)
    27a0:	da400117 	ldw	r9,4(sp)
    27a4:	113ffd44 	addi	r4,r2,-11
    27a8:	00c00704 	movi	r3,28
    27ac:	1900ed16 	blt	r3,r4,2b64 <__muldf3+0x5c0>
    27b0:	00c00744 	movi	r3,29
    27b4:	147ffe04 	addi	r17,r2,-8
    27b8:	1907c83a 	sub	r3,r3,r4
    27bc:	8460983a 	sll	r16,r16,r17
    27c0:	98c6d83a 	srl	r3,r19,r3
    27c4:	9c68983a 	sll	r20,r19,r17
    27c8:	1c20b03a 	or	r16,r3,r16
    27cc:	1080fcc4 	addi	r2,r2,1011
    27d0:	00a5c83a 	sub	r18,zero,r2
    27d4:	0027883a 	mov	r19,zero
    27d8:	0039883a 	mov	fp,zero
    27dc:	003f9006 	br	2620 <__alt_mem_epcs+0xfffe1620>
    27e0:	3446b03a 	or	r3,r6,r17
    27e4:	1800261e 	bne	r3,zero,2880 <__muldf3+0x2dc>
    27e8:	0023883a 	mov	r17,zero
    27ec:	0011883a 	mov	r8,zero
    27f0:	01400084 	movi	r5,2
    27f4:	003f9c06 	br	2668 <__alt_mem_epcs+0xfffe1668>
    27f8:	3446b03a 	or	r3,r6,r17
    27fc:	18001c26 	beq	r3,zero,2870 <__muldf3+0x2cc>
    2800:	8800ce26 	beq	r17,zero,2b3c <__muldf3+0x598>
    2804:	8809883a 	mov	r4,r17
    2808:	d9800215 	stw	r6,8(sp)
    280c:	da400115 	stw	r9,4(sp)
    2810:	da800015 	stw	r10,0(sp)
    2814:	00037f00 	call	37f0 <__clzsi2>
    2818:	d9800217 	ldw	r6,8(sp)
    281c:	da400117 	ldw	r9,4(sp)
    2820:	da800017 	ldw	r10,0(sp)
    2824:	113ffd44 	addi	r4,r2,-11
    2828:	00c00704 	movi	r3,28
    282c:	1900bf16 	blt	r3,r4,2b2c <__muldf3+0x588>
    2830:	00c00744 	movi	r3,29
    2834:	123ffe04 	addi	r8,r2,-8
    2838:	1907c83a 	sub	r3,r3,r4
    283c:	8a22983a 	sll	r17,r17,r8
    2840:	30c6d83a 	srl	r3,r6,r3
    2844:	3210983a 	sll	r8,r6,r8
    2848:	1c62b03a 	or	r17,r3,r17
    284c:	1080fcc4 	addi	r2,r2,1011
    2850:	0085c83a 	sub	r2,zero,r2
    2854:	000b883a 	mov	r5,zero
    2858:	003f8306 	br	2668 <__alt_mem_epcs+0xfffe1668>
    285c:	b02b883a 	mov	r21,r22
    2860:	0081ffc4 	movi	r2,2047
    2864:	000b883a 	mov	r5,zero
    2868:	0029883a 	mov	r20,zero
    286c:	003fac06 	br	2720 <__alt_mem_epcs+0xfffe1720>
    2870:	0023883a 	mov	r17,zero
    2874:	0011883a 	mov	r8,zero
    2878:	01400044 	movi	r5,1
    287c:	003f7a06 	br	2668 <__alt_mem_epcs+0xfffe1668>
    2880:	014000c4 	movi	r5,3
    2884:	003f7806 	br	2668 <__alt_mem_epcs+0xfffe1668>
    2888:	04c00104 	movi	r19,4
    288c:	0021883a 	mov	r16,zero
    2890:	0029883a 	mov	r20,zero
    2894:	07000044 	movi	fp,1
    2898:	003f6106 	br	2620 <__alt_mem_epcs+0xfffe1620>
    289c:	04c00304 	movi	r19,12
    28a0:	070000c4 	movi	fp,3
    28a4:	003f5e06 	br	2620 <__alt_mem_epcs+0xfffe1620>
    28a8:	01400434 	movhi	r5,16
    28ac:	002b883a 	mov	r21,zero
    28b0:	297fffc4 	addi	r5,r5,-1
    28b4:	053fffc4 	movi	r20,-1
    28b8:	0081ffc4 	movi	r2,2047
    28bc:	003f9806 	br	2720 <__alt_mem_epcs+0xfffe1720>
    28c0:	8023883a 	mov	r17,r16
    28c4:	a011883a 	mov	r8,r20
    28c8:	e00b883a 	mov	r5,fp
    28cc:	003f8a06 	br	26f8 <__alt_mem_epcs+0xfffe16f8>
    28d0:	8023883a 	mov	r17,r16
    28d4:	a011883a 	mov	r8,r20
    28d8:	482d883a 	mov	r22,r9
    28dc:	e00b883a 	mov	r5,fp
    28e0:	003f8506 	br	26f8 <__alt_mem_epcs+0xfffe16f8>
    28e4:	a00ad43a 	srli	r5,r20,16
    28e8:	401ad43a 	srli	r13,r8,16
    28ec:	a53fffcc 	andi	r20,r20,65535
    28f0:	423fffcc 	andi	r8,r8,65535
    28f4:	4519383a 	mul	r12,r8,r20
    28f8:	4147383a 	mul	r3,r8,r5
    28fc:	6d09383a 	mul	r4,r13,r20
    2900:	600cd43a 	srli	r6,r12,16
    2904:	2b5d383a 	mul	r14,r5,r13
    2908:	20c9883a 	add	r4,r4,r3
    290c:	310d883a 	add	r6,r6,r4
    2910:	30c0022e 	bgeu	r6,r3,291c <__muldf3+0x378>
    2914:	00c00074 	movhi	r3,1
    2918:	70dd883a 	add	r14,r14,r3
    291c:	8826d43a 	srli	r19,r17,16
    2920:	8bffffcc 	andi	r15,r17,65535
    2924:	7d23383a 	mul	r17,r15,r20
    2928:	7949383a 	mul	r4,r15,r5
    292c:	9d29383a 	mul	r20,r19,r20
    2930:	8814d43a 	srli	r10,r17,16
    2934:	3012943a 	slli	r9,r6,16
    2938:	a129883a 	add	r20,r20,r4
    293c:	633fffcc 	andi	r12,r12,65535
    2940:	5515883a 	add	r10,r10,r20
    2944:	3006d43a 	srli	r3,r6,16
    2948:	4b13883a 	add	r9,r9,r12
    294c:	2ccb383a 	mul	r5,r5,r19
    2950:	5100022e 	bgeu	r10,r4,295c <__muldf3+0x3b8>
    2954:	01000074 	movhi	r4,1
    2958:	290b883a 	add	r5,r5,r4
    295c:	802ad43a 	srli	r21,r16,16
    2960:	843fffcc 	andi	r16,r16,65535
    2964:	440d383a 	mul	r6,r8,r16
    2968:	4565383a 	mul	r18,r8,r21
    296c:	8349383a 	mul	r4,r16,r13
    2970:	500e943a 	slli	r7,r10,16
    2974:	3010d43a 	srli	r8,r6,16
    2978:	5028d43a 	srli	r20,r10,16
    297c:	2489883a 	add	r4,r4,r18
    2980:	8abfffcc 	andi	r10,r17,65535
    2984:	3a95883a 	add	r10,r7,r10
    2988:	4119883a 	add	r12,r8,r4
    298c:	a169883a 	add	r20,r20,r5
    2990:	1a87883a 	add	r3,r3,r10
    2994:	6d5b383a 	mul	r13,r13,r21
    2998:	6480022e 	bgeu	r12,r18,29a4 <__muldf3+0x400>
    299c:	01000074 	movhi	r4,1
    29a0:	691b883a 	add	r13,r13,r4
    29a4:	7c25383a 	mul	r18,r15,r16
    29a8:	7d4b383a 	mul	r5,r15,r21
    29ac:	84cf383a 	mul	r7,r16,r19
    29b0:	901ed43a 	srli	r15,r18,16
    29b4:	6008d43a 	srli	r4,r12,16
    29b8:	6010943a 	slli	r8,r12,16
    29bc:	394f883a 	add	r7,r7,r5
    29c0:	333fffcc 	andi	r12,r6,65535
    29c4:	79df883a 	add	r15,r15,r7
    29c8:	235b883a 	add	r13,r4,r13
    29cc:	9d63383a 	mul	r17,r19,r21
    29d0:	4309883a 	add	r4,r8,r12
    29d4:	7940022e 	bgeu	r15,r5,29e0 <__muldf3+0x43c>
    29d8:	01400074 	movhi	r5,1
    29dc:	8963883a 	add	r17,r17,r5
    29e0:	780a943a 	slli	r5,r15,16
    29e4:	91bfffcc 	andi	r6,r18,65535
    29e8:	70c7883a 	add	r3,r14,r3
    29ec:	298d883a 	add	r6,r5,r6
    29f0:	1a8f803a 	cmpltu	r7,r3,r10
    29f4:	350b883a 	add	r5,r6,r20
    29f8:	20c7883a 	add	r3,r4,r3
    29fc:	3955883a 	add	r10,r7,r5
    2a00:	1909803a 	cmpltu	r4,r3,r4
    2a04:	6a91883a 	add	r8,r13,r10
    2a08:	780cd43a 	srli	r6,r15,16
    2a0c:	2219883a 	add	r12,r4,r8
    2a10:	2d0b803a 	cmpltu	r5,r5,r20
    2a14:	51cf803a 	cmpltu	r7,r10,r7
    2a18:	29ceb03a 	or	r7,r5,r7
    2a1c:	4351803a 	cmpltu	r8,r8,r13
    2a20:	610b803a 	cmpltu	r5,r12,r4
    2a24:	4148b03a 	or	r4,r8,r5
    2a28:	398f883a 	add	r7,r7,r6
    2a2c:	3909883a 	add	r4,r7,r4
    2a30:	1810927a 	slli	r8,r3,9
    2a34:	2449883a 	add	r4,r4,r17
    2a38:	2008927a 	slli	r4,r4,9
    2a3c:	6022d5fa 	srli	r17,r12,23
    2a40:	1806d5fa 	srli	r3,r3,23
    2a44:	4252b03a 	or	r9,r8,r9
    2a48:	600a927a 	slli	r5,r12,9
    2a4c:	4810c03a 	cmpne	r8,r9,zero
    2a50:	2462b03a 	or	r17,r4,r17
    2a54:	40c6b03a 	or	r3,r8,r3
    2a58:	8900402c 	andhi	r4,r17,256
    2a5c:	1950b03a 	or	r8,r3,r5
    2a60:	20000726 	beq	r4,zero,2a80 <__muldf3+0x4dc>
    2a64:	4006d07a 	srli	r3,r8,1
    2a68:	880497fa 	slli	r2,r17,31
    2a6c:	4200004c 	andi	r8,r8,1
    2a70:	8822d07a 	srli	r17,r17,1
    2a74:	1a10b03a 	or	r8,r3,r8
    2a78:	1210b03a 	or	r8,r2,r8
    2a7c:	5805883a 	mov	r2,r11
    2a80:	1140ffc4 	addi	r5,r2,1023
    2a84:	0140440e 	bge	zero,r5,2b98 <__muldf3+0x5f4>
    2a88:	40c001cc 	andi	r3,r8,7
    2a8c:	18000726 	beq	r3,zero,2aac <__muldf3+0x508>
    2a90:	40c003cc 	andi	r3,r8,15
    2a94:	01000104 	movi	r4,4
    2a98:	19000426 	beq	r3,r4,2aac <__muldf3+0x508>
    2a9c:	4107883a 	add	r3,r8,r4
    2aa0:	1a11803a 	cmpltu	r8,r3,r8
    2aa4:	8a23883a 	add	r17,r17,r8
    2aa8:	1811883a 	mov	r8,r3
    2aac:	88c0402c 	andhi	r3,r17,256
    2ab0:	18000426 	beq	r3,zero,2ac4 <__muldf3+0x520>
    2ab4:	11410004 	addi	r5,r2,1024
    2ab8:	00bfc034 	movhi	r2,65280
    2abc:	10bfffc4 	addi	r2,r2,-1
    2ac0:	88a2703a 	and	r17,r17,r2
    2ac4:	0081ff84 	movi	r2,2046
    2ac8:	117f6416 	blt	r2,r5,285c <__alt_mem_epcs+0xfffe185c>
    2acc:	8828977a 	slli	r20,r17,29
    2ad0:	4010d0fa 	srli	r8,r8,3
    2ad4:	8822927a 	slli	r17,r17,9
    2ad8:	2881ffcc 	andi	r2,r5,2047
    2adc:	a228b03a 	or	r20,r20,r8
    2ae0:	880ad33a 	srli	r5,r17,12
    2ae4:	b02b883a 	mov	r21,r22
    2ae8:	003f0d06 	br	2720 <__alt_mem_epcs+0xfffe1720>
    2aec:	8080022c 	andhi	r2,r16,8
    2af0:	10000926 	beq	r2,zero,2b18 <__muldf3+0x574>
    2af4:	8880022c 	andhi	r2,r17,8
    2af8:	1000071e 	bne	r2,zero,2b18 <__muldf3+0x574>
    2afc:	00800434 	movhi	r2,16
    2b00:	89400234 	orhi	r5,r17,8
    2b04:	10bfffc4 	addi	r2,r2,-1
    2b08:	b82b883a 	mov	r21,r23
    2b0c:	288a703a 	and	r5,r5,r2
    2b10:	4029883a 	mov	r20,r8
    2b14:	003f6806 	br	28b8 <__alt_mem_epcs+0xfffe18b8>
    2b18:	00800434 	movhi	r2,16
    2b1c:	81400234 	orhi	r5,r16,8
    2b20:	10bfffc4 	addi	r2,r2,-1
    2b24:	288a703a 	and	r5,r5,r2
    2b28:	003f6306 	br	28b8 <__alt_mem_epcs+0xfffe18b8>
    2b2c:	147ff604 	addi	r17,r2,-40
    2b30:	3462983a 	sll	r17,r6,r17
    2b34:	0011883a 	mov	r8,zero
    2b38:	003f4406 	br	284c <__alt_mem_epcs+0xfffe184c>
    2b3c:	3009883a 	mov	r4,r6
    2b40:	d9800215 	stw	r6,8(sp)
    2b44:	da400115 	stw	r9,4(sp)
    2b48:	da800015 	stw	r10,0(sp)
    2b4c:	00037f00 	call	37f0 <__clzsi2>
    2b50:	10800804 	addi	r2,r2,32
    2b54:	da800017 	ldw	r10,0(sp)
    2b58:	da400117 	ldw	r9,4(sp)
    2b5c:	d9800217 	ldw	r6,8(sp)
    2b60:	003f3006 	br	2824 <__alt_mem_epcs+0xfffe1824>
    2b64:	143ff604 	addi	r16,r2,-40
    2b68:	9c20983a 	sll	r16,r19,r16
    2b6c:	0029883a 	mov	r20,zero
    2b70:	003f1606 	br	27cc <__alt_mem_epcs+0xfffe17cc>
    2b74:	d9800215 	stw	r6,8(sp)
    2b78:	d9c00015 	stw	r7,0(sp)
    2b7c:	da400115 	stw	r9,4(sp)
    2b80:	00037f00 	call	37f0 <__clzsi2>
    2b84:	10800804 	addi	r2,r2,32
    2b88:	da400117 	ldw	r9,4(sp)
    2b8c:	d9c00017 	ldw	r7,0(sp)
    2b90:	d9800217 	ldw	r6,8(sp)
    2b94:	003f0306 	br	27a4 <__alt_mem_epcs+0xfffe17a4>
    2b98:	00c00044 	movi	r3,1
    2b9c:	1947c83a 	sub	r3,r3,r5
    2ba0:	00800e04 	movi	r2,56
    2ba4:	10feda16 	blt	r2,r3,2710 <__alt_mem_epcs+0xfffe1710>
    2ba8:	008007c4 	movi	r2,31
    2bac:	10c01b16 	blt	r2,r3,2c1c <__muldf3+0x678>
    2bb0:	00800804 	movi	r2,32
    2bb4:	10c5c83a 	sub	r2,r2,r3
    2bb8:	888a983a 	sll	r5,r17,r2
    2bbc:	40c8d83a 	srl	r4,r8,r3
    2bc0:	4084983a 	sll	r2,r8,r2
    2bc4:	88e2d83a 	srl	r17,r17,r3
    2bc8:	2906b03a 	or	r3,r5,r4
    2bcc:	1004c03a 	cmpne	r2,r2,zero
    2bd0:	1886b03a 	or	r3,r3,r2
    2bd4:	188001cc 	andi	r2,r3,7
    2bd8:	10000726 	beq	r2,zero,2bf8 <__muldf3+0x654>
    2bdc:	188003cc 	andi	r2,r3,15
    2be0:	01000104 	movi	r4,4
    2be4:	11000426 	beq	r2,r4,2bf8 <__muldf3+0x654>
    2be8:	1805883a 	mov	r2,r3
    2bec:	10c00104 	addi	r3,r2,4
    2bf0:	1885803a 	cmpltu	r2,r3,r2
    2bf4:	88a3883a 	add	r17,r17,r2
    2bf8:	8880202c 	andhi	r2,r17,128
    2bfc:	10001c26 	beq	r2,zero,2c70 <__muldf3+0x6cc>
    2c00:	b02b883a 	mov	r21,r22
    2c04:	00800044 	movi	r2,1
    2c08:	000b883a 	mov	r5,zero
    2c0c:	0029883a 	mov	r20,zero
    2c10:	003ec306 	br	2720 <__alt_mem_epcs+0xfffe1720>
    2c14:	5805883a 	mov	r2,r11
    2c18:	003f9906 	br	2a80 <__alt_mem_epcs+0xfffe1a80>
    2c1c:	00bff844 	movi	r2,-31
    2c20:	1145c83a 	sub	r2,r2,r5
    2c24:	8888d83a 	srl	r4,r17,r2
    2c28:	00800804 	movi	r2,32
    2c2c:	18801a26 	beq	r3,r2,2c98 <__muldf3+0x6f4>
    2c30:	00801004 	movi	r2,64
    2c34:	10c5c83a 	sub	r2,r2,r3
    2c38:	8884983a 	sll	r2,r17,r2
    2c3c:	1204b03a 	or	r2,r2,r8
    2c40:	1004c03a 	cmpne	r2,r2,zero
    2c44:	2084b03a 	or	r2,r4,r2
    2c48:	144001cc 	andi	r17,r2,7
    2c4c:	88000d1e 	bne	r17,zero,2c84 <__muldf3+0x6e0>
    2c50:	000b883a 	mov	r5,zero
    2c54:	1028d0fa 	srli	r20,r2,3
    2c58:	b02b883a 	mov	r21,r22
    2c5c:	0005883a 	mov	r2,zero
    2c60:	a468b03a 	or	r20,r20,r17
    2c64:	003eae06 	br	2720 <__alt_mem_epcs+0xfffe1720>
    2c68:	1007883a 	mov	r3,r2
    2c6c:	0023883a 	mov	r17,zero
    2c70:	880a927a 	slli	r5,r17,9
    2c74:	1805883a 	mov	r2,r3
    2c78:	8822977a 	slli	r17,r17,29
    2c7c:	280ad33a 	srli	r5,r5,12
    2c80:	003ff406 	br	2c54 <__alt_mem_epcs+0xfffe1c54>
    2c84:	10c003cc 	andi	r3,r2,15
    2c88:	01000104 	movi	r4,4
    2c8c:	193ff626 	beq	r3,r4,2c68 <__alt_mem_epcs+0xfffe1c68>
    2c90:	0023883a 	mov	r17,zero
    2c94:	003fd506 	br	2bec <__alt_mem_epcs+0xfffe1bec>
    2c98:	0005883a 	mov	r2,zero
    2c9c:	003fe706 	br	2c3c <__alt_mem_epcs+0xfffe1c3c>
    2ca0:	00800434 	movhi	r2,16
    2ca4:	89400234 	orhi	r5,r17,8
    2ca8:	10bfffc4 	addi	r2,r2,-1
    2cac:	b02b883a 	mov	r21,r22
    2cb0:	288a703a 	and	r5,r5,r2
    2cb4:	4029883a 	mov	r20,r8
    2cb8:	003eff06 	br	28b8 <__alt_mem_epcs+0xfffe18b8>

00002cbc <__subdf3>:
    2cbc:	02000434 	movhi	r8,16
    2cc0:	423fffc4 	addi	r8,r8,-1
    2cc4:	defffb04 	addi	sp,sp,-20
    2cc8:	2a14703a 	and	r10,r5,r8
    2ccc:	3812d53a 	srli	r9,r7,20
    2cd0:	3a10703a 	and	r8,r7,r8
    2cd4:	2006d77a 	srli	r3,r4,29
    2cd8:	3004d77a 	srli	r2,r6,29
    2cdc:	dc000015 	stw	r16,0(sp)
    2ce0:	501490fa 	slli	r10,r10,3
    2ce4:	2820d53a 	srli	r16,r5,20
    2ce8:	401090fa 	slli	r8,r8,3
    2cec:	dc800215 	stw	r18,8(sp)
    2cf0:	dc400115 	stw	r17,4(sp)
    2cf4:	dfc00415 	stw	ra,16(sp)
    2cf8:	202290fa 	slli	r17,r4,3
    2cfc:	dcc00315 	stw	r19,12(sp)
    2d00:	4a41ffcc 	andi	r9,r9,2047
    2d04:	0101ffc4 	movi	r4,2047
    2d08:	2824d7fa 	srli	r18,r5,31
    2d0c:	8401ffcc 	andi	r16,r16,2047
    2d10:	50c6b03a 	or	r3,r10,r3
    2d14:	380ed7fa 	srli	r7,r7,31
    2d18:	408ab03a 	or	r5,r8,r2
    2d1c:	300c90fa 	slli	r6,r6,3
    2d20:	49009626 	beq	r9,r4,2f7c <__subdf3+0x2c0>
    2d24:	39c0005c 	xori	r7,r7,1
    2d28:	8245c83a 	sub	r2,r16,r9
    2d2c:	3c807426 	beq	r7,r18,2f00 <__subdf3+0x244>
    2d30:	0080af0e 	bge	zero,r2,2ff0 <__subdf3+0x334>
    2d34:	48002a1e 	bne	r9,zero,2de0 <__subdf3+0x124>
    2d38:	2988b03a 	or	r4,r5,r6
    2d3c:	20009a1e 	bne	r4,zero,2fa8 <__subdf3+0x2ec>
    2d40:	888001cc 	andi	r2,r17,7
    2d44:	10000726 	beq	r2,zero,2d64 <__subdf3+0xa8>
    2d48:	888003cc 	andi	r2,r17,15
    2d4c:	01000104 	movi	r4,4
    2d50:	11000426 	beq	r2,r4,2d64 <__subdf3+0xa8>
    2d54:	890b883a 	add	r5,r17,r4
    2d58:	2c63803a 	cmpltu	r17,r5,r17
    2d5c:	1c47883a 	add	r3,r3,r17
    2d60:	2823883a 	mov	r17,r5
    2d64:	1880202c 	andhi	r2,r3,128
    2d68:	10005926 	beq	r2,zero,2ed0 <__subdf3+0x214>
    2d6c:	84000044 	addi	r16,r16,1
    2d70:	0081ffc4 	movi	r2,2047
    2d74:	8080be26 	beq	r16,r2,3070 <__subdf3+0x3b4>
    2d78:	017fe034 	movhi	r5,65408
    2d7c:	297fffc4 	addi	r5,r5,-1
    2d80:	1946703a 	and	r3,r3,r5
    2d84:	1804977a 	slli	r2,r3,29
    2d88:	1806927a 	slli	r3,r3,9
    2d8c:	8822d0fa 	srli	r17,r17,3
    2d90:	8401ffcc 	andi	r16,r16,2047
    2d94:	180ad33a 	srli	r5,r3,12
    2d98:	9100004c 	andi	r4,r18,1
    2d9c:	1444b03a 	or	r2,r2,r17
    2da0:	80c1ffcc 	andi	r3,r16,2047
    2da4:	1820953a 	slli	r16,r3,20
    2da8:	20c03fcc 	andi	r3,r4,255
    2dac:	180897fa 	slli	r4,r3,31
    2db0:	00c00434 	movhi	r3,16
    2db4:	18ffffc4 	addi	r3,r3,-1
    2db8:	28c6703a 	and	r3,r5,r3
    2dbc:	1c06b03a 	or	r3,r3,r16
    2dc0:	1906b03a 	or	r3,r3,r4
    2dc4:	dfc00417 	ldw	ra,16(sp)
    2dc8:	dcc00317 	ldw	r19,12(sp)
    2dcc:	dc800217 	ldw	r18,8(sp)
    2dd0:	dc400117 	ldw	r17,4(sp)
    2dd4:	dc000017 	ldw	r16,0(sp)
    2dd8:	dec00504 	addi	sp,sp,20
    2ddc:	f800283a 	ret
    2de0:	0101ffc4 	movi	r4,2047
    2de4:	813fd626 	beq	r16,r4,2d40 <__alt_mem_epcs+0xfffe1d40>
    2de8:	29402034 	orhi	r5,r5,128
    2dec:	01000e04 	movi	r4,56
    2df0:	2080a316 	blt	r4,r2,3080 <__subdf3+0x3c4>
    2df4:	010007c4 	movi	r4,31
    2df8:	2080c616 	blt	r4,r2,3114 <__subdf3+0x458>
    2dfc:	01000804 	movi	r4,32
    2e00:	2089c83a 	sub	r4,r4,r2
    2e04:	2910983a 	sll	r8,r5,r4
    2e08:	308ed83a 	srl	r7,r6,r2
    2e0c:	3108983a 	sll	r4,r6,r4
    2e10:	2884d83a 	srl	r2,r5,r2
    2e14:	41ccb03a 	or	r6,r8,r7
    2e18:	2008c03a 	cmpne	r4,r4,zero
    2e1c:	310cb03a 	or	r6,r6,r4
    2e20:	898dc83a 	sub	r6,r17,r6
    2e24:	89a3803a 	cmpltu	r17,r17,r6
    2e28:	1887c83a 	sub	r3,r3,r2
    2e2c:	1c47c83a 	sub	r3,r3,r17
    2e30:	3023883a 	mov	r17,r6
    2e34:	1880202c 	andhi	r2,r3,128
    2e38:	10002326 	beq	r2,zero,2ec8 <__subdf3+0x20c>
    2e3c:	04c02034 	movhi	r19,128
    2e40:	9cffffc4 	addi	r19,r19,-1
    2e44:	1ce6703a 	and	r19,r3,r19
    2e48:	98007a26 	beq	r19,zero,3034 <__subdf3+0x378>
    2e4c:	9809883a 	mov	r4,r19
    2e50:	00037f00 	call	37f0 <__clzsi2>
    2e54:	113ffe04 	addi	r4,r2,-8
    2e58:	00c007c4 	movi	r3,31
    2e5c:	19007b16 	blt	r3,r4,304c <__subdf3+0x390>
    2e60:	00800804 	movi	r2,32
    2e64:	1105c83a 	sub	r2,r2,r4
    2e68:	8884d83a 	srl	r2,r17,r2
    2e6c:	9906983a 	sll	r3,r19,r4
    2e70:	8922983a 	sll	r17,r17,r4
    2e74:	10c4b03a 	or	r2,r2,r3
    2e78:	24007816 	blt	r4,r16,305c <__subdf3+0x3a0>
    2e7c:	2421c83a 	sub	r16,r4,r16
    2e80:	80c00044 	addi	r3,r16,1
    2e84:	010007c4 	movi	r4,31
    2e88:	20c09516 	blt	r4,r3,30e0 <__subdf3+0x424>
    2e8c:	01400804 	movi	r5,32
    2e90:	28cbc83a 	sub	r5,r5,r3
    2e94:	88c8d83a 	srl	r4,r17,r3
    2e98:	8962983a 	sll	r17,r17,r5
    2e9c:	114a983a 	sll	r5,r2,r5
    2ea0:	10c6d83a 	srl	r3,r2,r3
    2ea4:	8804c03a 	cmpne	r2,r17,zero
    2ea8:	290ab03a 	or	r5,r5,r4
    2eac:	28a2b03a 	or	r17,r5,r2
    2eb0:	0021883a 	mov	r16,zero
    2eb4:	003fa206 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    2eb8:	2090b03a 	or	r8,r4,r2
    2ebc:	40018e26 	beq	r8,zero,34f8 <__subdf3+0x83c>
    2ec0:	1007883a 	mov	r3,r2
    2ec4:	2023883a 	mov	r17,r4
    2ec8:	888001cc 	andi	r2,r17,7
    2ecc:	103f9e1e 	bne	r2,zero,2d48 <__alt_mem_epcs+0xfffe1d48>
    2ed0:	1804977a 	slli	r2,r3,29
    2ed4:	8822d0fa 	srli	r17,r17,3
    2ed8:	1810d0fa 	srli	r8,r3,3
    2edc:	9100004c 	andi	r4,r18,1
    2ee0:	1444b03a 	or	r2,r2,r17
    2ee4:	00c1ffc4 	movi	r3,2047
    2ee8:	80c02826 	beq	r16,r3,2f8c <__subdf3+0x2d0>
    2eec:	01400434 	movhi	r5,16
    2ef0:	297fffc4 	addi	r5,r5,-1
    2ef4:	80e0703a 	and	r16,r16,r3
    2ef8:	414a703a 	and	r5,r8,r5
    2efc:	003fa806 	br	2da0 <__alt_mem_epcs+0xfffe1da0>
    2f00:	0080630e 	bge	zero,r2,3090 <__subdf3+0x3d4>
    2f04:	48003026 	beq	r9,zero,2fc8 <__subdf3+0x30c>
    2f08:	0101ffc4 	movi	r4,2047
    2f0c:	813f8c26 	beq	r16,r4,2d40 <__alt_mem_epcs+0xfffe1d40>
    2f10:	29402034 	orhi	r5,r5,128
    2f14:	01000e04 	movi	r4,56
    2f18:	2080a90e 	bge	r4,r2,31c0 <__subdf3+0x504>
    2f1c:	298cb03a 	or	r6,r5,r6
    2f20:	3012c03a 	cmpne	r9,r6,zero
    2f24:	0005883a 	mov	r2,zero
    2f28:	4c53883a 	add	r9,r9,r17
    2f2c:	4c63803a 	cmpltu	r17,r9,r17
    2f30:	10c7883a 	add	r3,r2,r3
    2f34:	88c7883a 	add	r3,r17,r3
    2f38:	4823883a 	mov	r17,r9
    2f3c:	1880202c 	andhi	r2,r3,128
    2f40:	1000d026 	beq	r2,zero,3284 <__subdf3+0x5c8>
    2f44:	84000044 	addi	r16,r16,1
    2f48:	0081ffc4 	movi	r2,2047
    2f4c:	8080fe26 	beq	r16,r2,3348 <__subdf3+0x68c>
    2f50:	00bfe034 	movhi	r2,65408
    2f54:	10bfffc4 	addi	r2,r2,-1
    2f58:	1886703a 	and	r3,r3,r2
    2f5c:	880ad07a 	srli	r5,r17,1
    2f60:	180497fa 	slli	r2,r3,31
    2f64:	8900004c 	andi	r4,r17,1
    2f68:	2922b03a 	or	r17,r5,r4
    2f6c:	1806d07a 	srli	r3,r3,1
    2f70:	1462b03a 	or	r17,r2,r17
    2f74:	3825883a 	mov	r18,r7
    2f78:	003f7106 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    2f7c:	2984b03a 	or	r2,r5,r6
    2f80:	103f6826 	beq	r2,zero,2d24 <__alt_mem_epcs+0xfffe1d24>
    2f84:	39c03fcc 	andi	r7,r7,255
    2f88:	003f6706 	br	2d28 <__alt_mem_epcs+0xfffe1d28>
    2f8c:	4086b03a 	or	r3,r8,r2
    2f90:	18015226 	beq	r3,zero,34dc <__subdf3+0x820>
    2f94:	00c00434 	movhi	r3,16
    2f98:	41400234 	orhi	r5,r8,8
    2f9c:	18ffffc4 	addi	r3,r3,-1
    2fa0:	28ca703a 	and	r5,r5,r3
    2fa4:	003f7e06 	br	2da0 <__alt_mem_epcs+0xfffe1da0>
    2fa8:	10bfffc4 	addi	r2,r2,-1
    2fac:	1000491e 	bne	r2,zero,30d4 <__subdf3+0x418>
    2fb0:	898fc83a 	sub	r7,r17,r6
    2fb4:	89e3803a 	cmpltu	r17,r17,r7
    2fb8:	1947c83a 	sub	r3,r3,r5
    2fbc:	1c47c83a 	sub	r3,r3,r17
    2fc0:	3823883a 	mov	r17,r7
    2fc4:	003f9b06 	br	2e34 <__alt_mem_epcs+0xfffe1e34>
    2fc8:	2988b03a 	or	r4,r5,r6
    2fcc:	203f5c26 	beq	r4,zero,2d40 <__alt_mem_epcs+0xfffe1d40>
    2fd0:	10bfffc4 	addi	r2,r2,-1
    2fd4:	1000931e 	bne	r2,zero,3224 <__subdf3+0x568>
    2fd8:	898d883a 	add	r6,r17,r6
    2fdc:	3463803a 	cmpltu	r17,r6,r17
    2fe0:	1947883a 	add	r3,r3,r5
    2fe4:	88c7883a 	add	r3,r17,r3
    2fe8:	3023883a 	mov	r17,r6
    2fec:	003fd306 	br	2f3c <__alt_mem_epcs+0xfffe1f3c>
    2ff0:	1000541e 	bne	r2,zero,3144 <__subdf3+0x488>
    2ff4:	80800044 	addi	r2,r16,1
    2ff8:	1081ffcc 	andi	r2,r2,2047
    2ffc:	01000044 	movi	r4,1
    3000:	2080a20e 	bge	r4,r2,328c <__subdf3+0x5d0>
    3004:	8989c83a 	sub	r4,r17,r6
    3008:	8905803a 	cmpltu	r2,r17,r4
    300c:	1967c83a 	sub	r19,r3,r5
    3010:	98a7c83a 	sub	r19,r19,r2
    3014:	9880202c 	andhi	r2,r19,128
    3018:	10006326 	beq	r2,zero,31a8 <__subdf3+0x4ec>
    301c:	3463c83a 	sub	r17,r6,r17
    3020:	28c7c83a 	sub	r3,r5,r3
    3024:	344d803a 	cmpltu	r6,r6,r17
    3028:	19a7c83a 	sub	r19,r3,r6
    302c:	3825883a 	mov	r18,r7
    3030:	983f861e 	bne	r19,zero,2e4c <__alt_mem_epcs+0xfffe1e4c>
    3034:	8809883a 	mov	r4,r17
    3038:	00037f00 	call	37f0 <__clzsi2>
    303c:	10800804 	addi	r2,r2,32
    3040:	113ffe04 	addi	r4,r2,-8
    3044:	00c007c4 	movi	r3,31
    3048:	193f850e 	bge	r3,r4,2e60 <__alt_mem_epcs+0xfffe1e60>
    304c:	10bff604 	addi	r2,r2,-40
    3050:	8884983a 	sll	r2,r17,r2
    3054:	0023883a 	mov	r17,zero
    3058:	243f880e 	bge	r4,r16,2e7c <__alt_mem_epcs+0xfffe1e7c>
    305c:	00ffe034 	movhi	r3,65408
    3060:	18ffffc4 	addi	r3,r3,-1
    3064:	8121c83a 	sub	r16,r16,r4
    3068:	10c6703a 	and	r3,r2,r3
    306c:	003f3406 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3070:	9100004c 	andi	r4,r18,1
    3074:	000b883a 	mov	r5,zero
    3078:	0005883a 	mov	r2,zero
    307c:	003f4806 	br	2da0 <__alt_mem_epcs+0xfffe1da0>
    3080:	298cb03a 	or	r6,r5,r6
    3084:	300cc03a 	cmpne	r6,r6,zero
    3088:	0005883a 	mov	r2,zero
    308c:	003f6406 	br	2e20 <__alt_mem_epcs+0xfffe1e20>
    3090:	10009a1e 	bne	r2,zero,32fc <__subdf3+0x640>
    3094:	82400044 	addi	r9,r16,1
    3098:	4881ffcc 	andi	r2,r9,2047
    309c:	02800044 	movi	r10,1
    30a0:	5080670e 	bge	r10,r2,3240 <__subdf3+0x584>
    30a4:	0081ffc4 	movi	r2,2047
    30a8:	4880af26 	beq	r9,r2,3368 <__subdf3+0x6ac>
    30ac:	898d883a 	add	r6,r17,r6
    30b0:	1945883a 	add	r2,r3,r5
    30b4:	3447803a 	cmpltu	r3,r6,r17
    30b8:	1887883a 	add	r3,r3,r2
    30bc:	182297fa 	slli	r17,r3,31
    30c0:	300cd07a 	srli	r6,r6,1
    30c4:	1806d07a 	srli	r3,r3,1
    30c8:	4821883a 	mov	r16,r9
    30cc:	89a2b03a 	or	r17,r17,r6
    30d0:	003f1b06 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    30d4:	0101ffc4 	movi	r4,2047
    30d8:	813f441e 	bne	r16,r4,2dec <__alt_mem_epcs+0xfffe1dec>
    30dc:	003f1806 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    30e0:	843ff844 	addi	r16,r16,-31
    30e4:	01400804 	movi	r5,32
    30e8:	1408d83a 	srl	r4,r2,r16
    30ec:	19405026 	beq	r3,r5,3230 <__subdf3+0x574>
    30f0:	01401004 	movi	r5,64
    30f4:	28c7c83a 	sub	r3,r5,r3
    30f8:	10c4983a 	sll	r2,r2,r3
    30fc:	88a2b03a 	or	r17,r17,r2
    3100:	8822c03a 	cmpne	r17,r17,zero
    3104:	2462b03a 	or	r17,r4,r17
    3108:	0007883a 	mov	r3,zero
    310c:	0021883a 	mov	r16,zero
    3110:	003f6d06 	br	2ec8 <__alt_mem_epcs+0xfffe1ec8>
    3114:	11fff804 	addi	r7,r2,-32
    3118:	01000804 	movi	r4,32
    311c:	29ced83a 	srl	r7,r5,r7
    3120:	11004526 	beq	r2,r4,3238 <__subdf3+0x57c>
    3124:	01001004 	movi	r4,64
    3128:	2089c83a 	sub	r4,r4,r2
    312c:	2904983a 	sll	r2,r5,r4
    3130:	118cb03a 	or	r6,r2,r6
    3134:	300cc03a 	cmpne	r6,r6,zero
    3138:	398cb03a 	or	r6,r7,r6
    313c:	0005883a 	mov	r2,zero
    3140:	003f3706 	br	2e20 <__alt_mem_epcs+0xfffe1e20>
    3144:	80002a26 	beq	r16,zero,31f0 <__subdf3+0x534>
    3148:	0101ffc4 	movi	r4,2047
    314c:	49006626 	beq	r9,r4,32e8 <__subdf3+0x62c>
    3150:	0085c83a 	sub	r2,zero,r2
    3154:	18c02034 	orhi	r3,r3,128
    3158:	01000e04 	movi	r4,56
    315c:	20807e16 	blt	r4,r2,3358 <__subdf3+0x69c>
    3160:	010007c4 	movi	r4,31
    3164:	2080e716 	blt	r4,r2,3504 <__subdf3+0x848>
    3168:	01000804 	movi	r4,32
    316c:	2089c83a 	sub	r4,r4,r2
    3170:	1914983a 	sll	r10,r3,r4
    3174:	8890d83a 	srl	r8,r17,r2
    3178:	8908983a 	sll	r4,r17,r4
    317c:	1884d83a 	srl	r2,r3,r2
    3180:	5222b03a 	or	r17,r10,r8
    3184:	2006c03a 	cmpne	r3,r4,zero
    3188:	88e2b03a 	or	r17,r17,r3
    318c:	3463c83a 	sub	r17,r6,r17
    3190:	2885c83a 	sub	r2,r5,r2
    3194:	344d803a 	cmpltu	r6,r6,r17
    3198:	1187c83a 	sub	r3,r2,r6
    319c:	4821883a 	mov	r16,r9
    31a0:	3825883a 	mov	r18,r7
    31a4:	003f2306 	br	2e34 <__alt_mem_epcs+0xfffe1e34>
    31a8:	24d0b03a 	or	r8,r4,r19
    31ac:	40001b1e 	bne	r8,zero,321c <__subdf3+0x560>
    31b0:	0005883a 	mov	r2,zero
    31b4:	0009883a 	mov	r4,zero
    31b8:	0021883a 	mov	r16,zero
    31bc:	003f4906 	br	2ee4 <__alt_mem_epcs+0xfffe1ee4>
    31c0:	010007c4 	movi	r4,31
    31c4:	20803a16 	blt	r4,r2,32b0 <__subdf3+0x5f4>
    31c8:	01000804 	movi	r4,32
    31cc:	2089c83a 	sub	r4,r4,r2
    31d0:	2912983a 	sll	r9,r5,r4
    31d4:	3090d83a 	srl	r8,r6,r2
    31d8:	3108983a 	sll	r4,r6,r4
    31dc:	2884d83a 	srl	r2,r5,r2
    31e0:	4a12b03a 	or	r9,r9,r8
    31e4:	2008c03a 	cmpne	r4,r4,zero
    31e8:	4912b03a 	or	r9,r9,r4
    31ec:	003f4e06 	br	2f28 <__alt_mem_epcs+0xfffe1f28>
    31f0:	1c48b03a 	or	r4,r3,r17
    31f4:	20003c26 	beq	r4,zero,32e8 <__subdf3+0x62c>
    31f8:	0084303a 	nor	r2,zero,r2
    31fc:	1000381e 	bne	r2,zero,32e0 <__subdf3+0x624>
    3200:	3463c83a 	sub	r17,r6,r17
    3204:	28c5c83a 	sub	r2,r5,r3
    3208:	344d803a 	cmpltu	r6,r6,r17
    320c:	1187c83a 	sub	r3,r2,r6
    3210:	4821883a 	mov	r16,r9
    3214:	3825883a 	mov	r18,r7
    3218:	003f0606 	br	2e34 <__alt_mem_epcs+0xfffe1e34>
    321c:	2023883a 	mov	r17,r4
    3220:	003f0906 	br	2e48 <__alt_mem_epcs+0xfffe1e48>
    3224:	0101ffc4 	movi	r4,2047
    3228:	813f3a1e 	bne	r16,r4,2f14 <__alt_mem_epcs+0xfffe1f14>
    322c:	003ec406 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3230:	0005883a 	mov	r2,zero
    3234:	003fb106 	br	30fc <__alt_mem_epcs+0xfffe20fc>
    3238:	0005883a 	mov	r2,zero
    323c:	003fbc06 	br	3130 <__alt_mem_epcs+0xfffe2130>
    3240:	1c44b03a 	or	r2,r3,r17
    3244:	80008e1e 	bne	r16,zero,3480 <__subdf3+0x7c4>
    3248:	1000c826 	beq	r2,zero,356c <__subdf3+0x8b0>
    324c:	2984b03a 	or	r2,r5,r6
    3250:	103ebb26 	beq	r2,zero,2d40 <__alt_mem_epcs+0xfffe1d40>
    3254:	8989883a 	add	r4,r17,r6
    3258:	1945883a 	add	r2,r3,r5
    325c:	2447803a 	cmpltu	r3,r4,r17
    3260:	1887883a 	add	r3,r3,r2
    3264:	1880202c 	andhi	r2,r3,128
    3268:	2023883a 	mov	r17,r4
    326c:	103f1626 	beq	r2,zero,2ec8 <__alt_mem_epcs+0xfffe1ec8>
    3270:	00bfe034 	movhi	r2,65408
    3274:	10bfffc4 	addi	r2,r2,-1
    3278:	5021883a 	mov	r16,r10
    327c:	1886703a 	and	r3,r3,r2
    3280:	003eaf06 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3284:	3825883a 	mov	r18,r7
    3288:	003f0f06 	br	2ec8 <__alt_mem_epcs+0xfffe1ec8>
    328c:	1c44b03a 	or	r2,r3,r17
    3290:	8000251e 	bne	r16,zero,3328 <__subdf3+0x66c>
    3294:	1000661e 	bne	r2,zero,3430 <__subdf3+0x774>
    3298:	2990b03a 	or	r8,r5,r6
    329c:	40009626 	beq	r8,zero,34f8 <__subdf3+0x83c>
    32a0:	2807883a 	mov	r3,r5
    32a4:	3023883a 	mov	r17,r6
    32a8:	3825883a 	mov	r18,r7
    32ac:	003ea406 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    32b0:	127ff804 	addi	r9,r2,-32
    32b4:	01000804 	movi	r4,32
    32b8:	2a52d83a 	srl	r9,r5,r9
    32bc:	11008c26 	beq	r2,r4,34f0 <__subdf3+0x834>
    32c0:	01001004 	movi	r4,64
    32c4:	2085c83a 	sub	r2,r4,r2
    32c8:	2884983a 	sll	r2,r5,r2
    32cc:	118cb03a 	or	r6,r2,r6
    32d0:	300cc03a 	cmpne	r6,r6,zero
    32d4:	4992b03a 	or	r9,r9,r6
    32d8:	0005883a 	mov	r2,zero
    32dc:	003f1206 	br	2f28 <__alt_mem_epcs+0xfffe1f28>
    32e0:	0101ffc4 	movi	r4,2047
    32e4:	493f9c1e 	bne	r9,r4,3158 <__alt_mem_epcs+0xfffe2158>
    32e8:	2807883a 	mov	r3,r5
    32ec:	3023883a 	mov	r17,r6
    32f0:	4821883a 	mov	r16,r9
    32f4:	3825883a 	mov	r18,r7
    32f8:	003e9106 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    32fc:	80001f1e 	bne	r16,zero,337c <__subdf3+0x6c0>
    3300:	1c48b03a 	or	r4,r3,r17
    3304:	20005a26 	beq	r4,zero,3470 <__subdf3+0x7b4>
    3308:	0084303a 	nor	r2,zero,r2
    330c:	1000561e 	bne	r2,zero,3468 <__subdf3+0x7ac>
    3310:	89a3883a 	add	r17,r17,r6
    3314:	1945883a 	add	r2,r3,r5
    3318:	898d803a 	cmpltu	r6,r17,r6
    331c:	3087883a 	add	r3,r6,r2
    3320:	4821883a 	mov	r16,r9
    3324:	003f0506 	br	2f3c <__alt_mem_epcs+0xfffe1f3c>
    3328:	10002b1e 	bne	r2,zero,33d8 <__subdf3+0x71c>
    332c:	2984b03a 	or	r2,r5,r6
    3330:	10008026 	beq	r2,zero,3534 <__subdf3+0x878>
    3334:	2807883a 	mov	r3,r5
    3338:	3023883a 	mov	r17,r6
    333c:	3825883a 	mov	r18,r7
    3340:	0401ffc4 	movi	r16,2047
    3344:	003e7e06 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3348:	3809883a 	mov	r4,r7
    334c:	0011883a 	mov	r8,zero
    3350:	0005883a 	mov	r2,zero
    3354:	003ee306 	br	2ee4 <__alt_mem_epcs+0xfffe1ee4>
    3358:	1c62b03a 	or	r17,r3,r17
    335c:	8822c03a 	cmpne	r17,r17,zero
    3360:	0005883a 	mov	r2,zero
    3364:	003f8906 	br	318c <__alt_mem_epcs+0xfffe218c>
    3368:	3809883a 	mov	r4,r7
    336c:	4821883a 	mov	r16,r9
    3370:	0011883a 	mov	r8,zero
    3374:	0005883a 	mov	r2,zero
    3378:	003eda06 	br	2ee4 <__alt_mem_epcs+0xfffe1ee4>
    337c:	0101ffc4 	movi	r4,2047
    3380:	49003b26 	beq	r9,r4,3470 <__subdf3+0x7b4>
    3384:	0085c83a 	sub	r2,zero,r2
    3388:	18c02034 	orhi	r3,r3,128
    338c:	01000e04 	movi	r4,56
    3390:	20806e16 	blt	r4,r2,354c <__subdf3+0x890>
    3394:	010007c4 	movi	r4,31
    3398:	20807716 	blt	r4,r2,3578 <__subdf3+0x8bc>
    339c:	01000804 	movi	r4,32
    33a0:	2089c83a 	sub	r4,r4,r2
    33a4:	1914983a 	sll	r10,r3,r4
    33a8:	8890d83a 	srl	r8,r17,r2
    33ac:	8908983a 	sll	r4,r17,r4
    33b0:	1884d83a 	srl	r2,r3,r2
    33b4:	5222b03a 	or	r17,r10,r8
    33b8:	2006c03a 	cmpne	r3,r4,zero
    33bc:	88e2b03a 	or	r17,r17,r3
    33c0:	89a3883a 	add	r17,r17,r6
    33c4:	1145883a 	add	r2,r2,r5
    33c8:	898d803a 	cmpltu	r6,r17,r6
    33cc:	3087883a 	add	r3,r6,r2
    33d0:	4821883a 	mov	r16,r9
    33d4:	003ed906 	br	2f3c <__alt_mem_epcs+0xfffe1f3c>
    33d8:	2984b03a 	or	r2,r5,r6
    33dc:	10004226 	beq	r2,zero,34e8 <__subdf3+0x82c>
    33e0:	1808d0fa 	srli	r4,r3,3
    33e4:	8822d0fa 	srli	r17,r17,3
    33e8:	1806977a 	slli	r3,r3,29
    33ec:	2080022c 	andhi	r2,r4,8
    33f0:	1c62b03a 	or	r17,r3,r17
    33f4:	10000826 	beq	r2,zero,3418 <__subdf3+0x75c>
    33f8:	2812d0fa 	srli	r9,r5,3
    33fc:	4880022c 	andhi	r2,r9,8
    3400:	1000051e 	bne	r2,zero,3418 <__subdf3+0x75c>
    3404:	300cd0fa 	srli	r6,r6,3
    3408:	2804977a 	slli	r2,r5,29
    340c:	4809883a 	mov	r4,r9
    3410:	3825883a 	mov	r18,r7
    3414:	11a2b03a 	or	r17,r2,r6
    3418:	8806d77a 	srli	r3,r17,29
    341c:	200890fa 	slli	r4,r4,3
    3420:	882290fa 	slli	r17,r17,3
    3424:	0401ffc4 	movi	r16,2047
    3428:	1906b03a 	or	r3,r3,r4
    342c:	003e4406 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3430:	2984b03a 	or	r2,r5,r6
    3434:	103e4226 	beq	r2,zero,2d40 <__alt_mem_epcs+0xfffe1d40>
    3438:	8989c83a 	sub	r4,r17,r6
    343c:	8911803a 	cmpltu	r8,r17,r4
    3440:	1945c83a 	sub	r2,r3,r5
    3444:	1205c83a 	sub	r2,r2,r8
    3448:	1200202c 	andhi	r8,r2,128
    344c:	403e9a26 	beq	r8,zero,2eb8 <__alt_mem_epcs+0xfffe1eb8>
    3450:	3463c83a 	sub	r17,r6,r17
    3454:	28c5c83a 	sub	r2,r5,r3
    3458:	344d803a 	cmpltu	r6,r6,r17
    345c:	1187c83a 	sub	r3,r2,r6
    3460:	3825883a 	mov	r18,r7
    3464:	003e3606 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3468:	0101ffc4 	movi	r4,2047
    346c:	493fc71e 	bne	r9,r4,338c <__alt_mem_epcs+0xfffe238c>
    3470:	2807883a 	mov	r3,r5
    3474:	3023883a 	mov	r17,r6
    3478:	4821883a 	mov	r16,r9
    347c:	003e3006 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3480:	10003626 	beq	r2,zero,355c <__subdf3+0x8a0>
    3484:	2984b03a 	or	r2,r5,r6
    3488:	10001726 	beq	r2,zero,34e8 <__subdf3+0x82c>
    348c:	1808d0fa 	srli	r4,r3,3
    3490:	8822d0fa 	srli	r17,r17,3
    3494:	1806977a 	slli	r3,r3,29
    3498:	2080022c 	andhi	r2,r4,8
    349c:	1c62b03a 	or	r17,r3,r17
    34a0:	10000726 	beq	r2,zero,34c0 <__subdf3+0x804>
    34a4:	2812d0fa 	srli	r9,r5,3
    34a8:	4880022c 	andhi	r2,r9,8
    34ac:	1000041e 	bne	r2,zero,34c0 <__subdf3+0x804>
    34b0:	300cd0fa 	srli	r6,r6,3
    34b4:	2804977a 	slli	r2,r5,29
    34b8:	4809883a 	mov	r4,r9
    34bc:	11a2b03a 	or	r17,r2,r6
    34c0:	8806d77a 	srli	r3,r17,29
    34c4:	200890fa 	slli	r4,r4,3
    34c8:	882290fa 	slli	r17,r17,3
    34cc:	3825883a 	mov	r18,r7
    34d0:	1906b03a 	or	r3,r3,r4
    34d4:	0401ffc4 	movi	r16,2047
    34d8:	003e1906 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    34dc:	000b883a 	mov	r5,zero
    34e0:	0005883a 	mov	r2,zero
    34e4:	003e2e06 	br	2da0 <__alt_mem_epcs+0xfffe1da0>
    34e8:	0401ffc4 	movi	r16,2047
    34ec:	003e1406 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    34f0:	0005883a 	mov	r2,zero
    34f4:	003f7506 	br	32cc <__alt_mem_epcs+0xfffe22cc>
    34f8:	0005883a 	mov	r2,zero
    34fc:	0009883a 	mov	r4,zero
    3500:	003e7806 	br	2ee4 <__alt_mem_epcs+0xfffe1ee4>
    3504:	123ff804 	addi	r8,r2,-32
    3508:	01000804 	movi	r4,32
    350c:	1a10d83a 	srl	r8,r3,r8
    3510:	11002526 	beq	r2,r4,35a8 <__subdf3+0x8ec>
    3514:	01001004 	movi	r4,64
    3518:	2085c83a 	sub	r2,r4,r2
    351c:	1884983a 	sll	r2,r3,r2
    3520:	1444b03a 	or	r2,r2,r17
    3524:	1004c03a 	cmpne	r2,r2,zero
    3528:	40a2b03a 	or	r17,r8,r2
    352c:	0005883a 	mov	r2,zero
    3530:	003f1606 	br	318c <__alt_mem_epcs+0xfffe218c>
    3534:	02000434 	movhi	r8,16
    3538:	0009883a 	mov	r4,zero
    353c:	423fffc4 	addi	r8,r8,-1
    3540:	00bfffc4 	movi	r2,-1
    3544:	0401ffc4 	movi	r16,2047
    3548:	003e6606 	br	2ee4 <__alt_mem_epcs+0xfffe1ee4>
    354c:	1c62b03a 	or	r17,r3,r17
    3550:	8822c03a 	cmpne	r17,r17,zero
    3554:	0005883a 	mov	r2,zero
    3558:	003f9906 	br	33c0 <__alt_mem_epcs+0xfffe23c0>
    355c:	2807883a 	mov	r3,r5
    3560:	3023883a 	mov	r17,r6
    3564:	0401ffc4 	movi	r16,2047
    3568:	003df506 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    356c:	2807883a 	mov	r3,r5
    3570:	3023883a 	mov	r17,r6
    3574:	003df206 	br	2d40 <__alt_mem_epcs+0xfffe1d40>
    3578:	123ff804 	addi	r8,r2,-32
    357c:	01000804 	movi	r4,32
    3580:	1a10d83a 	srl	r8,r3,r8
    3584:	11000a26 	beq	r2,r4,35b0 <__subdf3+0x8f4>
    3588:	01001004 	movi	r4,64
    358c:	2085c83a 	sub	r2,r4,r2
    3590:	1884983a 	sll	r2,r3,r2
    3594:	1444b03a 	or	r2,r2,r17
    3598:	1004c03a 	cmpne	r2,r2,zero
    359c:	40a2b03a 	or	r17,r8,r2
    35a0:	0005883a 	mov	r2,zero
    35a4:	003f8606 	br	33c0 <__alt_mem_epcs+0xfffe23c0>
    35a8:	0005883a 	mov	r2,zero
    35ac:	003fdc06 	br	3520 <__alt_mem_epcs+0xfffe2520>
    35b0:	0005883a 	mov	r2,zero
    35b4:	003ff706 	br	3594 <__alt_mem_epcs+0xfffe2594>

000035b8 <__fixdfsi>:
    35b8:	280cd53a 	srli	r6,r5,20
    35bc:	00c00434 	movhi	r3,16
    35c0:	18ffffc4 	addi	r3,r3,-1
    35c4:	3181ffcc 	andi	r6,r6,2047
    35c8:	01c0ff84 	movi	r7,1022
    35cc:	28c6703a 	and	r3,r5,r3
    35d0:	280ad7fa 	srli	r5,r5,31
    35d4:	3980120e 	bge	r7,r6,3620 <__fixdfsi+0x68>
    35d8:	00810744 	movi	r2,1053
    35dc:	11800c16 	blt	r2,r6,3610 <__fixdfsi+0x58>
    35e0:	00810cc4 	movi	r2,1075
    35e4:	1185c83a 	sub	r2,r2,r6
    35e8:	01c007c4 	movi	r7,31
    35ec:	18c00434 	orhi	r3,r3,16
    35f0:	38800d16 	blt	r7,r2,3628 <__fixdfsi+0x70>
    35f4:	31befb44 	addi	r6,r6,-1043
    35f8:	2084d83a 	srl	r2,r4,r2
    35fc:	1986983a 	sll	r3,r3,r6
    3600:	1884b03a 	or	r2,r3,r2
    3604:	28000726 	beq	r5,zero,3624 <__fixdfsi+0x6c>
    3608:	0085c83a 	sub	r2,zero,r2
    360c:	f800283a 	ret
    3610:	00a00034 	movhi	r2,32768
    3614:	10bfffc4 	addi	r2,r2,-1
    3618:	2885883a 	add	r2,r5,r2
    361c:	f800283a 	ret
    3620:	0005883a 	mov	r2,zero
    3624:	f800283a 	ret
    3628:	008104c4 	movi	r2,1043
    362c:	1185c83a 	sub	r2,r2,r6
    3630:	1884d83a 	srl	r2,r3,r2
    3634:	003ff306 	br	3604 <__alt_mem_epcs+0xfffe2604>

00003638 <__floatunsidf>:
    3638:	defffe04 	addi	sp,sp,-8
    363c:	dc000015 	stw	r16,0(sp)
    3640:	dfc00115 	stw	ra,4(sp)
    3644:	2021883a 	mov	r16,r4
    3648:	20002226 	beq	r4,zero,36d4 <__floatunsidf+0x9c>
    364c:	00037f00 	call	37f0 <__clzsi2>
    3650:	01010784 	movi	r4,1054
    3654:	2089c83a 	sub	r4,r4,r2
    3658:	01810cc4 	movi	r6,1075
    365c:	310dc83a 	sub	r6,r6,r4
    3660:	00c007c4 	movi	r3,31
    3664:	1980120e 	bge	r3,r6,36b0 <__floatunsidf+0x78>
    3668:	00c104c4 	movi	r3,1043
    366c:	1907c83a 	sub	r3,r3,r4
    3670:	80ca983a 	sll	r5,r16,r3
    3674:	00800434 	movhi	r2,16
    3678:	10bfffc4 	addi	r2,r2,-1
    367c:	2101ffcc 	andi	r4,r4,2047
    3680:	0021883a 	mov	r16,zero
    3684:	288a703a 	and	r5,r5,r2
    3688:	2008953a 	slli	r4,r4,20
    368c:	00c00434 	movhi	r3,16
    3690:	18ffffc4 	addi	r3,r3,-1
    3694:	28c6703a 	and	r3,r5,r3
    3698:	8005883a 	mov	r2,r16
    369c:	1906b03a 	or	r3,r3,r4
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	dc000017 	ldw	r16,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret
    36b0:	00c002c4 	movi	r3,11
    36b4:	188bc83a 	sub	r5,r3,r2
    36b8:	814ad83a 	srl	r5,r16,r5
    36bc:	00c00434 	movhi	r3,16
    36c0:	18ffffc4 	addi	r3,r3,-1
    36c4:	81a0983a 	sll	r16,r16,r6
    36c8:	2101ffcc 	andi	r4,r4,2047
    36cc:	28ca703a 	and	r5,r5,r3
    36d0:	003fed06 	br	3688 <__alt_mem_epcs+0xfffe2688>
    36d4:	0009883a 	mov	r4,zero
    36d8:	000b883a 	mov	r5,zero
    36dc:	003fea06 	br	3688 <__alt_mem_epcs+0xfffe2688>

000036e0 <__extendsfdf2>:
    36e0:	200ad5fa 	srli	r5,r4,23
    36e4:	defffd04 	addi	sp,sp,-12
    36e8:	dc400115 	stw	r17,4(sp)
    36ec:	29403fcc 	andi	r5,r5,255
    36f0:	29800044 	addi	r6,r5,1
    36f4:	04402034 	movhi	r17,128
    36f8:	dc000015 	stw	r16,0(sp)
    36fc:	8c7fffc4 	addi	r17,r17,-1
    3700:	dfc00215 	stw	ra,8(sp)
    3704:	31803fcc 	andi	r6,r6,255
    3708:	00800044 	movi	r2,1
    370c:	8922703a 	and	r17,r17,r4
    3710:	2020d7fa 	srli	r16,r4,31
    3714:	1180110e 	bge	r2,r6,375c <__extendsfdf2+0x7c>
    3718:	880cd0fa 	srli	r6,r17,3
    371c:	8822977a 	slli	r17,r17,29
    3720:	2940e004 	addi	r5,r5,896
    3724:	2941ffcc 	andi	r5,r5,2047
    3728:	2804953a 	slli	r2,r5,20
    372c:	01400434 	movhi	r5,16
    3730:	800697fa 	slli	r3,r16,31
    3734:	297fffc4 	addi	r5,r5,-1
    3738:	314a703a 	and	r5,r6,r5
    373c:	288ab03a 	or	r5,r5,r2
    3740:	28c6b03a 	or	r3,r5,r3
    3744:	8805883a 	mov	r2,r17
    3748:	dfc00217 	ldw	ra,8(sp)
    374c:	dc400117 	ldw	r17,4(sp)
    3750:	dc000017 	ldw	r16,0(sp)
    3754:	dec00304 	addi	sp,sp,12
    3758:	f800283a 	ret
    375c:	2800111e 	bne	r5,zero,37a4 <__extendsfdf2+0xc4>
    3760:	88001c26 	beq	r17,zero,37d4 <__extendsfdf2+0xf4>
    3764:	8809883a 	mov	r4,r17
    3768:	00037f00 	call	37f0 <__clzsi2>
    376c:	00c00284 	movi	r3,10
    3770:	18801b16 	blt	r3,r2,37e0 <__extendsfdf2+0x100>
    3774:	018002c4 	movi	r6,11
    3778:	308dc83a 	sub	r6,r6,r2
    377c:	11000544 	addi	r4,r2,21
    3780:	8986d83a 	srl	r3,r17,r6
    3784:	8922983a 	sll	r17,r17,r4
    3788:	0180e244 	movi	r6,905
    378c:	01400434 	movhi	r5,16
    3790:	3085c83a 	sub	r2,r6,r2
    3794:	297fffc4 	addi	r5,r5,-1
    3798:	194c703a 	and	r6,r3,r5
    379c:	1141ffcc 	andi	r5,r2,2047
    37a0:	003fe006 	br	3724 <__alt_mem_epcs+0xfffe2724>
    37a4:	88000826 	beq	r17,zero,37c8 <__extendsfdf2+0xe8>
    37a8:	880cd0fa 	srli	r6,r17,3
    37ac:	00800434 	movhi	r2,16
    37b0:	10bfffc4 	addi	r2,r2,-1
    37b4:	31800234 	orhi	r6,r6,8
    37b8:	8822977a 	slli	r17,r17,29
    37bc:	308c703a 	and	r6,r6,r2
    37c0:	0141ffc4 	movi	r5,2047
    37c4:	003fd706 	br	3724 <__alt_mem_epcs+0xfffe2724>
    37c8:	0141ffc4 	movi	r5,2047
    37cc:	000d883a 	mov	r6,zero
    37d0:	003fd406 	br	3724 <__alt_mem_epcs+0xfffe2724>
    37d4:	000b883a 	mov	r5,zero
    37d8:	000d883a 	mov	r6,zero
    37dc:	003fd106 	br	3724 <__alt_mem_epcs+0xfffe2724>
    37e0:	11bffd44 	addi	r6,r2,-11
    37e4:	8986983a 	sll	r3,r17,r6
    37e8:	0023883a 	mov	r17,zero
    37ec:	003fe606 	br	3788 <__alt_mem_epcs+0xfffe2788>

000037f0 <__clzsi2>:
    37f0:	00bfffd4 	movui	r2,65535
    37f4:	11000536 	bltu	r2,r4,380c <__clzsi2+0x1c>
    37f8:	00803fc4 	movi	r2,255
    37fc:	11000f36 	bltu	r2,r4,383c <__clzsi2+0x4c>
    3800:	00800804 	movi	r2,32
    3804:	0007883a 	mov	r3,zero
    3808:	00000506 	br	3820 <__clzsi2+0x30>
    380c:	00804034 	movhi	r2,256
    3810:	10bfffc4 	addi	r2,r2,-1
    3814:	11000c2e 	bgeu	r2,r4,3848 <__clzsi2+0x58>
    3818:	00800204 	movi	r2,8
    381c:	00c00604 	movi	r3,24
    3820:	20c8d83a 	srl	r4,r4,r3
    3824:	00c00034 	movhi	r3,0
    3828:	18d35f04 	addi	r3,r3,19836
    382c:	1909883a 	add	r4,r3,r4
    3830:	20c00003 	ldbu	r3,0(r4)
    3834:	10c5c83a 	sub	r2,r2,r3
    3838:	f800283a 	ret
    383c:	00800604 	movi	r2,24
    3840:	00c00204 	movi	r3,8
    3844:	003ff606 	br	3820 <__alt_mem_epcs+0xfffe2820>
    3848:	00800404 	movi	r2,16
    384c:	1007883a 	mov	r3,r2
    3850:	003ff306 	br	3820 <__alt_mem_epcs+0xfffe2820>

00003854 <memcpy>:
    3854:	2005883a 	mov	r2,r4
    3858:	2007883a 	mov	r3,r4
    385c:	218d883a 	add	r6,r4,r6
    3860:	19800526 	beq	r3,r6,3878 <memcpy+0x24>
    3864:	29000003 	ldbu	r4,0(r5)
    3868:	18c00044 	addi	r3,r3,1
    386c:	29400044 	addi	r5,r5,1
    3870:	193fffc5 	stb	r4,-1(r3)
    3874:	003ffa06 	br	3860 <__alt_mem_epcs+0xfffe2860>
    3878:	f800283a 	ret

0000387c <memset>:
    387c:	2005883a 	mov	r2,r4
    3880:	2007883a 	mov	r3,r4
    3884:	218d883a 	add	r6,r4,r6
    3888:	19800326 	beq	r3,r6,3898 <memset+0x1c>
    388c:	19400005 	stb	r5,0(r3)
    3890:	18c00044 	addi	r3,r3,1
    3894:	003ffc06 	br	3888 <__alt_mem_epcs+0xfffe2888>
    3898:	f800283a 	ret

0000389c <_printf_r>:
    389c:	defffd04 	addi	sp,sp,-12
    38a0:	dfc00015 	stw	ra,0(sp)
    38a4:	d9800115 	stw	r6,4(sp)
    38a8:	d9c00215 	stw	r7,8(sp)
    38ac:	20c00217 	ldw	r3,8(r4)
    38b0:	01800034 	movhi	r6,0
    38b4:	3191b904 	addi	r6,r6,18148
    38b8:	19800115 	stw	r6,4(r3)
    38bc:	280d883a 	mov	r6,r5
    38c0:	21400217 	ldw	r5,8(r4)
    38c4:	d9c00104 	addi	r7,sp,4
    38c8:	00041a40 	call	41a4 <___vfprintf_internal_r>
    38cc:	dfc00017 	ldw	ra,0(sp)
    38d0:	dec00304 	addi	sp,sp,12
    38d4:	f800283a 	ret

000038d8 <printf>:
    38d8:	defffc04 	addi	sp,sp,-16
    38dc:	dfc00015 	stw	ra,0(sp)
    38e0:	d9400115 	stw	r5,4(sp)
    38e4:	d9800215 	stw	r6,8(sp)
    38e8:	d9c00315 	stw	r7,12(sp)
    38ec:	00800034 	movhi	r2,0
    38f0:	1099d904 	addi	r2,r2,26468
    38f4:	10800017 	ldw	r2,0(r2)
    38f8:	01400034 	movhi	r5,0
    38fc:	2951b904 	addi	r5,r5,18148
    3900:	10c00217 	ldw	r3,8(r2)
    3904:	d9800104 	addi	r6,sp,4
    3908:	19400115 	stw	r5,4(r3)
    390c:	200b883a 	mov	r5,r4
    3910:	11000217 	ldw	r4,8(r2)
    3914:	00046c80 	call	46c8 <__vfprintf_internal>
    3918:	dfc00017 	ldw	ra,0(sp)
    391c:	dec00404 	addi	sp,sp,16
    3920:	f800283a 	ret

00003924 <_putchar_r>:
    3924:	21800217 	ldw	r6,8(r4)
    3928:	00048f81 	jmpi	48f8 <_putc_r>

0000392c <putchar>:
    392c:	00800034 	movhi	r2,0
    3930:	1099d904 	addi	r2,r2,26468
    3934:	10800017 	ldw	r2,0(r2)
    3938:	200b883a 	mov	r5,r4
    393c:	11800217 	ldw	r6,8(r2)
    3940:	1009883a 	mov	r4,r2
    3944:	00048f81 	jmpi	48f8 <_putc_r>

00003948 <_puts_r>:
    3948:	defffd04 	addi	sp,sp,-12
    394c:	dc000015 	stw	r16,0(sp)
    3950:	2021883a 	mov	r16,r4
    3954:	2809883a 	mov	r4,r5
    3958:	dfc00215 	stw	ra,8(sp)
    395c:	dc400115 	stw	r17,4(sp)
    3960:	2823883a 	mov	r17,r5
    3964:	0003b700 	call	3b70 <strlen>
    3968:	81400217 	ldw	r5,8(r16)
    396c:	01000034 	movhi	r4,0
    3970:	2111b904 	addi	r4,r4,18148
    3974:	29000115 	stw	r4,4(r5)
    3978:	100f883a 	mov	r7,r2
    397c:	880d883a 	mov	r6,r17
    3980:	8009883a 	mov	r4,r16
    3984:	00046e40 	call	46e4 <__sfvwrite_small_dev>
    3988:	00ffffc4 	movi	r3,-1
    398c:	10c00926 	beq	r2,r3,39b4 <_puts_r+0x6c>
    3990:	81400217 	ldw	r5,8(r16)
    3994:	01800034 	movhi	r6,0
    3998:	01c00044 	movi	r7,1
    399c:	28800117 	ldw	r2,4(r5)
    39a0:	31939f04 	addi	r6,r6,20092
    39a4:	8009883a 	mov	r4,r16
    39a8:	103ee83a 	callr	r2
    39ac:	10bfffe0 	cmpeqi	r2,r2,-1
    39b0:	0085c83a 	sub	r2,zero,r2
    39b4:	dfc00217 	ldw	ra,8(sp)
    39b8:	dc400117 	ldw	r17,4(sp)
    39bc:	dc000017 	ldw	r16,0(sp)
    39c0:	dec00304 	addi	sp,sp,12
    39c4:	f800283a 	ret

000039c8 <puts>:
    39c8:	00800034 	movhi	r2,0
    39cc:	1099d904 	addi	r2,r2,26468
    39d0:	200b883a 	mov	r5,r4
    39d4:	11000017 	ldw	r4,0(r2)
    39d8:	00039481 	jmpi	3948 <_puts_r>

000039dc <_snprintf_r>:
    39dc:	3000040e 	bge	r6,zero,39f0 <_snprintf_r+0x14>
    39e0:	008022c4 	movi	r2,139
    39e4:	20800015 	stw	r2,0(r4)
    39e8:	00bfffc4 	movi	r2,-1
    39ec:	f800283a 	ret
    39f0:	defff604 	addi	sp,sp,-40
    39f4:	00c08204 	movi	r3,520
    39f8:	dfc00915 	stw	ra,36(sp)
    39fc:	dc400815 	stw	r17,32(sp)
    3a00:	dc000715 	stw	r16,28(sp)
    3a04:	d8c0000d 	sth	r3,0(sp)
    3a08:	d9400415 	stw	r5,16(sp)
    3a0c:	d9400215 	stw	r5,8(sp)
    3a10:	3005883a 	mov	r2,r6
    3a14:	30000226 	beq	r6,zero,3a20 <_snprintf_r+0x44>
    3a18:	30ffffc4 	addi	r3,r6,-1
    3a1c:	00000106 	br	3a24 <_snprintf_r+0x48>
    3a20:	0007883a 	mov	r3,zero
    3a24:	1021883a 	mov	r16,r2
    3a28:	00bfffc4 	movi	r2,-1
    3a2c:	d880008d 	sth	r2,2(sp)
    3a30:	00800034 	movhi	r2,0
    3a34:	380d883a 	mov	r6,r7
    3a38:	1091e704 	addi	r2,r2,18332
    3a3c:	d9c00a04 	addi	r7,sp,40
    3a40:	d80b883a 	mov	r5,sp
    3a44:	d8c00515 	stw	r3,20(sp)
    3a48:	d8c00315 	stw	r3,12(sp)
    3a4c:	2023883a 	mov	r17,r4
    3a50:	d8800115 	stw	r2,4(sp)
    3a54:	d8000615 	stw	zero,24(sp)
    3a58:	0003bf80 	call	3bf8 <___svfprintf_internal_r>
    3a5c:	00ffffc4 	movi	r3,-1
    3a60:	10c0020e 	bge	r2,r3,3a6c <_snprintf_r+0x90>
    3a64:	00c022c4 	movi	r3,139
    3a68:	88c00015 	stw	r3,0(r17)
    3a6c:	80000226 	beq	r16,zero,3a78 <_snprintf_r+0x9c>
    3a70:	d8c00417 	ldw	r3,16(sp)
    3a74:	18000005 	stb	zero,0(r3)
    3a78:	dfc00917 	ldw	ra,36(sp)
    3a7c:	dc400817 	ldw	r17,32(sp)
    3a80:	dc000717 	ldw	r16,28(sp)
    3a84:	dec00a04 	addi	sp,sp,40
    3a88:	f800283a 	ret

00003a8c <snprintf>:
    3a8c:	defff504 	addi	sp,sp,-44
    3a90:	dfc00915 	stw	ra,36(sp)
    3a94:	dc400815 	stw	r17,32(sp)
    3a98:	dc000715 	stw	r16,28(sp)
    3a9c:	d9c00a15 	stw	r7,40(sp)
    3aa0:	00800034 	movhi	r2,0
    3aa4:	1099d904 	addi	r2,r2,26468
    3aa8:	14400017 	ldw	r17,0(r2)
    3aac:	2800040e 	bge	r5,zero,3ac0 <snprintf+0x34>
    3ab0:	008022c4 	movi	r2,139
    3ab4:	88800015 	stw	r2,0(r17)
    3ab8:	00bfffc4 	movi	r2,-1
    3abc:	00001c06 	br	3b30 <snprintf+0xa4>
    3ac0:	00c08204 	movi	r3,520
    3ac4:	d8c0000d 	sth	r3,0(sp)
    3ac8:	d9000415 	stw	r4,16(sp)
    3acc:	d9000215 	stw	r4,8(sp)
    3ad0:	28000226 	beq	r5,zero,3adc <snprintf+0x50>
    3ad4:	28ffffc4 	addi	r3,r5,-1
    3ad8:	00000106 	br	3ae0 <snprintf+0x54>
    3adc:	0007883a 	mov	r3,zero
    3ae0:	d8c00515 	stw	r3,20(sp)
    3ae4:	d8c00315 	stw	r3,12(sp)
    3ae8:	11000017 	ldw	r4,0(r2)
    3aec:	00ffffc4 	movi	r3,-1
    3af0:	d8c0008d 	sth	r3,2(sp)
    3af4:	00c00034 	movhi	r3,0
    3af8:	18d1e704 	addi	r3,r3,18332
    3afc:	2821883a 	mov	r16,r5
    3b00:	d9c00a04 	addi	r7,sp,40
    3b04:	d80b883a 	mov	r5,sp
    3b08:	d8c00115 	stw	r3,4(sp)
    3b0c:	d8000615 	stw	zero,24(sp)
    3b10:	0003bf80 	call	3bf8 <___svfprintf_internal_r>
    3b14:	00ffffc4 	movi	r3,-1
    3b18:	10c0020e 	bge	r2,r3,3b24 <snprintf+0x98>
    3b1c:	00c022c4 	movi	r3,139
    3b20:	88c00015 	stw	r3,0(r17)
    3b24:	80000226 	beq	r16,zero,3b30 <snprintf+0xa4>
    3b28:	d8c00417 	ldw	r3,16(sp)
    3b2c:	18000005 	stb	zero,0(r3)
    3b30:	dfc00917 	ldw	ra,36(sp)
    3b34:	dc400817 	ldw	r17,32(sp)
    3b38:	dc000717 	ldw	r16,28(sp)
    3b3c:	dec00b04 	addi	sp,sp,44
    3b40:	f800283a 	ret

00003b44 <strcpy>:
    3b44:	2005883a 	mov	r2,r4
    3b48:	200d883a 	mov	r6,r4
    3b4c:	28c00003 	ldbu	r3,0(r5)
    3b50:	31800044 	addi	r6,r6,1
    3b54:	29400044 	addi	r5,r5,1
    3b58:	30ffffc5 	stb	r3,-1(r6)
    3b5c:	18c03fcc 	andi	r3,r3,255
    3b60:	18c0201c 	xori	r3,r3,128
    3b64:	18ffe004 	addi	r3,r3,-128
    3b68:	183ff81e 	bne	r3,zero,3b4c <__alt_mem_epcs+0xfffe2b4c>
    3b6c:	f800283a 	ret

00003b70 <strlen>:
    3b70:	2005883a 	mov	r2,r4
    3b74:	10c00007 	ldb	r3,0(r2)
    3b78:	18000226 	beq	r3,zero,3b84 <strlen+0x14>
    3b7c:	10800044 	addi	r2,r2,1
    3b80:	003ffc06 	br	3b74 <__alt_mem_epcs+0xfffe2b74>
    3b84:	1105c83a 	sub	r2,r2,r4
    3b88:	f800283a 	ret

00003b8c <print_repeat>:
    3b8c:	defffb04 	addi	sp,sp,-20
    3b90:	dc800315 	stw	r18,12(sp)
    3b94:	dc400215 	stw	r17,8(sp)
    3b98:	dc000115 	stw	r16,4(sp)
    3b9c:	dfc00415 	stw	ra,16(sp)
    3ba0:	2025883a 	mov	r18,r4
    3ba4:	2823883a 	mov	r17,r5
    3ba8:	d9800005 	stb	r6,0(sp)
    3bac:	3821883a 	mov	r16,r7
    3bb0:	04000a0e 	bge	zero,r16,3bdc <print_repeat+0x50>
    3bb4:	88800117 	ldw	r2,4(r17)
    3bb8:	01c00044 	movi	r7,1
    3bbc:	d80d883a 	mov	r6,sp
    3bc0:	880b883a 	mov	r5,r17
    3bc4:	9009883a 	mov	r4,r18
    3bc8:	103ee83a 	callr	r2
    3bcc:	843fffc4 	addi	r16,r16,-1
    3bd0:	103ff726 	beq	r2,zero,3bb0 <__alt_mem_epcs+0xfffe2bb0>
    3bd4:	00bfffc4 	movi	r2,-1
    3bd8:	00000106 	br	3be0 <print_repeat+0x54>
    3bdc:	0005883a 	mov	r2,zero
    3be0:	dfc00417 	ldw	ra,16(sp)
    3be4:	dc800317 	ldw	r18,12(sp)
    3be8:	dc400217 	ldw	r17,8(sp)
    3bec:	dc000117 	ldw	r16,4(sp)
    3bf0:	dec00504 	addi	sp,sp,20
    3bf4:	f800283a 	ret

00003bf8 <___svfprintf_internal_r>:
    3bf8:	deffe504 	addi	sp,sp,-108
    3bfc:	d8c00804 	addi	r3,sp,32
    3c00:	df001915 	stw	fp,100(sp)
    3c04:	ddc01815 	stw	r23,96(sp)
    3c08:	dd801715 	stw	r22,92(sp)
    3c0c:	dd401615 	stw	r21,88(sp)
    3c10:	dd001515 	stw	r20,84(sp)
    3c14:	dcc01415 	stw	r19,80(sp)
    3c18:	dc801315 	stw	r18,76(sp)
    3c1c:	dc401215 	stw	r17,72(sp)
    3c20:	dc001115 	stw	r16,68(sp)
    3c24:	dfc01a15 	stw	ra,104(sp)
    3c28:	2027883a 	mov	r19,r4
    3c2c:	2839883a 	mov	fp,r5
    3c30:	382d883a 	mov	r22,r7
    3c34:	d9800f15 	stw	r6,60(sp)
    3c38:	0021883a 	mov	r16,zero
    3c3c:	d8000e15 	stw	zero,56(sp)
    3c40:	002f883a 	mov	r23,zero
    3c44:	002b883a 	mov	r21,zero
    3c48:	0025883a 	mov	r18,zero
    3c4c:	0023883a 	mov	r17,zero
    3c50:	d8000c15 	stw	zero,48(sp)
    3c54:	d8000b15 	stw	zero,44(sp)
    3c58:	0029883a 	mov	r20,zero
    3c5c:	d8c00915 	stw	r3,36(sp)
    3c60:	d8c00f17 	ldw	r3,60(sp)
    3c64:	19000003 	ldbu	r4,0(r3)
    3c68:	20803fcc 	andi	r2,r4,255
    3c6c:	1080201c 	xori	r2,r2,128
    3c70:	10bfe004 	addi	r2,r2,-128
    3c74:	10011c26 	beq	r2,zero,40e8 <___svfprintf_internal_r+0x4f0>
    3c78:	00c00044 	movi	r3,1
    3c7c:	a0c01426 	beq	r20,r3,3cd0 <___svfprintf_internal_r+0xd8>
    3c80:	1d000216 	blt	r3,r20,3c8c <___svfprintf_internal_r+0x94>
    3c84:	a0000626 	beq	r20,zero,3ca0 <___svfprintf_internal_r+0xa8>
    3c88:	00011306 	br	40d8 <___svfprintf_internal_r+0x4e0>
    3c8c:	01400084 	movi	r5,2
    3c90:	a1401d26 	beq	r20,r5,3d08 <___svfprintf_internal_r+0x110>
    3c94:	014000c4 	movi	r5,3
    3c98:	a1402926 	beq	r20,r5,3d40 <___svfprintf_internal_r+0x148>
    3c9c:	00010e06 	br	40d8 <___svfprintf_internal_r+0x4e0>
    3ca0:	01400944 	movi	r5,37
    3ca4:	1140fb26 	beq	r2,r5,4094 <___svfprintf_internal_r+0x49c>
    3ca8:	e0800117 	ldw	r2,4(fp)
    3cac:	d9000005 	stb	r4,0(sp)
    3cb0:	01c00044 	movi	r7,1
    3cb4:	d80d883a 	mov	r6,sp
    3cb8:	e00b883a 	mov	r5,fp
    3cbc:	9809883a 	mov	r4,r19
    3cc0:	103ee83a 	callr	r2
    3cc4:	1000d61e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3cc8:	84000044 	addi	r16,r16,1
    3ccc:	00010206 	br	40d8 <___svfprintf_internal_r+0x4e0>
    3cd0:	01400c04 	movi	r5,48
    3cd4:	1140f826 	beq	r2,r5,40b8 <___svfprintf_internal_r+0x4c0>
    3cd8:	01400944 	movi	r5,37
    3cdc:	11400a1e 	bne	r2,r5,3d08 <___svfprintf_internal_r+0x110>
    3ce0:	d8800005 	stb	r2,0(sp)
    3ce4:	e0800117 	ldw	r2,4(fp)
    3ce8:	a00f883a 	mov	r7,r20
    3cec:	d80d883a 	mov	r6,sp
    3cf0:	e00b883a 	mov	r5,fp
    3cf4:	9809883a 	mov	r4,r19
    3cf8:	103ee83a 	callr	r2
    3cfc:	1000c81e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3d00:	84000044 	addi	r16,r16,1
    3d04:	0000f306 	br	40d4 <___svfprintf_internal_r+0x4dc>
    3d08:	217ff404 	addi	r5,r4,-48
    3d0c:	29403fcc 	andi	r5,r5,255
    3d10:	00c00244 	movi	r3,9
    3d14:	19400736 	bltu	r3,r5,3d34 <___svfprintf_internal_r+0x13c>
    3d18:	00bfffc4 	movi	r2,-1
    3d1c:	88800226 	beq	r17,r2,3d28 <___svfprintf_internal_r+0x130>
    3d20:	8c4002a4 	muli	r17,r17,10
    3d24:	00000106 	br	3d2c <___svfprintf_internal_r+0x134>
    3d28:	0023883a 	mov	r17,zero
    3d2c:	2c63883a 	add	r17,r5,r17
    3d30:	0000e206 	br	40bc <___svfprintf_internal_r+0x4c4>
    3d34:	01400b84 	movi	r5,46
    3d38:	1140e426 	beq	r2,r5,40cc <___svfprintf_internal_r+0x4d4>
    3d3c:	05000084 	movi	r20,2
    3d40:	213ff404 	addi	r4,r4,-48
    3d44:	21003fcc 	andi	r4,r4,255
    3d48:	00c00244 	movi	r3,9
    3d4c:	19000736 	bltu	r3,r4,3d6c <___svfprintf_internal_r+0x174>
    3d50:	00bfffc4 	movi	r2,-1
    3d54:	90800226 	beq	r18,r2,3d60 <___svfprintf_internal_r+0x168>
    3d58:	948002a4 	muli	r18,r18,10
    3d5c:	00000106 	br	3d64 <___svfprintf_internal_r+0x16c>
    3d60:	0025883a 	mov	r18,zero
    3d64:	24a5883a 	add	r18,r4,r18
    3d68:	0000db06 	br	40d8 <___svfprintf_internal_r+0x4e0>
    3d6c:	00c01b04 	movi	r3,108
    3d70:	10c0d426 	beq	r2,r3,40c4 <___svfprintf_internal_r+0x4cc>
    3d74:	013fffc4 	movi	r4,-1
    3d78:	91000226 	beq	r18,r4,3d84 <___svfprintf_internal_r+0x18c>
    3d7c:	d8000b15 	stw	zero,44(sp)
    3d80:	00000106 	br	3d88 <___svfprintf_internal_r+0x190>
    3d84:	04800044 	movi	r18,1
    3d88:	01001a44 	movi	r4,105
    3d8c:	11001626 	beq	r2,r4,3de8 <___svfprintf_internal_r+0x1f0>
    3d90:	20800916 	blt	r4,r2,3db8 <___svfprintf_internal_r+0x1c0>
    3d94:	010018c4 	movi	r4,99
    3d98:	11008a26 	beq	r2,r4,3fc4 <___svfprintf_internal_r+0x3cc>
    3d9c:	01001904 	movi	r4,100
    3da0:	11001126 	beq	r2,r4,3de8 <___svfprintf_internal_r+0x1f0>
    3da4:	01001604 	movi	r4,88
    3da8:	1100ca1e 	bne	r2,r4,40d4 <___svfprintf_internal_r+0x4dc>
    3dac:	00c00044 	movi	r3,1
    3db0:	d8c00e15 	stw	r3,56(sp)
    3db4:	00001406 	br	3e08 <___svfprintf_internal_r+0x210>
    3db8:	01001cc4 	movi	r4,115
    3dbc:	11009a26 	beq	r2,r4,4028 <___svfprintf_internal_r+0x430>
    3dc0:	20800416 	blt	r4,r2,3dd4 <___svfprintf_internal_r+0x1dc>
    3dc4:	01001bc4 	movi	r4,111
    3dc8:	1100c21e 	bne	r2,r4,40d4 <___svfprintf_internal_r+0x4dc>
    3dcc:	05400204 	movi	r21,8
    3dd0:	00000e06 	br	3e0c <___svfprintf_internal_r+0x214>
    3dd4:	01001d44 	movi	r4,117
    3dd8:	11000c26 	beq	r2,r4,3e0c <___svfprintf_internal_r+0x214>
    3ddc:	01001e04 	movi	r4,120
    3de0:	11000926 	beq	r2,r4,3e08 <___svfprintf_internal_r+0x210>
    3de4:	0000bb06 	br	40d4 <___svfprintf_internal_r+0x4dc>
    3de8:	b5000104 	addi	r20,r22,4
    3dec:	b8000726 	beq	r23,zero,3e0c <___svfprintf_internal_r+0x214>
    3df0:	dd000d15 	stw	r20,52(sp)
    3df4:	b5800017 	ldw	r22,0(r22)
    3df8:	b000080e 	bge	r22,zero,3e1c <___svfprintf_internal_r+0x224>
    3dfc:	05adc83a 	sub	r22,zero,r22
    3e00:	02800044 	movi	r10,1
    3e04:	00000606 	br	3e20 <___svfprintf_internal_r+0x228>
    3e08:	05400404 	movi	r21,16
    3e0c:	b0c00104 	addi	r3,r22,4
    3e10:	d8c00d15 	stw	r3,52(sp)
    3e14:	b5800017 	ldw	r22,0(r22)
    3e18:	002f883a 	mov	r23,zero
    3e1c:	0015883a 	mov	r10,zero
    3e20:	d829883a 	mov	r20,sp
    3e24:	b0001426 	beq	r22,zero,3e78 <___svfprintf_internal_r+0x280>
    3e28:	b009883a 	mov	r4,r22
    3e2c:	a80b883a 	mov	r5,r21
    3e30:	da801015 	stw	r10,64(sp)
    3e34:	00018cc0 	call	18cc <__udivsi3>
    3e38:	1549383a 	mul	r4,r2,r21
    3e3c:	00c00244 	movi	r3,9
    3e40:	da801017 	ldw	r10,64(sp)
    3e44:	b12dc83a 	sub	r22,r22,r4
    3e48:	1d800216 	blt	r3,r22,3e54 <___svfprintf_internal_r+0x25c>
    3e4c:	b5800c04 	addi	r22,r22,48
    3e50:	00000506 	br	3e68 <___svfprintf_internal_r+0x270>
    3e54:	d8c00e17 	ldw	r3,56(sp)
    3e58:	18000226 	beq	r3,zero,3e64 <___svfprintf_internal_r+0x26c>
    3e5c:	b5800dc4 	addi	r22,r22,55
    3e60:	00000106 	br	3e68 <___svfprintf_internal_r+0x270>
    3e64:	b58015c4 	addi	r22,r22,87
    3e68:	a5800005 	stb	r22,0(r20)
    3e6c:	a5000044 	addi	r20,r20,1
    3e70:	102d883a 	mov	r22,r2
    3e74:	003feb06 	br	3e24 <__alt_mem_epcs+0xfffe2e24>
    3e78:	a6c7c83a 	sub	r3,r20,sp
    3e7c:	d8c00a15 	stw	r3,40(sp)
    3e80:	90c5c83a 	sub	r2,r18,r3
    3e84:	00800a0e 	bge	zero,r2,3eb0 <___svfprintf_internal_r+0x2b8>
    3e88:	a085883a 	add	r2,r20,r2
    3e8c:	01400c04 	movi	r5,48
    3e90:	d8c00917 	ldw	r3,36(sp)
    3e94:	a009883a 	mov	r4,r20
    3e98:	a0c0032e 	bgeu	r20,r3,3ea8 <___svfprintf_internal_r+0x2b0>
    3e9c:	a5000044 	addi	r20,r20,1
    3ea0:	21400005 	stb	r5,0(r4)
    3ea4:	a0bffa1e 	bne	r20,r2,3e90 <__alt_mem_epcs+0xfffe2e90>
    3ea8:	a6c7c83a 	sub	r3,r20,sp
    3eac:	d8c00a15 	stw	r3,40(sp)
    3eb0:	d8c00a17 	ldw	r3,40(sp)
    3eb4:	50d3883a 	add	r9,r10,r3
    3eb8:	d8c00b17 	ldw	r3,44(sp)
    3ebc:	8a6dc83a 	sub	r22,r17,r9
    3ec0:	18001726 	beq	r3,zero,3f20 <___svfprintf_internal_r+0x328>
    3ec4:	50000a26 	beq	r10,zero,3ef0 <___svfprintf_internal_r+0x2f8>
    3ec8:	00800b44 	movi	r2,45
    3ecc:	d8800805 	stb	r2,32(sp)
    3ed0:	e0800117 	ldw	r2,4(fp)
    3ed4:	01c00044 	movi	r7,1
    3ed8:	d9800804 	addi	r6,sp,32
    3edc:	e00b883a 	mov	r5,fp
    3ee0:	9809883a 	mov	r4,r19
    3ee4:	103ee83a 	callr	r2
    3ee8:	10004d1e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3eec:	84000044 	addi	r16,r16,1
    3ef0:	0580070e 	bge	zero,r22,3f10 <___svfprintf_internal_r+0x318>
    3ef4:	b00f883a 	mov	r7,r22
    3ef8:	01800c04 	movi	r6,48
    3efc:	e00b883a 	mov	r5,fp
    3f00:	9809883a 	mov	r4,r19
    3f04:	0003b8c0 	call	3b8c <print_repeat>
    3f08:	1000451e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3f0c:	85a1883a 	add	r16,r16,r22
    3f10:	d8c00a17 	ldw	r3,40(sp)
    3f14:	a013883a 	mov	r9,r20
    3f18:	1d2dc83a 	sub	r22,r3,r20
    3f1c:	00002206 	br	3fa8 <___svfprintf_internal_r+0x3b0>
    3f20:	0580090e 	bge	zero,r22,3f48 <___svfprintf_internal_r+0x350>
    3f24:	b00f883a 	mov	r7,r22
    3f28:	01800804 	movi	r6,32
    3f2c:	e00b883a 	mov	r5,fp
    3f30:	9809883a 	mov	r4,r19
    3f34:	da801015 	stw	r10,64(sp)
    3f38:	0003b8c0 	call	3b8c <print_repeat>
    3f3c:	da801017 	ldw	r10,64(sp)
    3f40:	1000371e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3f44:	85a1883a 	add	r16,r16,r22
    3f48:	503ff126 	beq	r10,zero,3f10 <__alt_mem_epcs+0xfffe2f10>
    3f4c:	00800b44 	movi	r2,45
    3f50:	d8800805 	stb	r2,32(sp)
    3f54:	e0800117 	ldw	r2,4(fp)
    3f58:	01c00044 	movi	r7,1
    3f5c:	d9800804 	addi	r6,sp,32
    3f60:	e00b883a 	mov	r5,fp
    3f64:	9809883a 	mov	r4,r19
    3f68:	103ee83a 	callr	r2
    3f6c:	10002c1e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3f70:	84000044 	addi	r16,r16,1
    3f74:	003fe606 	br	3f10 <__alt_mem_epcs+0xfffe2f10>
    3f78:	4a7fffc4 	addi	r9,r9,-1
    3f7c:	48800003 	ldbu	r2,0(r9)
    3f80:	01c00044 	movi	r7,1
    3f84:	d9800804 	addi	r6,sp,32
    3f88:	d8800805 	stb	r2,32(sp)
    3f8c:	e0800117 	ldw	r2,4(fp)
    3f90:	e00b883a 	mov	r5,fp
    3f94:	da401015 	stw	r9,64(sp)
    3f98:	9809883a 	mov	r4,r19
    3f9c:	103ee83a 	callr	r2
    3fa0:	da401017 	ldw	r9,64(sp)
    3fa4:	10001e1e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3fa8:	8245c83a 	sub	r2,r16,r9
    3fac:	4d89883a 	add	r4,r9,r22
    3fb0:	a085883a 	add	r2,r20,r2
    3fb4:	013ff016 	blt	zero,r4,3f78 <__alt_mem_epcs+0xfffe2f78>
    3fb8:	1021883a 	mov	r16,r2
    3fbc:	dd800d17 	ldw	r22,52(sp)
    3fc0:	00004406 	br	40d4 <___svfprintf_internal_r+0x4dc>
    3fc4:	00800044 	movi	r2,1
    3fc8:	1440080e 	bge	r2,r17,3fec <___svfprintf_internal_r+0x3f4>
    3fcc:	8d3fffc4 	addi	r20,r17,-1
    3fd0:	a00f883a 	mov	r7,r20
    3fd4:	01800804 	movi	r6,32
    3fd8:	e00b883a 	mov	r5,fp
    3fdc:	9809883a 	mov	r4,r19
    3fe0:	0003b8c0 	call	3b8c <print_repeat>
    3fe4:	10000e1e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    3fe8:	8521883a 	add	r16,r16,r20
    3fec:	b0800017 	ldw	r2,0(r22)
    3ff0:	01c00044 	movi	r7,1
    3ff4:	d80d883a 	mov	r6,sp
    3ff8:	d8800005 	stb	r2,0(sp)
    3ffc:	e0800117 	ldw	r2,4(fp)
    4000:	e00b883a 	mov	r5,fp
    4004:	9809883a 	mov	r4,r19
    4008:	b5000104 	addi	r20,r22,4
    400c:	103ee83a 	callr	r2
    4010:	1000031e 	bne	r2,zero,4020 <___svfprintf_internal_r+0x428>
    4014:	84000044 	addi	r16,r16,1
    4018:	a02d883a 	mov	r22,r20
    401c:	00002d06 	br	40d4 <___svfprintf_internal_r+0x4dc>
    4020:	00bfffc4 	movi	r2,-1
    4024:	00003106 	br	40ec <___svfprintf_internal_r+0x4f4>
    4028:	b5000017 	ldw	r20,0(r22)
    402c:	b0c00104 	addi	r3,r22,4
    4030:	d8c00a15 	stw	r3,40(sp)
    4034:	a009883a 	mov	r4,r20
    4038:	0003b700 	call	3b70 <strlen>
    403c:	8893c83a 	sub	r9,r17,r2
    4040:	102d883a 	mov	r22,r2
    4044:	0240090e 	bge	zero,r9,406c <___svfprintf_internal_r+0x474>
    4048:	480f883a 	mov	r7,r9
    404c:	01800804 	movi	r6,32
    4050:	e00b883a 	mov	r5,fp
    4054:	9809883a 	mov	r4,r19
    4058:	da401015 	stw	r9,64(sp)
    405c:	0003b8c0 	call	3b8c <print_repeat>
    4060:	da401017 	ldw	r9,64(sp)
    4064:	103fee1e 	bne	r2,zero,4020 <__alt_mem_epcs+0xfffe3020>
    4068:	8261883a 	add	r16,r16,r9
    406c:	e0800117 	ldw	r2,4(fp)
    4070:	b00f883a 	mov	r7,r22
    4074:	a00d883a 	mov	r6,r20
    4078:	e00b883a 	mov	r5,fp
    407c:	9809883a 	mov	r4,r19
    4080:	103ee83a 	callr	r2
    4084:	103fe61e 	bne	r2,zero,4020 <__alt_mem_epcs+0xfffe3020>
    4088:	85a1883a 	add	r16,r16,r22
    408c:	dd800a17 	ldw	r22,40(sp)
    4090:	00001006 	br	40d4 <___svfprintf_internal_r+0x4dc>
    4094:	05c00044 	movi	r23,1
    4098:	04bfffc4 	movi	r18,-1
    409c:	d8000e15 	stw	zero,56(sp)
    40a0:	05400284 	movi	r21,10
    40a4:	9023883a 	mov	r17,r18
    40a8:	d8000c15 	stw	zero,48(sp)
    40ac:	d8000b15 	stw	zero,44(sp)
    40b0:	b829883a 	mov	r20,r23
    40b4:	00000806 	br	40d8 <___svfprintf_internal_r+0x4e0>
    40b8:	dd000b15 	stw	r20,44(sp)
    40bc:	05000084 	movi	r20,2
    40c0:	00000506 	br	40d8 <___svfprintf_internal_r+0x4e0>
    40c4:	00c00044 	movi	r3,1
    40c8:	d8c00c15 	stw	r3,48(sp)
    40cc:	050000c4 	movi	r20,3
    40d0:	00000106 	br	40d8 <___svfprintf_internal_r+0x4e0>
    40d4:	0029883a 	mov	r20,zero
    40d8:	d8c00f17 	ldw	r3,60(sp)
    40dc:	18c00044 	addi	r3,r3,1
    40e0:	d8c00f15 	stw	r3,60(sp)
    40e4:	003ede06 	br	3c60 <__alt_mem_epcs+0xfffe2c60>
    40e8:	8005883a 	mov	r2,r16
    40ec:	dfc01a17 	ldw	ra,104(sp)
    40f0:	df001917 	ldw	fp,100(sp)
    40f4:	ddc01817 	ldw	r23,96(sp)
    40f8:	dd801717 	ldw	r22,92(sp)
    40fc:	dd401617 	ldw	r21,88(sp)
    4100:	dd001517 	ldw	r20,84(sp)
    4104:	dcc01417 	ldw	r19,80(sp)
    4108:	dc801317 	ldw	r18,76(sp)
    410c:	dc401217 	ldw	r17,72(sp)
    4110:	dc001117 	ldw	r16,68(sp)
    4114:	dec01b04 	addi	sp,sp,108
    4118:	f800283a 	ret

0000411c <__vfprintf_internal_unused>:
    411c:	00800034 	movhi	r2,0
    4120:	1099d904 	addi	r2,r2,26468
    4124:	300f883a 	mov	r7,r6
    4128:	280d883a 	mov	r6,r5
    412c:	200b883a 	mov	r5,r4
    4130:	11000017 	ldw	r4,0(r2)
    4134:	0003bf81 	jmpi	3bf8 <___svfprintf_internal_r>

00004138 <print_repeat>:
    4138:	defffb04 	addi	sp,sp,-20
    413c:	dc800315 	stw	r18,12(sp)
    4140:	dc400215 	stw	r17,8(sp)
    4144:	dc000115 	stw	r16,4(sp)
    4148:	dfc00415 	stw	ra,16(sp)
    414c:	2025883a 	mov	r18,r4
    4150:	2823883a 	mov	r17,r5
    4154:	d9800005 	stb	r6,0(sp)
    4158:	3821883a 	mov	r16,r7
    415c:	04000a0e 	bge	zero,r16,4188 <print_repeat+0x50>
    4160:	88800117 	ldw	r2,4(r17)
    4164:	01c00044 	movi	r7,1
    4168:	d80d883a 	mov	r6,sp
    416c:	880b883a 	mov	r5,r17
    4170:	9009883a 	mov	r4,r18
    4174:	103ee83a 	callr	r2
    4178:	843fffc4 	addi	r16,r16,-1
    417c:	103ff726 	beq	r2,zero,415c <__alt_mem_epcs+0xfffe315c>
    4180:	00bfffc4 	movi	r2,-1
    4184:	00000106 	br	418c <print_repeat+0x54>
    4188:	0005883a 	mov	r2,zero
    418c:	dfc00417 	ldw	ra,16(sp)
    4190:	dc800317 	ldw	r18,12(sp)
    4194:	dc400217 	ldw	r17,8(sp)
    4198:	dc000117 	ldw	r16,4(sp)
    419c:	dec00504 	addi	sp,sp,20
    41a0:	f800283a 	ret

000041a4 <___vfprintf_internal_r>:
    41a4:	deffe504 	addi	sp,sp,-108
    41a8:	d8c00804 	addi	r3,sp,32
    41ac:	df001915 	stw	fp,100(sp)
    41b0:	ddc01815 	stw	r23,96(sp)
    41b4:	dd801715 	stw	r22,92(sp)
    41b8:	dd401615 	stw	r21,88(sp)
    41bc:	dd001515 	stw	r20,84(sp)
    41c0:	dcc01415 	stw	r19,80(sp)
    41c4:	dc801315 	stw	r18,76(sp)
    41c8:	dc401215 	stw	r17,72(sp)
    41cc:	dc001115 	stw	r16,68(sp)
    41d0:	dfc01a15 	stw	ra,104(sp)
    41d4:	2027883a 	mov	r19,r4
    41d8:	2839883a 	mov	fp,r5
    41dc:	382d883a 	mov	r22,r7
    41e0:	d9800f15 	stw	r6,60(sp)
    41e4:	0021883a 	mov	r16,zero
    41e8:	d8000e15 	stw	zero,56(sp)
    41ec:	002f883a 	mov	r23,zero
    41f0:	002b883a 	mov	r21,zero
    41f4:	0025883a 	mov	r18,zero
    41f8:	0023883a 	mov	r17,zero
    41fc:	d8000c15 	stw	zero,48(sp)
    4200:	d8000b15 	stw	zero,44(sp)
    4204:	0029883a 	mov	r20,zero
    4208:	d8c00915 	stw	r3,36(sp)
    420c:	d8c00f17 	ldw	r3,60(sp)
    4210:	19000003 	ldbu	r4,0(r3)
    4214:	20803fcc 	andi	r2,r4,255
    4218:	1080201c 	xori	r2,r2,128
    421c:	10bfe004 	addi	r2,r2,-128
    4220:	10011c26 	beq	r2,zero,4694 <___vfprintf_internal_r+0x4f0>
    4224:	00c00044 	movi	r3,1
    4228:	a0c01426 	beq	r20,r3,427c <___vfprintf_internal_r+0xd8>
    422c:	1d000216 	blt	r3,r20,4238 <___vfprintf_internal_r+0x94>
    4230:	a0000626 	beq	r20,zero,424c <___vfprintf_internal_r+0xa8>
    4234:	00011306 	br	4684 <___vfprintf_internal_r+0x4e0>
    4238:	01400084 	movi	r5,2
    423c:	a1401d26 	beq	r20,r5,42b4 <___vfprintf_internal_r+0x110>
    4240:	014000c4 	movi	r5,3
    4244:	a1402926 	beq	r20,r5,42ec <___vfprintf_internal_r+0x148>
    4248:	00010e06 	br	4684 <___vfprintf_internal_r+0x4e0>
    424c:	01400944 	movi	r5,37
    4250:	1140fb26 	beq	r2,r5,4640 <___vfprintf_internal_r+0x49c>
    4254:	e0800117 	ldw	r2,4(fp)
    4258:	d9000005 	stb	r4,0(sp)
    425c:	01c00044 	movi	r7,1
    4260:	d80d883a 	mov	r6,sp
    4264:	e00b883a 	mov	r5,fp
    4268:	9809883a 	mov	r4,r19
    426c:	103ee83a 	callr	r2
    4270:	1000d61e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    4274:	84000044 	addi	r16,r16,1
    4278:	00010206 	br	4684 <___vfprintf_internal_r+0x4e0>
    427c:	01400c04 	movi	r5,48
    4280:	1140f826 	beq	r2,r5,4664 <___vfprintf_internal_r+0x4c0>
    4284:	01400944 	movi	r5,37
    4288:	11400a1e 	bne	r2,r5,42b4 <___vfprintf_internal_r+0x110>
    428c:	d8800005 	stb	r2,0(sp)
    4290:	e0800117 	ldw	r2,4(fp)
    4294:	a00f883a 	mov	r7,r20
    4298:	d80d883a 	mov	r6,sp
    429c:	e00b883a 	mov	r5,fp
    42a0:	9809883a 	mov	r4,r19
    42a4:	103ee83a 	callr	r2
    42a8:	1000c81e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    42ac:	84000044 	addi	r16,r16,1
    42b0:	0000f306 	br	4680 <___vfprintf_internal_r+0x4dc>
    42b4:	217ff404 	addi	r5,r4,-48
    42b8:	29403fcc 	andi	r5,r5,255
    42bc:	00c00244 	movi	r3,9
    42c0:	19400736 	bltu	r3,r5,42e0 <___vfprintf_internal_r+0x13c>
    42c4:	00bfffc4 	movi	r2,-1
    42c8:	88800226 	beq	r17,r2,42d4 <___vfprintf_internal_r+0x130>
    42cc:	8c4002a4 	muli	r17,r17,10
    42d0:	00000106 	br	42d8 <___vfprintf_internal_r+0x134>
    42d4:	0023883a 	mov	r17,zero
    42d8:	2c63883a 	add	r17,r5,r17
    42dc:	0000e206 	br	4668 <___vfprintf_internal_r+0x4c4>
    42e0:	01400b84 	movi	r5,46
    42e4:	1140e426 	beq	r2,r5,4678 <___vfprintf_internal_r+0x4d4>
    42e8:	05000084 	movi	r20,2
    42ec:	213ff404 	addi	r4,r4,-48
    42f0:	21003fcc 	andi	r4,r4,255
    42f4:	00c00244 	movi	r3,9
    42f8:	19000736 	bltu	r3,r4,4318 <___vfprintf_internal_r+0x174>
    42fc:	00bfffc4 	movi	r2,-1
    4300:	90800226 	beq	r18,r2,430c <___vfprintf_internal_r+0x168>
    4304:	948002a4 	muli	r18,r18,10
    4308:	00000106 	br	4310 <___vfprintf_internal_r+0x16c>
    430c:	0025883a 	mov	r18,zero
    4310:	24a5883a 	add	r18,r4,r18
    4314:	0000db06 	br	4684 <___vfprintf_internal_r+0x4e0>
    4318:	00c01b04 	movi	r3,108
    431c:	10c0d426 	beq	r2,r3,4670 <___vfprintf_internal_r+0x4cc>
    4320:	013fffc4 	movi	r4,-1
    4324:	91000226 	beq	r18,r4,4330 <___vfprintf_internal_r+0x18c>
    4328:	d8000b15 	stw	zero,44(sp)
    432c:	00000106 	br	4334 <___vfprintf_internal_r+0x190>
    4330:	04800044 	movi	r18,1
    4334:	01001a44 	movi	r4,105
    4338:	11001626 	beq	r2,r4,4394 <___vfprintf_internal_r+0x1f0>
    433c:	20800916 	blt	r4,r2,4364 <___vfprintf_internal_r+0x1c0>
    4340:	010018c4 	movi	r4,99
    4344:	11008a26 	beq	r2,r4,4570 <___vfprintf_internal_r+0x3cc>
    4348:	01001904 	movi	r4,100
    434c:	11001126 	beq	r2,r4,4394 <___vfprintf_internal_r+0x1f0>
    4350:	01001604 	movi	r4,88
    4354:	1100ca1e 	bne	r2,r4,4680 <___vfprintf_internal_r+0x4dc>
    4358:	00c00044 	movi	r3,1
    435c:	d8c00e15 	stw	r3,56(sp)
    4360:	00001406 	br	43b4 <___vfprintf_internal_r+0x210>
    4364:	01001cc4 	movi	r4,115
    4368:	11009a26 	beq	r2,r4,45d4 <___vfprintf_internal_r+0x430>
    436c:	20800416 	blt	r4,r2,4380 <___vfprintf_internal_r+0x1dc>
    4370:	01001bc4 	movi	r4,111
    4374:	1100c21e 	bne	r2,r4,4680 <___vfprintf_internal_r+0x4dc>
    4378:	05400204 	movi	r21,8
    437c:	00000e06 	br	43b8 <___vfprintf_internal_r+0x214>
    4380:	01001d44 	movi	r4,117
    4384:	11000c26 	beq	r2,r4,43b8 <___vfprintf_internal_r+0x214>
    4388:	01001e04 	movi	r4,120
    438c:	11000926 	beq	r2,r4,43b4 <___vfprintf_internal_r+0x210>
    4390:	0000bb06 	br	4680 <___vfprintf_internal_r+0x4dc>
    4394:	b5000104 	addi	r20,r22,4
    4398:	b8000726 	beq	r23,zero,43b8 <___vfprintf_internal_r+0x214>
    439c:	dd000d15 	stw	r20,52(sp)
    43a0:	b5800017 	ldw	r22,0(r22)
    43a4:	b000080e 	bge	r22,zero,43c8 <___vfprintf_internal_r+0x224>
    43a8:	05adc83a 	sub	r22,zero,r22
    43ac:	02800044 	movi	r10,1
    43b0:	00000606 	br	43cc <___vfprintf_internal_r+0x228>
    43b4:	05400404 	movi	r21,16
    43b8:	b0c00104 	addi	r3,r22,4
    43bc:	d8c00d15 	stw	r3,52(sp)
    43c0:	b5800017 	ldw	r22,0(r22)
    43c4:	002f883a 	mov	r23,zero
    43c8:	0015883a 	mov	r10,zero
    43cc:	d829883a 	mov	r20,sp
    43d0:	b0001426 	beq	r22,zero,4424 <___vfprintf_internal_r+0x280>
    43d4:	b009883a 	mov	r4,r22
    43d8:	a80b883a 	mov	r5,r21
    43dc:	da801015 	stw	r10,64(sp)
    43e0:	00018cc0 	call	18cc <__udivsi3>
    43e4:	1549383a 	mul	r4,r2,r21
    43e8:	00c00244 	movi	r3,9
    43ec:	da801017 	ldw	r10,64(sp)
    43f0:	b12dc83a 	sub	r22,r22,r4
    43f4:	1d800216 	blt	r3,r22,4400 <___vfprintf_internal_r+0x25c>
    43f8:	b5800c04 	addi	r22,r22,48
    43fc:	00000506 	br	4414 <___vfprintf_internal_r+0x270>
    4400:	d8c00e17 	ldw	r3,56(sp)
    4404:	18000226 	beq	r3,zero,4410 <___vfprintf_internal_r+0x26c>
    4408:	b5800dc4 	addi	r22,r22,55
    440c:	00000106 	br	4414 <___vfprintf_internal_r+0x270>
    4410:	b58015c4 	addi	r22,r22,87
    4414:	a5800005 	stb	r22,0(r20)
    4418:	a5000044 	addi	r20,r20,1
    441c:	102d883a 	mov	r22,r2
    4420:	003feb06 	br	43d0 <__alt_mem_epcs+0xfffe33d0>
    4424:	a6c7c83a 	sub	r3,r20,sp
    4428:	d8c00a15 	stw	r3,40(sp)
    442c:	90c5c83a 	sub	r2,r18,r3
    4430:	00800a0e 	bge	zero,r2,445c <___vfprintf_internal_r+0x2b8>
    4434:	a085883a 	add	r2,r20,r2
    4438:	01400c04 	movi	r5,48
    443c:	d8c00917 	ldw	r3,36(sp)
    4440:	a009883a 	mov	r4,r20
    4444:	a0c0032e 	bgeu	r20,r3,4454 <___vfprintf_internal_r+0x2b0>
    4448:	a5000044 	addi	r20,r20,1
    444c:	21400005 	stb	r5,0(r4)
    4450:	a0bffa1e 	bne	r20,r2,443c <__alt_mem_epcs+0xfffe343c>
    4454:	a6c7c83a 	sub	r3,r20,sp
    4458:	d8c00a15 	stw	r3,40(sp)
    445c:	d8c00a17 	ldw	r3,40(sp)
    4460:	50d3883a 	add	r9,r10,r3
    4464:	d8c00b17 	ldw	r3,44(sp)
    4468:	8a6dc83a 	sub	r22,r17,r9
    446c:	18001726 	beq	r3,zero,44cc <___vfprintf_internal_r+0x328>
    4470:	50000a26 	beq	r10,zero,449c <___vfprintf_internal_r+0x2f8>
    4474:	00800b44 	movi	r2,45
    4478:	d8800805 	stb	r2,32(sp)
    447c:	e0800117 	ldw	r2,4(fp)
    4480:	01c00044 	movi	r7,1
    4484:	d9800804 	addi	r6,sp,32
    4488:	e00b883a 	mov	r5,fp
    448c:	9809883a 	mov	r4,r19
    4490:	103ee83a 	callr	r2
    4494:	10004d1e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    4498:	84000044 	addi	r16,r16,1
    449c:	0580070e 	bge	zero,r22,44bc <___vfprintf_internal_r+0x318>
    44a0:	b00f883a 	mov	r7,r22
    44a4:	01800c04 	movi	r6,48
    44a8:	e00b883a 	mov	r5,fp
    44ac:	9809883a 	mov	r4,r19
    44b0:	00041380 	call	4138 <print_repeat>
    44b4:	1000451e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    44b8:	85a1883a 	add	r16,r16,r22
    44bc:	d8c00a17 	ldw	r3,40(sp)
    44c0:	a013883a 	mov	r9,r20
    44c4:	1d2dc83a 	sub	r22,r3,r20
    44c8:	00002206 	br	4554 <___vfprintf_internal_r+0x3b0>
    44cc:	0580090e 	bge	zero,r22,44f4 <___vfprintf_internal_r+0x350>
    44d0:	b00f883a 	mov	r7,r22
    44d4:	01800804 	movi	r6,32
    44d8:	e00b883a 	mov	r5,fp
    44dc:	9809883a 	mov	r4,r19
    44e0:	da801015 	stw	r10,64(sp)
    44e4:	00041380 	call	4138 <print_repeat>
    44e8:	da801017 	ldw	r10,64(sp)
    44ec:	1000371e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    44f0:	85a1883a 	add	r16,r16,r22
    44f4:	503ff126 	beq	r10,zero,44bc <__alt_mem_epcs+0xfffe34bc>
    44f8:	00800b44 	movi	r2,45
    44fc:	d8800805 	stb	r2,32(sp)
    4500:	e0800117 	ldw	r2,4(fp)
    4504:	01c00044 	movi	r7,1
    4508:	d9800804 	addi	r6,sp,32
    450c:	e00b883a 	mov	r5,fp
    4510:	9809883a 	mov	r4,r19
    4514:	103ee83a 	callr	r2
    4518:	10002c1e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    451c:	84000044 	addi	r16,r16,1
    4520:	003fe606 	br	44bc <__alt_mem_epcs+0xfffe34bc>
    4524:	4a7fffc4 	addi	r9,r9,-1
    4528:	48800003 	ldbu	r2,0(r9)
    452c:	01c00044 	movi	r7,1
    4530:	d9800804 	addi	r6,sp,32
    4534:	d8800805 	stb	r2,32(sp)
    4538:	e0800117 	ldw	r2,4(fp)
    453c:	e00b883a 	mov	r5,fp
    4540:	da401015 	stw	r9,64(sp)
    4544:	9809883a 	mov	r4,r19
    4548:	103ee83a 	callr	r2
    454c:	da401017 	ldw	r9,64(sp)
    4550:	10001e1e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    4554:	8245c83a 	sub	r2,r16,r9
    4558:	4d89883a 	add	r4,r9,r22
    455c:	a085883a 	add	r2,r20,r2
    4560:	013ff016 	blt	zero,r4,4524 <__alt_mem_epcs+0xfffe3524>
    4564:	1021883a 	mov	r16,r2
    4568:	dd800d17 	ldw	r22,52(sp)
    456c:	00004406 	br	4680 <___vfprintf_internal_r+0x4dc>
    4570:	00800044 	movi	r2,1
    4574:	1440080e 	bge	r2,r17,4598 <___vfprintf_internal_r+0x3f4>
    4578:	8d3fffc4 	addi	r20,r17,-1
    457c:	a00f883a 	mov	r7,r20
    4580:	01800804 	movi	r6,32
    4584:	e00b883a 	mov	r5,fp
    4588:	9809883a 	mov	r4,r19
    458c:	00041380 	call	4138 <print_repeat>
    4590:	10000e1e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    4594:	8521883a 	add	r16,r16,r20
    4598:	b0800017 	ldw	r2,0(r22)
    459c:	01c00044 	movi	r7,1
    45a0:	d80d883a 	mov	r6,sp
    45a4:	d8800005 	stb	r2,0(sp)
    45a8:	e0800117 	ldw	r2,4(fp)
    45ac:	e00b883a 	mov	r5,fp
    45b0:	9809883a 	mov	r4,r19
    45b4:	b5000104 	addi	r20,r22,4
    45b8:	103ee83a 	callr	r2
    45bc:	1000031e 	bne	r2,zero,45cc <___vfprintf_internal_r+0x428>
    45c0:	84000044 	addi	r16,r16,1
    45c4:	a02d883a 	mov	r22,r20
    45c8:	00002d06 	br	4680 <___vfprintf_internal_r+0x4dc>
    45cc:	00bfffc4 	movi	r2,-1
    45d0:	00003106 	br	4698 <___vfprintf_internal_r+0x4f4>
    45d4:	b5000017 	ldw	r20,0(r22)
    45d8:	b0c00104 	addi	r3,r22,4
    45dc:	d8c00a15 	stw	r3,40(sp)
    45e0:	a009883a 	mov	r4,r20
    45e4:	0003b700 	call	3b70 <strlen>
    45e8:	8893c83a 	sub	r9,r17,r2
    45ec:	102d883a 	mov	r22,r2
    45f0:	0240090e 	bge	zero,r9,4618 <___vfprintf_internal_r+0x474>
    45f4:	480f883a 	mov	r7,r9
    45f8:	01800804 	movi	r6,32
    45fc:	e00b883a 	mov	r5,fp
    4600:	9809883a 	mov	r4,r19
    4604:	da401015 	stw	r9,64(sp)
    4608:	00041380 	call	4138 <print_repeat>
    460c:	da401017 	ldw	r9,64(sp)
    4610:	103fee1e 	bne	r2,zero,45cc <__alt_mem_epcs+0xfffe35cc>
    4614:	8261883a 	add	r16,r16,r9
    4618:	e0800117 	ldw	r2,4(fp)
    461c:	b00f883a 	mov	r7,r22
    4620:	a00d883a 	mov	r6,r20
    4624:	e00b883a 	mov	r5,fp
    4628:	9809883a 	mov	r4,r19
    462c:	103ee83a 	callr	r2
    4630:	103fe61e 	bne	r2,zero,45cc <__alt_mem_epcs+0xfffe35cc>
    4634:	85a1883a 	add	r16,r16,r22
    4638:	dd800a17 	ldw	r22,40(sp)
    463c:	00001006 	br	4680 <___vfprintf_internal_r+0x4dc>
    4640:	05c00044 	movi	r23,1
    4644:	04bfffc4 	movi	r18,-1
    4648:	d8000e15 	stw	zero,56(sp)
    464c:	05400284 	movi	r21,10
    4650:	9023883a 	mov	r17,r18
    4654:	d8000c15 	stw	zero,48(sp)
    4658:	d8000b15 	stw	zero,44(sp)
    465c:	b829883a 	mov	r20,r23
    4660:	00000806 	br	4684 <___vfprintf_internal_r+0x4e0>
    4664:	dd000b15 	stw	r20,44(sp)
    4668:	05000084 	movi	r20,2
    466c:	00000506 	br	4684 <___vfprintf_internal_r+0x4e0>
    4670:	00c00044 	movi	r3,1
    4674:	d8c00c15 	stw	r3,48(sp)
    4678:	050000c4 	movi	r20,3
    467c:	00000106 	br	4684 <___vfprintf_internal_r+0x4e0>
    4680:	0029883a 	mov	r20,zero
    4684:	d8c00f17 	ldw	r3,60(sp)
    4688:	18c00044 	addi	r3,r3,1
    468c:	d8c00f15 	stw	r3,60(sp)
    4690:	003ede06 	br	420c <__alt_mem_epcs+0xfffe320c>
    4694:	8005883a 	mov	r2,r16
    4698:	dfc01a17 	ldw	ra,104(sp)
    469c:	df001917 	ldw	fp,100(sp)
    46a0:	ddc01817 	ldw	r23,96(sp)
    46a4:	dd801717 	ldw	r22,92(sp)
    46a8:	dd401617 	ldw	r21,88(sp)
    46ac:	dd001517 	ldw	r20,84(sp)
    46b0:	dcc01417 	ldw	r19,80(sp)
    46b4:	dc801317 	ldw	r18,76(sp)
    46b8:	dc401217 	ldw	r17,72(sp)
    46bc:	dc001117 	ldw	r16,68(sp)
    46c0:	dec01b04 	addi	sp,sp,108
    46c4:	f800283a 	ret

000046c8 <__vfprintf_internal>:
    46c8:	00800034 	movhi	r2,0
    46cc:	1099d904 	addi	r2,r2,26468
    46d0:	300f883a 	mov	r7,r6
    46d4:	280d883a 	mov	r6,r5
    46d8:	200b883a 	mov	r5,r4
    46dc:	11000017 	ldw	r4,0(r2)
    46e0:	00041a41 	jmpi	41a4 <___vfprintf_internal_r>

000046e4 <__sfvwrite_small_dev>:
    46e4:	2880000b 	ldhu	r2,0(r5)
    46e8:	1080020c 	andi	r2,r2,8
    46ec:	10002126 	beq	r2,zero,4774 <__sfvwrite_small_dev+0x90>
    46f0:	2880008f 	ldh	r2,2(r5)
    46f4:	defffa04 	addi	sp,sp,-24
    46f8:	dc000015 	stw	r16,0(sp)
    46fc:	dfc00515 	stw	ra,20(sp)
    4700:	dd000415 	stw	r20,16(sp)
    4704:	dcc00315 	stw	r19,12(sp)
    4708:	dc800215 	stw	r18,8(sp)
    470c:	dc400115 	stw	r17,4(sp)
    4710:	2821883a 	mov	r16,r5
    4714:	10001216 	blt	r2,zero,4760 <__sfvwrite_small_dev+0x7c>
    4718:	2027883a 	mov	r19,r4
    471c:	3025883a 	mov	r18,r6
    4720:	3823883a 	mov	r17,r7
    4724:	05010004 	movi	r20,1024
    4728:	04400b0e 	bge	zero,r17,4758 <__sfvwrite_small_dev+0x74>
    472c:	880f883a 	mov	r7,r17
    4730:	a440010e 	bge	r20,r17,4738 <__sfvwrite_small_dev+0x54>
    4734:	01c10004 	movi	r7,1024
    4738:	8140008f 	ldh	r5,2(r16)
    473c:	900d883a 	mov	r6,r18
    4740:	9809883a 	mov	r4,r19
    4744:	00049500 	call	4950 <_write_r>
    4748:	0080050e 	bge	zero,r2,4760 <__sfvwrite_small_dev+0x7c>
    474c:	88a3c83a 	sub	r17,r17,r2
    4750:	90a5883a 	add	r18,r18,r2
    4754:	003ff406 	br	4728 <__alt_mem_epcs+0xfffe3728>
    4758:	0005883a 	mov	r2,zero
    475c:	00000706 	br	477c <__sfvwrite_small_dev+0x98>
    4760:	8080000b 	ldhu	r2,0(r16)
    4764:	10801014 	ori	r2,r2,64
    4768:	8080000d 	sth	r2,0(r16)
    476c:	00bfffc4 	movi	r2,-1
    4770:	00000206 	br	477c <__sfvwrite_small_dev+0x98>
    4774:	00bfffc4 	movi	r2,-1
    4778:	f800283a 	ret
    477c:	dfc00517 	ldw	ra,20(sp)
    4780:	dd000417 	ldw	r20,16(sp)
    4784:	dcc00317 	ldw	r19,12(sp)
    4788:	dc800217 	ldw	r18,8(sp)
    478c:	dc400117 	ldw	r17,4(sp)
    4790:	dc000017 	ldw	r16,0(sp)
    4794:	dec00604 	addi	sp,sp,24
    4798:	f800283a 	ret

0000479c <__sfvwrite_small_str>:
    479c:	2880000b 	ldhu	r2,0(r5)
    47a0:	10c0020c 	andi	r3,r2,8
    47a4:	18002026 	beq	r3,zero,4828 <__sfvwrite_small_str+0x8c>
    47a8:	28c0008f 	ldh	r3,2(r5)
    47ac:	defffd04 	addi	sp,sp,-12
    47b0:	dc000015 	stw	r16,0(sp)
    47b4:	dfc00215 	stw	ra,8(sp)
    47b8:	dc400115 	stw	r17,4(sp)
    47bc:	2821883a 	mov	r16,r5
    47c0:	1800150e 	bge	r3,zero,4818 <__sfvwrite_small_str+0x7c>
    47c4:	10c0800c 	andi	r3,r2,512
    47c8:	18001326 	beq	r3,zero,4818 <__sfvwrite_small_str+0x7c>
    47cc:	2c400517 	ldw	r17,20(r5)
    47d0:	89c0030e 	bge	r17,r7,47e0 <__sfvwrite_small_str+0x44>
    47d4:	10c0200c 	andi	r3,r2,128
    47d8:	18000326 	beq	r3,zero,47e8 <__sfvwrite_small_str+0x4c>
    47dc:	00000e06 	br	4818 <__sfvwrite_small_str+0x7c>
    47e0:	3c40010e 	bge	r7,r17,47e8 <__sfvwrite_small_str+0x4c>
    47e4:	3823883a 	mov	r17,r7
    47e8:	81000417 	ldw	r4,16(r16)
    47ec:	300b883a 	mov	r5,r6
    47f0:	880d883a 	mov	r6,r17
    47f4:	00048440 	call	4844 <memmove>
    47f8:	80800517 	ldw	r2,20(r16)
    47fc:	1445c83a 	sub	r2,r2,r17
    4800:	80800515 	stw	r2,20(r16)
    4804:	80800417 	ldw	r2,16(r16)
    4808:	1463883a 	add	r17,r2,r17
    480c:	84400415 	stw	r17,16(r16)
    4810:	0005883a 	mov	r2,zero
    4814:	00000606 	br	4830 <__sfvwrite_small_str+0x94>
    4818:	10801014 	ori	r2,r2,64
    481c:	8080000d 	sth	r2,0(r16)
    4820:	00bfffc4 	movi	r2,-1
    4824:	00000206 	br	4830 <__sfvwrite_small_str+0x94>
    4828:	00bfffc4 	movi	r2,-1
    482c:	f800283a 	ret
    4830:	dfc00217 	ldw	ra,8(sp)
    4834:	dc400117 	ldw	r17,4(sp)
    4838:	dc000017 	ldw	r16,0(sp)
    483c:	dec00304 	addi	sp,sp,12
    4840:	f800283a 	ret

00004844 <memmove>:
    4844:	2005883a 	mov	r2,r4
    4848:	218f883a 	add	r7,r4,r6
    484c:	29000236 	bltu	r5,r4,4858 <memmove+0x14>
    4850:	1007883a 	mov	r3,r2
    4854:	00000c06 	br	4888 <memmove+0x44>
    4858:	2987883a 	add	r3,r5,r6
    485c:	20fffc2e 	bgeu	r4,r3,4850 <__alt_mem_epcs+0xfffe3850>
    4860:	380b883a 	mov	r5,r7
    4864:	30cdc83a 	sub	r6,r6,r3
    4868:	1989883a 	add	r4,r3,r6
    486c:	20000526 	beq	r4,zero,4884 <memmove+0x40>
    4870:	18ffffc4 	addi	r3,r3,-1
    4874:	19000003 	ldbu	r4,0(r3)
    4878:	297fffc4 	addi	r5,r5,-1
    487c:	29000005 	stb	r4,0(r5)
    4880:	003ff906 	br	4868 <__alt_mem_epcs+0xfffe3868>
    4884:	f800283a 	ret
    4888:	19c00526 	beq	r3,r7,48a0 <memmove+0x5c>
    488c:	29000003 	ldbu	r4,0(r5)
    4890:	18c00044 	addi	r3,r3,1
    4894:	29400044 	addi	r5,r5,1
    4898:	193fffc5 	stb	r4,-1(r3)
    489c:	003ffa06 	br	4888 <__alt_mem_epcs+0xfffe3888>
    48a0:	f800283a 	ret

000048a4 <putc>:
    48a4:	defffd04 	addi	sp,sp,-12
    48a8:	00800034 	movhi	r2,0
    48ac:	dc000115 	stw	r16,4(sp)
    48b0:	dfc00215 	stw	ra,8(sp)
    48b4:	1091b904 	addi	r2,r2,18148
    48b8:	28800115 	stw	r2,4(r5)
    48bc:	00800034 	movhi	r2,0
    48c0:	1099d904 	addi	r2,r2,26468
    48c4:	d9000005 	stb	r4,0(sp)
    48c8:	2021883a 	mov	r16,r4
    48cc:	11000017 	ldw	r4,0(r2)
    48d0:	01c00044 	movi	r7,1
    48d4:	d80d883a 	mov	r6,sp
    48d8:	00046e40 	call	46e4 <__sfvwrite_small_dev>
    48dc:	00ffffc4 	movi	r3,-1
    48e0:	10c00126 	beq	r2,r3,48e8 <putc+0x44>
    48e4:	8005883a 	mov	r2,r16
    48e8:	dfc00217 	ldw	ra,8(sp)
    48ec:	dc000117 	ldw	r16,4(sp)
    48f0:	dec00304 	addi	sp,sp,12
    48f4:	f800283a 	ret

000048f8 <_putc_r>:
    48f8:	defffd04 	addi	sp,sp,-12
    48fc:	00800034 	movhi	r2,0
    4900:	dc000115 	stw	r16,4(sp)
    4904:	dfc00215 	stw	ra,8(sp)
    4908:	1091b904 	addi	r2,r2,18148
    490c:	30800115 	stw	r2,4(r6)
    4910:	00800034 	movhi	r2,0
    4914:	1099d904 	addi	r2,r2,26468
    4918:	11000017 	ldw	r4,0(r2)
    491c:	2821883a 	mov	r16,r5
    4920:	01c00044 	movi	r7,1
    4924:	300b883a 	mov	r5,r6
    4928:	d80d883a 	mov	r6,sp
    492c:	dc000005 	stb	r16,0(sp)
    4930:	00046e40 	call	46e4 <__sfvwrite_small_dev>
    4934:	00ffffc4 	movi	r3,-1
    4938:	10c00126 	beq	r2,r3,4940 <_putc_r+0x48>
    493c:	8005883a 	mov	r2,r16
    4940:	dfc00217 	ldw	ra,8(sp)
    4944:	dc000117 	ldw	r16,4(sp)
    4948:	dec00304 	addi	sp,sp,12
    494c:	f800283a 	ret

00004950 <_write_r>:
    4950:	defffd04 	addi	sp,sp,-12
    4954:	dc000015 	stw	r16,0(sp)
    4958:	04000034 	movhi	r16,0
    495c:	dc400115 	stw	r17,4(sp)
    4960:	8419dc04 	addi	r16,r16,26480
    4964:	2023883a 	mov	r17,r4
    4968:	2809883a 	mov	r4,r5
    496c:	300b883a 	mov	r5,r6
    4970:	380d883a 	mov	r6,r7
    4974:	dfc00215 	stw	ra,8(sp)
    4978:	80000015 	stw	zero,0(r16)
    497c:	00049d80 	call	49d8 <write>
    4980:	00ffffc4 	movi	r3,-1
    4984:	10c0031e 	bne	r2,r3,4994 <_write_r+0x44>
    4988:	80c00017 	ldw	r3,0(r16)
    498c:	18000126 	beq	r3,zero,4994 <_write_r+0x44>
    4990:	88c00015 	stw	r3,0(r17)
    4994:	dfc00217 	ldw	ra,8(sp)
    4998:	dc400117 	ldw	r17,4(sp)
    499c:	dc000017 	ldw	r16,0(sp)
    49a0:	dec00304 	addi	sp,sp,12
    49a4:	f800283a 	ret

000049a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    49a8:	f800283a 	ret

000049ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    49ac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    49b0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    49b4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    49b8:	0004a380 	call	4a38 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    49bc:	0004a580 	call	4a58 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    49c0:	d1a00517 	ldw	r6,-32748(gp)
    49c4:	d1600617 	ldw	r5,-32744(gp)
    49c8:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    49cc:	dfc00017 	ldw	ra,0(sp)
    49d0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    49d4:	000108c1 	jmpi	108c <main>

000049d8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    49d8:	00800044 	movi	r2,1
    49dc:	20800226 	beq	r4,r2,49e8 <write+0x10>
    49e0:	00800084 	movi	r2,2
    49e4:	2080041e 	bne	r4,r2,49f8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    49e8:	01000034 	movhi	r4,0
    49ec:	000f883a 	mov	r7,zero
    49f0:	2119da04 	addi	r4,r4,26472
    49f4:	0004a6c1 	jmpi	4a6c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    49f8:	d0a00317 	ldw	r2,-32756(gp)
    49fc:	10000926 	beq	r2,zero,4a24 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4a00:	deffff04 	addi	sp,sp,-4
    4a04:	dfc00015 	stw	ra,0(sp)
    4a08:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4a0c:	00c01444 	movi	r3,81
    4a10:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4a14:	00bfffc4 	movi	r2,-1
    4a18:	dfc00017 	ldw	ra,0(sp)
    4a1c:	dec00104 	addi	sp,sp,4
    4a20:	f800283a 	ret
    4a24:	d0a00404 	addi	r2,gp,-32752
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4a28:	00c01444 	movi	r3,81
    4a2c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    4a30:	00bfffc4 	movi	r2,-1
    4a34:	f800283a 	ret

00004a38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4a38:	deffff04 	addi	sp,sp,-4
    4a3c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    4a40:	0004af00 	call	4af0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4a44:	00800044 	movi	r2,1
    4a48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4a4c:	dfc00017 	ldw	ra,0(sp)
    4a50:	dec00104 	addi	sp,sp,4
    4a54:	f800283a 	ret

00004a58 <alt_sys_init>:
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( COUNTER_0, counter_0);
    4a58:	008000b4 	movhi	r2,2
    4a5c:	10882804 	addi	r2,r2,8352
    4a60:	00c00044 	movi	r3,1
    4a64:	10c00035 	stwio	r3,0(r2)
    4a68:	f800283a 	ret

00004a6c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4a6c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4a70:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    4a74:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4a78:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4a7c:	2980072e 	bgeu	r5,r6,4a9c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4a80:	38c00037 	ldwio	r3,0(r7)
    4a84:	18ffffec 	andhi	r3,r3,65535
    4a88:	183ffc26 	beq	r3,zero,4a7c <__alt_mem_epcs+0xfffe3a7c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4a8c:	28c00007 	ldb	r3,0(r5)
    4a90:	20c00035 	stwio	r3,0(r4)
    4a94:	29400044 	addi	r5,r5,1
    4a98:	003ff806 	br	4a7c <__alt_mem_epcs+0xfffe3a7c>

  return count;
}
    4a9c:	f800283a 	ret

00004aa0 <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
    4aa0:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    4aa4:	280a913a 	slli	r5,r5,4
    4aa8:	2145883a 	add	r2,r4,r5
    4aac:	10800037 	ldwio	r2,0(r2)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    4ab0:	29400104 	addi	r5,r5,4
    4ab4:	2149883a 	add	r4,r4,r5
    4ab8:	20c00037 	ldwio	r3,0(r4)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
    4abc:	f800283a 	ret

00004ac0 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  return perf_get_section_time (hw_base_address, 0);
    4ac0:	000b883a 	mov	r5,zero
    4ac4:	0004aa01 	jmpi	4aa0 <perf_get_section_time>

00004ac8 <perf_get_num_starts>:
}

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  return IORD(hw_base_address, ((which_section*4)+2));
    4ac8:	280a913a 	slli	r5,r5,4
    4acc:	29400204 	addi	r5,r5,8
    4ad0:	2149883a 	add	r4,r4,r5
}
    4ad4:	20800037 	ldwio	r2,0(r4)
    4ad8:	f800283a 	ret

00004adc <alt_get_performance_counter_base>:
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
#endif
}
    4adc:	0005883a 	mov	r2,zero
    4ae0:	f800283a 	ret

00004ae4 <alt_get_cpu_freq>:
 */
alt_u32 
alt_get_cpu_freq()
{
    return ALT_CPU_FREQ;
}
    4ae4:	0080bef4 	movhi	r2,763
    4ae8:	10bc2004 	addi	r2,r2,-3968
    4aec:	f800283a 	ret

00004af0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4af0:	000170fa 	wrctl	ienable,zero
    4af4:	f800283a 	ret
